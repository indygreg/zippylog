// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pblog/protocol/response.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pblog {
namespace protocol {
namespace response {

namespace {

const ::google::protobuf::Descriptor* StartStream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartStream_reflection_ = NULL;
const ::google::protobuf::Descriptor* Get_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Get_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pblog_2fprotocol_2fresponse_2eproto() {
  protobuf_AddDesc_pblog_2fprotocol_2fresponse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pblog/protocol/response.proto");
  GOOGLE_CHECK(file != NULL);
  StartStream_descriptor_ = file->message_type(0);
  static const int StartStream_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStream, paths_),
  };
  StartStream_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartStream_descriptor_,
      StartStream::default_instance_,
      StartStream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStream, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStream, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartStream));
  Get_descriptor_ = file->message_type(1);
  static const int Get_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, paths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, stream_offsets_),
  };
  Get_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Get_descriptor_,
      Get::default_instance_,
      Get_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Get));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pblog_2fprotocol_2fresponse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartStream_descriptor_, &StartStream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Get_descriptor_, &Get::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pblog_2fprotocol_2fresponse_2eproto() {
  delete StartStream::default_instance_;
  delete StartStream_reflection_;
  delete Get::default_instance_;
  delete Get_reflection_;
}

void protobuf_AddDesc_pblog_2fprotocol_2fresponse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035pblog/protocol/response.proto\022\027pblog.p"
    "rotocol.response\"\034\n\013StartStream\022\r\n\005paths"
    "\030\001 \003(\t\",\n\003Get\022\r\n\005paths\030\001 \003(\t\022\026\n\016stream_o"
    "ffsets\030\002 \003(\004", 132);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pblog/protocol/response.proto", &protobuf_RegisterTypes);
  StartStream::default_instance_ = new StartStream();
  Get::default_instance_ = new Get();
  StartStream::default_instance_->InitAsDefaultInstance();
  Get::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pblog_2fprotocol_2fresponse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pblog_2fprotocol_2fresponse_2eproto {
  StaticDescriptorInitializer_pblog_2fprotocol_2fresponse_2eproto() {
    protobuf_AddDesc_pblog_2fprotocol_2fresponse_2eproto();
  }
} static_descriptor_initializer_pblog_2fprotocol_2fresponse_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int StartStream::kPathsFieldNumber;
#endif  // !_MSC_VER

StartStream::StartStream()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartStream::InitAsDefaultInstance() {
}

StartStream::StartStream(const StartStream& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartStream::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartStream::~StartStream() {
  SharedDtor();
}

void StartStream::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartStream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartStream_descriptor_;
}

const StartStream& StartStream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pblog_2fprotocol_2fresponse_2eproto();  return *default_instance_;
}

StartStream* StartStream::default_instance_ = NULL;

StartStream* StartStream::New() const {
  return new StartStream;
}

void StartStream::Clear() {
  paths_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string paths = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_paths()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paths(0).data(), this->paths(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_paths;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string paths = 1;
  for (int i = 0; i < this->paths_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->paths(i).data(), this->paths(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->paths(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartStream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string paths = 1;
  for (int i = 0; i < this->paths_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paths(i).data(), this->paths(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->paths(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartStream::ByteSize() const {
  int total_size = 0;
  
  // repeated string paths = 1;
  total_size += 1 * this->paths_size();
  for (int i = 0; i < this->paths_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->paths(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartStream::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartStream* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartStream*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartStream::MergeFrom(const StartStream& from) {
  GOOGLE_CHECK_NE(&from, this);
  paths_.MergeFrom(from.paths_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartStream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartStream::CopyFrom(const StartStream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartStream::IsInitialized() const {
  
  return true;
}

void StartStream::Swap(StartStream* other) {
  if (other != this) {
    paths_.Swap(&other->paths_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartStream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartStream_descriptor_;
  metadata.reflection = StartStream_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Get::kPathsFieldNumber;
const int Get::kStreamOffsetsFieldNumber;
#endif  // !_MSC_VER

Get::Get()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Get::InitAsDefaultInstance() {
}

Get::Get(const Get& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Get::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Get::~Get() {
  SharedDtor();
}

void Get::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Get::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Get::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Get_descriptor_;
}

const Get& Get::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pblog_2fprotocol_2fresponse_2eproto();  return *default_instance_;
}

Get* Get::default_instance_ = NULL;

Get* Get::New() const {
  return new Get;
}

void Get::Clear() {
  paths_.Clear();
  stream_offsets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Get::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string paths = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_paths()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paths(0).data(), this->paths(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_paths;
        if (input->ExpectTag(16)) goto parse_stream_offsets;
        break;
      }
      
      // repeated uint64 stream_offsets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stream_offsets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_stream_offsets())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_stream_offsets())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stream_offsets;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Get::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string paths = 1;
  for (int i = 0; i < this->paths_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->paths(i).data(), this->paths(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->paths(i), output);
  }
  
  // repeated uint64 stream_offsets = 2;
  for (int i = 0; i < this->stream_offsets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->stream_offsets(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Get::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string paths = 1;
  for (int i = 0; i < this->paths_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paths(i).data(), this->paths(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->paths(i), target);
  }
  
  // repeated uint64 stream_offsets = 2;
  for (int i = 0; i < this->stream_offsets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->stream_offsets(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Get::ByteSize() const {
  int total_size = 0;
  
  // repeated string paths = 1;
  total_size += 1 * this->paths_size();
  for (int i = 0; i < this->paths_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->paths(i));
  }
  
  // repeated uint64 stream_offsets = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->stream_offsets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->stream_offsets(i));
    }
    total_size += 1 * this->stream_offsets_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Get::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Get* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Get*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Get::MergeFrom(const Get& from) {
  GOOGLE_CHECK_NE(&from, this);
  paths_.MergeFrom(from.paths_);
  stream_offsets_.MergeFrom(from.stream_offsets_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Get::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Get::CopyFrom(const Get& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Get::IsInitialized() const {
  
  return true;
}

void Get::Swap(Get* other) {
  if (other != this) {
    paths_.Swap(&other->paths_);
    stream_offsets_.Swap(&other->stream_offsets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Get::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Get_descriptor_;
  metadata.reflection = Get_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace response
}  // namespace protocol
}  // namespace pblog

// @@protoc_insertion_point(global_scope)
