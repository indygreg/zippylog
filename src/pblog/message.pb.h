// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pblog/message.proto

#ifndef PROTOBUF_pblog_2fmessage_2eproto__INCLUDED
#define PROTOBUF_pblog_2fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace pblog {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pblog_2fmessage_2eproto();
void protobuf_AssignDesc_pblog_2fmessage_2eproto();
void protobuf_ShutdownFile_pblog_2fmessage_2eproto();

class Envelope;
class ActorInfo;

// ===================================================================

class Envelope : public ::google::protobuf::Message {
 public:
  Envelope();
  virtual ~Envelope();
  
  Envelope(const Envelope& from);
  
  inline Envelope& operator=(const Envelope& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Envelope& default_instance();
  
  void Swap(Envelope* other);
  
  // implements Message ----------------------------------------------
  
  Envelope* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Envelope& from);
  void MergeFrom(const Envelope& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated bytes messages = 1;
  inline int messages_size() const;
  inline void clear_messages();
  static const int kMessagesFieldNumber = 1;
  inline const ::std::string& messages(int index) const;
  inline ::std::string* mutable_messages(int index);
  inline void set_messages(int index, const ::std::string& value);
  inline void set_messages(int index, const char* value);
  inline void set_messages(int index, const void* value, size_t size);
  inline ::std::string* add_messages();
  inline void add_messages(const ::std::string& value);
  inline void add_messages(const char* value);
  inline void add_messages(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& messages() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_messages();
  
  // repeated uint32 message_namespaces = 2 [packed = true];
  inline int message_namespaces_size() const;
  inline void clear_message_namespaces();
  static const int kMessageNamespacesFieldNumber = 2;
  inline ::google::protobuf::uint32 message_namespaces(int index) const;
  inline void set_message_namespaces(int index, ::google::protobuf::uint32 value);
  inline void add_message_namespaces(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      message_namespaces() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_message_namespaces();
  
  // repeated uint32 message_types = 3 [packed = true];
  inline int message_types_size() const;
  inline void clear_message_types();
  static const int kMessageTypesFieldNumber = 3;
  inline ::google::protobuf::uint32 message_types(int index) const;
  inline void set_message_types(int index, ::google::protobuf::uint32 value);
  inline void add_message_types(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      message_types() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_message_types();
  
  // optional uint64 create_time = 4;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 create_time() const;
  inline void set_create_time(::google::protobuf::uint64 value);
  
  // repeated bytes tags = 5;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 5;
  inline const ::std::string& tags(int index) const;
  inline ::std::string* mutable_tags(int index);
  inline void set_tags(int index, const ::std::string& value);
  inline void set_tags(int index, const char* value);
  inline void set_tags(int index, const void* value, size_t size);
  inline ::std::string* add_tags();
  inline void add_tags(const ::std::string& value);
  inline void add_tags(const char* value);
  inline void add_tags(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();
  
  // repeated .pblog.message.ActorInfo actors = 6;
  inline int actors_size() const;
  inline void clear_actors();
  static const int kActorsFieldNumber = 6;
  inline const ::pblog::message::ActorInfo& actors(int index) const;
  inline ::pblog::message::ActorInfo* mutable_actors(int index);
  inline ::pblog::message::ActorInfo* add_actors();
  inline const ::google::protobuf::RepeatedPtrField< ::pblog::message::ActorInfo >&
      actors() const;
  inline ::google::protobuf::RepeatedPtrField< ::pblog::message::ActorInfo >*
      mutable_actors();
  
  // optional uint64 numeric_value = 7;
  inline bool has_numeric_value() const;
  inline void clear_numeric_value();
  static const int kNumericValueFieldNumber = 7;
  inline ::google::protobuf::uint64 numeric_value() const;
  inline void set_numeric_value(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:pblog.message.Envelope)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> messages_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > message_namespaces_;
  mutable int _message_namespaces_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > message_types_;
  mutable int _message_types_cached_byte_size_;
  ::google::protobuf::uint64 create_time_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::RepeatedPtrField< ::pblog::message::ActorInfo > actors_;
  ::google::protobuf::uint64 numeric_value_;
  friend void  protobuf_AddDesc_pblog_2fmessage_2eproto();
  friend void protobuf_AssignDesc_pblog_2fmessage_2eproto();
  friend void protobuf_ShutdownFile_pblog_2fmessage_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Envelope* default_instance_;
};
// -------------------------------------------------------------------

class ActorInfo : public ::google::protobuf::Message {
 public:
  ActorInfo();
  virtual ~ActorInfo();
  
  ActorInfo(const ActorInfo& from);
  
  inline ActorInfo& operator=(const ActorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ActorInfo& default_instance();
  
  void Swap(ActorInfo* other);
  
  // implements Message ----------------------------------------------
  
  ActorInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActorInfo& from);
  void MergeFrom(const ActorInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 touch_time = 1;
  inline bool has_touch_time() const;
  inline void clear_touch_time();
  static const int kTouchTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 touch_time() const;
  inline void set_touch_time(::google::protobuf::uint64 value);
  
  // optional uint64 sequence_id = 2;
  inline bool has_sequence_id() const;
  inline void clear_sequence_id();
  static const int kSequenceIdFieldNumber = 2;
  inline ::google::protobuf::uint64 sequence_id() const;
  inline void set_sequence_id(::google::protobuf::uint64 value);
  
  // optional string hostname = 3;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 3;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const char* value, size_t size);
  inline ::std::string* mutable_hostname();
  
  // optional bytes host_id = 4;
  inline bool has_host_id() const;
  inline void clear_host_id();
  static const int kHostIdFieldNumber = 4;
  inline const ::std::string& host_id() const;
  inline void set_host_id(const ::std::string& value);
  inline void set_host_id(const char* value);
  inline void set_host_id(const void* value, size_t size);
  inline ::std::string* mutable_host_id();
  
  // optional bytes actor_id = 5;
  inline bool has_actor_id() const;
  inline void clear_actor_id();
  static const int kActorIdFieldNumber = 5;
  inline const ::std::string& actor_id() const;
  inline void set_actor_id(const ::std::string& value);
  inline void set_actor_id(const char* value);
  inline void set_actor_id(const void* value, size_t size);
  inline ::std::string* mutable_actor_id();
  
  // optional bytes app_id = 6;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 6;
  inline const ::std::string& app_id() const;
  inline void set_app_id(const ::std::string& value);
  inline void set_app_id(const char* value);
  inline void set_app_id(const void* value, size_t size);
  inline ::std::string* mutable_app_id();
  
  // @@protoc_insertion_point(class_scope:pblog.message.ActorInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 touch_time_;
  ::google::protobuf::uint64 sequence_id_;
  ::std::string* hostname_;
  static const ::std::string _default_hostname_;
  ::std::string* host_id_;
  static const ::std::string _default_host_id_;
  ::std::string* actor_id_;
  static const ::std::string _default_actor_id_;
  ::std::string* app_id_;
  static const ::std::string _default_app_id_;
  friend void  protobuf_AddDesc_pblog_2fmessage_2eproto();
  friend void protobuf_AssignDesc_pblog_2fmessage_2eproto();
  friend void protobuf_ShutdownFile_pblog_2fmessage_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ActorInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// Envelope

// repeated bytes messages = 1;
inline int Envelope::messages_size() const {
  return messages_.size();
}
inline void Envelope::clear_messages() {
  messages_.Clear();
}
inline const ::std::string& Envelope::messages(int index) const {
  return messages_.Get(index);
}
inline ::std::string* Envelope::mutable_messages(int index) {
  return messages_.Mutable(index);
}
inline void Envelope::set_messages(int index, const ::std::string& value) {
  messages_.Mutable(index)->assign(value);
}
inline void Envelope::set_messages(int index, const char* value) {
  messages_.Mutable(index)->assign(value);
}
inline void Envelope::set_messages(int index, const void* value, size_t size) {
  messages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Envelope::add_messages() {
  return messages_.Add();
}
inline void Envelope::add_messages(const ::std::string& value) {
  messages_.Add()->assign(value);
}
inline void Envelope::add_messages(const char* value) {
  messages_.Add()->assign(value);
}
inline void Envelope::add_messages(const void* value, size_t size) {
  messages_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Envelope::messages() const {
  return messages_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Envelope::mutable_messages() {
  return &messages_;
}

// repeated uint32 message_namespaces = 2 [packed = true];
inline int Envelope::message_namespaces_size() const {
  return message_namespaces_.size();
}
inline void Envelope::clear_message_namespaces() {
  message_namespaces_.Clear();
}
inline ::google::protobuf::uint32 Envelope::message_namespaces(int index) const {
  return message_namespaces_.Get(index);
}
inline void Envelope::set_message_namespaces(int index, ::google::protobuf::uint32 value) {
  message_namespaces_.Set(index, value);
}
inline void Envelope::add_message_namespaces(::google::protobuf::uint32 value) {
  message_namespaces_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Envelope::message_namespaces() const {
  return message_namespaces_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Envelope::mutable_message_namespaces() {
  return &message_namespaces_;
}

// repeated uint32 message_types = 3 [packed = true];
inline int Envelope::message_types_size() const {
  return message_types_.size();
}
inline void Envelope::clear_message_types() {
  message_types_.Clear();
}
inline ::google::protobuf::uint32 Envelope::message_types(int index) const {
  return message_types_.Get(index);
}
inline void Envelope::set_message_types(int index, ::google::protobuf::uint32 value) {
  message_types_.Set(index, value);
}
inline void Envelope::add_message_types(::google::protobuf::uint32 value) {
  message_types_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Envelope::message_types() const {
  return message_types_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Envelope::mutable_message_types() {
  return &message_types_;
}

// optional uint64 create_time = 4;
inline bool Envelope::has_create_time() const {
  return _has_bit(3);
}
inline void Envelope::clear_create_time() {
  create_time_ = GOOGLE_ULONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::uint64 Envelope::create_time() const {
  return create_time_;
}
inline void Envelope::set_create_time(::google::protobuf::uint64 value) {
  _set_bit(3);
  create_time_ = value;
}

// repeated bytes tags = 5;
inline int Envelope::tags_size() const {
  return tags_.size();
}
inline void Envelope::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& Envelope::tags(int index) const {
  return tags_.Get(index);
}
inline ::std::string* Envelope::mutable_tags(int index) {
  return tags_.Mutable(index);
}
inline void Envelope::set_tags(int index, const ::std::string& value) {
  tags_.Mutable(index)->assign(value);
}
inline void Envelope::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
}
inline void Envelope::set_tags(int index, const void* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Envelope::add_tags() {
  return tags_.Add();
}
inline void Envelope::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
}
inline void Envelope::add_tags(const char* value) {
  tags_.Add()->assign(value);
}
inline void Envelope::add_tags(const void* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Envelope::tags() const {
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Envelope::mutable_tags() {
  return &tags_;
}

// repeated .pblog.message.ActorInfo actors = 6;
inline int Envelope::actors_size() const {
  return actors_.size();
}
inline void Envelope::clear_actors() {
  actors_.Clear();
}
inline const ::pblog::message::ActorInfo& Envelope::actors(int index) const {
  return actors_.Get(index);
}
inline ::pblog::message::ActorInfo* Envelope::mutable_actors(int index) {
  return actors_.Mutable(index);
}
inline ::pblog::message::ActorInfo* Envelope::add_actors() {
  return actors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pblog::message::ActorInfo >&
Envelope::actors() const {
  return actors_;
}
inline ::google::protobuf::RepeatedPtrField< ::pblog::message::ActorInfo >*
Envelope::mutable_actors() {
  return &actors_;
}

// optional uint64 numeric_value = 7;
inline bool Envelope::has_numeric_value() const {
  return _has_bit(6);
}
inline void Envelope::clear_numeric_value() {
  numeric_value_ = GOOGLE_ULONGLONG(0);
  _clear_bit(6);
}
inline ::google::protobuf::uint64 Envelope::numeric_value() const {
  return numeric_value_;
}
inline void Envelope::set_numeric_value(::google::protobuf::uint64 value) {
  _set_bit(6);
  numeric_value_ = value;
}

// -------------------------------------------------------------------

// ActorInfo

// optional uint64 touch_time = 1;
inline bool ActorInfo::has_touch_time() const {
  return _has_bit(0);
}
inline void ActorInfo::clear_touch_time() {
  touch_time_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 ActorInfo::touch_time() const {
  return touch_time_;
}
inline void ActorInfo::set_touch_time(::google::protobuf::uint64 value) {
  _set_bit(0);
  touch_time_ = value;
}

// optional uint64 sequence_id = 2;
inline bool ActorInfo::has_sequence_id() const {
  return _has_bit(1);
}
inline void ActorInfo::clear_sequence_id() {
  sequence_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 ActorInfo::sequence_id() const {
  return sequence_id_;
}
inline void ActorInfo::set_sequence_id(::google::protobuf::uint64 value) {
  _set_bit(1);
  sequence_id_ = value;
}

// optional string hostname = 3;
inline bool ActorInfo::has_hostname() const {
  return _has_bit(2);
}
inline void ActorInfo::clear_hostname() {
  if (hostname_ != &_default_hostname_) {
    hostname_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& ActorInfo::hostname() const {
  return *hostname_;
}
inline void ActorInfo::set_hostname(const ::std::string& value) {
  _set_bit(2);
  if (hostname_ == &_default_hostname_) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void ActorInfo::set_hostname(const char* value) {
  _set_bit(2);
  if (hostname_ == &_default_hostname_) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void ActorInfo::set_hostname(const char* value, size_t size) {
  _set_bit(2);
  if (hostname_ == &_default_hostname_) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActorInfo::mutable_hostname() {
  _set_bit(2);
  if (hostname_ == &_default_hostname_) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}

// optional bytes host_id = 4;
inline bool ActorInfo::has_host_id() const {
  return _has_bit(3);
}
inline void ActorInfo::clear_host_id() {
  if (host_id_ != &_default_host_id_) {
    host_id_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& ActorInfo::host_id() const {
  return *host_id_;
}
inline void ActorInfo::set_host_id(const ::std::string& value) {
  _set_bit(3);
  if (host_id_ == &_default_host_id_) {
    host_id_ = new ::std::string;
  }
  host_id_->assign(value);
}
inline void ActorInfo::set_host_id(const char* value) {
  _set_bit(3);
  if (host_id_ == &_default_host_id_) {
    host_id_ = new ::std::string;
  }
  host_id_->assign(value);
}
inline void ActorInfo::set_host_id(const void* value, size_t size) {
  _set_bit(3);
  if (host_id_ == &_default_host_id_) {
    host_id_ = new ::std::string;
  }
  host_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActorInfo::mutable_host_id() {
  _set_bit(3);
  if (host_id_ == &_default_host_id_) {
    host_id_ = new ::std::string;
  }
  return host_id_;
}

// optional bytes actor_id = 5;
inline bool ActorInfo::has_actor_id() const {
  return _has_bit(4);
}
inline void ActorInfo::clear_actor_id() {
  if (actor_id_ != &_default_actor_id_) {
    actor_id_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& ActorInfo::actor_id() const {
  return *actor_id_;
}
inline void ActorInfo::set_actor_id(const ::std::string& value) {
  _set_bit(4);
  if (actor_id_ == &_default_actor_id_) {
    actor_id_ = new ::std::string;
  }
  actor_id_->assign(value);
}
inline void ActorInfo::set_actor_id(const char* value) {
  _set_bit(4);
  if (actor_id_ == &_default_actor_id_) {
    actor_id_ = new ::std::string;
  }
  actor_id_->assign(value);
}
inline void ActorInfo::set_actor_id(const void* value, size_t size) {
  _set_bit(4);
  if (actor_id_ == &_default_actor_id_) {
    actor_id_ = new ::std::string;
  }
  actor_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActorInfo::mutable_actor_id() {
  _set_bit(4);
  if (actor_id_ == &_default_actor_id_) {
    actor_id_ = new ::std::string;
  }
  return actor_id_;
}

// optional bytes app_id = 6;
inline bool ActorInfo::has_app_id() const {
  return _has_bit(5);
}
inline void ActorInfo::clear_app_id() {
  if (app_id_ != &_default_app_id_) {
    app_id_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& ActorInfo::app_id() const {
  return *app_id_;
}
inline void ActorInfo::set_app_id(const ::std::string& value) {
  _set_bit(5);
  if (app_id_ == &_default_app_id_) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
}
inline void ActorInfo::set_app_id(const char* value) {
  _set_bit(5);
  if (app_id_ == &_default_app_id_) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
}
inline void ActorInfo::set_app_id(const void* value, size_t size) {
  _set_bit(5);
  if (app_id_ == &_default_app_id_) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActorInfo::mutable_app_id() {
  _set_bit(5);
  if (app_id_ == &_default_app_id_) {
    app_id_ = new ::std::string;
  }
  return app_id_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace pblog

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pblog_2fmessage_2eproto__INCLUDED
