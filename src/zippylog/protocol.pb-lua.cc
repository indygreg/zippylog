// Generated by the lua-protobuf compiler
// You shouldn't edit this file manually
//
// source proto file: zippylog/protocol.proto

#include "zippylog/protocol.pb-lua.h"

#ifdef __cplusplus
extern "C" { // make sure functions treated with C naming
#endif

#include <lauxlib.h>

#ifdef __cplusplus
}
#endif

#include <string>

// this represents Lua udata for a protocol buffer message
// we record where a message came from so we can GC it properly
typedef struct msg_udata { // confuse over-simplified pretty-printer
    ::google::protobuf::Message * msg;
    bool lua_owns;
    lua_protobuf_gc_callback gc_callback;
    void * callback_data;
} msg_udata;

using ::std::string;

int lua_protobuf_zippylog_protocol_open(lua_State *L)
{
    const char *table = luaL_findtable(L, LUA_GLOBALSINDEX, "protobuf.zippylog.protocol", 1);
    if (table) {
        return luaL_error(L, "could not create parent Lua tables");
    }
    if (!lua_istable(L, -1)) {
        lua_newtable(L);
        lua_setfield(L, -2, "zippylog.protocol");
    }
    // PluginRunState enum
    lua_newtable(L); // proxy table
    lua_newtable(L); // main table
    lua_pushnumber(L, 1);
    lua_setfield(L, -2, "PLUGIN_RUNNING");
    lua_pushnumber(L, 2);
    lua_setfield(L, -2, "PLUGIN_ERROR");
    // define metatable on main table
    lua_newtable(L);
    lua_pushcfunction(L, lua_protobuf_enum_index);
    lua_setfield(L, -2, "__index");
    lua_setmetatable(L, -2);
    
    // define metatable on proxy table
    lua_newtable(L);
    lua_pushvalue(L, -2);
    lua_setfield(L, -2, "__index");
    lua_pushcfunction(L, lua_protobuf_enum_newindex);
    lua_setfield(L, -2, "__newindex");
    lua_remove(L, -2);
    lua_setmetatable(L, -2);
    lua_setfield(L, -2, "PluginRunState");
    // end PluginRunState enum
    // PluginErrorReason enum
    lua_newtable(L); // proxy table
    lua_newtable(L); // main table
    lua_pushnumber(L, 1);
    lua_setfield(L, -2, "LUA_MEMORY_CEILING");
    lua_pushnumber(L, 2);
    lua_setfield(L, -2, "LUA_INSTRUCTION_CEILING");
    lua_pushnumber(L, 3);
    lua_setfield(L, -2, "LUA_EXECUTION_ERROR");
    // define metatable on main table
    lua_newtable(L);
    lua_pushcfunction(L, lua_protobuf_enum_index);
    lua_setfield(L, -2, "__index");
    lua_setmetatable(L, -2);
    
    // define metatable on proxy table
    lua_newtable(L);
    lua_pushvalue(L, -2);
    lua_setfield(L, -2, "__index");
    lua_pushcfunction(L, lua_protobuf_enum_newindex);
    lua_setfield(L, -2, "__newindex");
    lua_remove(L, -2);
    lua_setmetatable(L, -2);
    lua_setfield(L, -2, "PluginErrorReason");
    // end PluginErrorReason enum
    lua_pop(L, 1);
    luaL_Reg funcs [] = { { NULL, NULL } };
    luaL_register(L, "protobuf.zippylog.protocol", funcs);
    lua_protobuf_zippylog_protocol_StreamInfoV1_open(L);
    lua_protobuf_zippylog_protocol_StreamSetInfoV1_open(L);
    lua_protobuf_zippylog_protocol_BucketInfoV1_open(L);
    lua_protobuf_zippylog_protocol_StoreInfoV1_open(L);
    lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_open(L);
    lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_open(L);
    lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_open(L);
    lua_protobuf_zippylog_protocol_StoreChangeBucketAddedV1_open(L);
    lua_protobuf_zippylog_protocol_StoreChangeBucketDeletedV1_open(L);
    lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_open(L);
    lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_open(L);
    lua_protobuf_zippylog_protocol_PluginStateV1_open(L);
    return 1;
}


static const struct luaL_Reg StreamInfoV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_StreamInfoV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_StreamInfoV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StreamInfoV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_StreamInfoV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_StreamInfoV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_StreamInfoV1_gc},
    {"clear_path", lua_protobuf_zippylog_protocol_StreamInfoV1_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_StreamInfoV1_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_StreamInfoV1_set_path},
    {"has_path", lua_protobuf_zippylog_protocol_StreamInfoV1_has_path},
    {"clear_length", lua_protobuf_zippylog_protocol_StreamInfoV1_clear_length},
    {"get_length", lua_protobuf_zippylog_protocol_StreamInfoV1_get_length},
    {"set_length", lua_protobuf_zippylog_protocol_StreamInfoV1_set_length},
    {"has_length", lua_protobuf_zippylog_protocol_StreamInfoV1_has_length},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_StreamInfoV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.StreamInfoV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StreamInfoV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.StreamInfoV1", StreamInfoV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_StreamInfoV1_pushcopy(lua_State *L, const ::zippylog::protocol::StreamInfoV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StreamInfoV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StreamInfoV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_StreamInfoV1_pushreference(lua_State *L, ::zippylog::protocol::StreamInfoV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StreamInfoV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_StreamInfoV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StreamInfoV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StreamInfoV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_StreamInfoV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::StreamInfoV1 * msg = new ::zippylog::protocol::StreamInfoV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StreamInfoV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_StreamInfoV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamInfoV1");
    ::zippylog::protocol::StreamInfoV1 *m = (::zippylog::protocol::StreamInfoV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_StreamInfoV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamInfoV1");
    ::zippylog::protocol::StreamInfoV1 *m = (::zippylog::protocol::StreamInfoV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_StreamInfoV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamInfoV1");
    ::zippylog::protocol::StreamInfoV1 *m = (::zippylog::protocol::StreamInfoV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_StreamInfoV1_clear_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamInfoV1");
    ::zippylog::protocol::StreamInfoV1 *m = (::zippylog::protocol::StreamInfoV1 *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_StreamInfoV1_get_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamInfoV1");
    ::zippylog::protocol::StreamInfoV1 *m = (::zippylog::protocol::StreamInfoV1 *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StreamInfoV1_set_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamInfoV1");
    ::zippylog::protocol::StreamInfoV1 *m = (::zippylog::protocol::StreamInfoV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StreamInfoV1_has_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamInfoV1");
    ::zippylog::protocol::StreamInfoV1 *m = (::zippylog::protocol::StreamInfoV1 *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

int lua_protobuf_zippylog_protocol_StreamInfoV1_clear_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamInfoV1");
    ::zippylog::protocol::StreamInfoV1 *m = (::zippylog::protocol::StreamInfoV1 *)mud->msg;
    m->clear_length();
    return 0;
}

int lua_protobuf_zippylog_protocol_StreamInfoV1_get_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamInfoV1");
    ::zippylog::protocol::StreamInfoV1 *m = (::zippylog::protocol::StreamInfoV1 *)mud->msg;
    m->has_length() ? lua_pushinteger(L, m->length()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StreamInfoV1_set_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamInfoV1");
    ::zippylog::protocol::StreamInfoV1 *m = (::zippylog::protocol::StreamInfoV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_length();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_length(i);
    return 0;
}

int lua_protobuf_zippylog_protocol_StreamInfoV1_has_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamInfoV1");
    ::zippylog::protocol::StreamInfoV1 *m = (::zippylog::protocol::StreamInfoV1 *)mud->msg;
    lua_pushboolean(L, m->has_length());
    return 1;
}

static const struct luaL_Reg StreamSetInfoV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_StreamSetInfoV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_StreamSetInfoV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StreamSetInfoV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_StreamSetInfoV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_StreamSetInfoV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_StreamSetInfoV1_gc},
    {"clear_path", lua_protobuf_zippylog_protocol_StreamSetInfoV1_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_StreamSetInfoV1_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_StreamSetInfoV1_set_path},
    {"has_path", lua_protobuf_zippylog_protocol_StreamSetInfoV1_has_path},
    {"clear_stream", lua_protobuf_zippylog_protocol_StreamSetInfoV1_clear_stream},
    {"get_stream", lua_protobuf_zippylog_protocol_StreamSetInfoV1_get_stream},
    {"set_stream", lua_protobuf_zippylog_protocol_StreamSetInfoV1_set_stream},
    {"size_stream", lua_protobuf_zippylog_protocol_StreamSetInfoV1_size_stream},
    {"add_stream", lua_protobuf_zippylog_protocol_StreamSetInfoV1_add_stream},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_StreamSetInfoV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.StreamSetInfoV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StreamSetInfoV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.StreamSetInfoV1", StreamSetInfoV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_StreamSetInfoV1_pushcopy(lua_State *L, const ::zippylog::protocol::StreamSetInfoV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StreamSetInfoV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StreamSetInfoV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_StreamSetInfoV1_pushreference(lua_State *L, ::zippylog::protocol::StreamSetInfoV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StreamSetInfoV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_StreamSetInfoV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StreamSetInfoV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StreamSetInfoV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_StreamSetInfoV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::StreamSetInfoV1 * msg = new ::zippylog::protocol::StreamSetInfoV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StreamSetInfoV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_StreamSetInfoV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfoV1");
    ::zippylog::protocol::StreamSetInfoV1 *m = (::zippylog::protocol::StreamSetInfoV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_StreamSetInfoV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfoV1");
    ::zippylog::protocol::StreamSetInfoV1 *m = (::zippylog::protocol::StreamSetInfoV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_StreamSetInfoV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfoV1");
    ::zippylog::protocol::StreamSetInfoV1 *m = (::zippylog::protocol::StreamSetInfoV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_StreamSetInfoV1_clear_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfoV1");
    ::zippylog::protocol::StreamSetInfoV1 *m = (::zippylog::protocol::StreamSetInfoV1 *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_StreamSetInfoV1_get_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfoV1");
    ::zippylog::protocol::StreamSetInfoV1 *m = (::zippylog::protocol::StreamSetInfoV1 *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StreamSetInfoV1_set_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfoV1");
    ::zippylog::protocol::StreamSetInfoV1 *m = (::zippylog::protocol::StreamSetInfoV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StreamSetInfoV1_has_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfoV1");
    ::zippylog::protocol::StreamSetInfoV1 *m = (::zippylog::protocol::StreamSetInfoV1 *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

int lua_protobuf_zippylog_protocol_StreamSetInfoV1_clear_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfoV1");
    ::zippylog::protocol::StreamSetInfoV1 *m = (::zippylog::protocol::StreamSetInfoV1 *)mud->msg;
    m->clear_stream();
    return 0;
}

int lua_protobuf_zippylog_protocol_StreamSetInfoV1_get_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfoV1");
    ::zippylog::protocol::StreamSetInfoV1 *m = (::zippylog::protocol::StreamSetInfoV1 *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->stream_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->stream_size());
    }
    ::zippylog::protocol::StreamInfoV1 * got_msg = m->mutable_stream(index-1);
    lua_protobuf_zippylog_protocol_StreamInfoV1_pushreference(L, got_msg, NULL, NULL);
    return 1;
}

int lua_protobuf_zippylog_protocol_StreamSetInfoV1_set_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfoV1");
    ::zippylog::protocol::StreamSetInfoV1 *m = (::zippylog::protocol::StreamSetInfoV1 *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->stream_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    return luaL_error(L, "to manipulate embedded messages, fetch the embedded message and modify it");
    return 0;
}

int lua_protobuf_zippylog_protocol_StreamSetInfoV1_size_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfoV1");
    ::zippylog::protocol::StreamSetInfoV1 *m = (::zippylog::protocol::StreamSetInfoV1 *)mud->msg;
    int size = m->stream_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_protocol_StreamSetInfoV1_add_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfoV1");
    ::zippylog::protocol::StreamSetInfoV1 *m = (::zippylog::protocol::StreamSetInfoV1 *)mud->msg;
    ::zippylog::protocol::StreamInfoV1 *msg_new = m->add_stream();
    lua_protobuf_zippylog_protocol_StreamInfoV1_pushreference(L, msg_new, NULL, NULL);
    return 1;
}

static const struct luaL_Reg BucketInfoV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_BucketInfoV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_BucketInfoV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg BucketInfoV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_BucketInfoV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_BucketInfoV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_BucketInfoV1_gc},
    {"clear_path", lua_protobuf_zippylog_protocol_BucketInfoV1_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_BucketInfoV1_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_BucketInfoV1_set_path},
    {"has_path", lua_protobuf_zippylog_protocol_BucketInfoV1_has_path},
    {"clear_stream_set", lua_protobuf_zippylog_protocol_BucketInfoV1_clear_stream_set},
    {"get_stream_set", lua_protobuf_zippylog_protocol_BucketInfoV1_get_stream_set},
    {"set_stream_set", lua_protobuf_zippylog_protocol_BucketInfoV1_set_stream_set},
    {"size_stream_set", lua_protobuf_zippylog_protocol_BucketInfoV1_size_stream_set},
    {"add_stream_set", lua_protobuf_zippylog_protocol_BucketInfoV1_add_stream_set},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_BucketInfoV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.BucketInfoV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, BucketInfoV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.BucketInfoV1", BucketInfoV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_BucketInfoV1_pushcopy(lua_State *L, const ::zippylog::protocol::BucketInfoV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::BucketInfoV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.BucketInfoV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_BucketInfoV1_pushreference(lua_State *L, ::zippylog::protocol::BucketInfoV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.BucketInfoV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_BucketInfoV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::BucketInfoV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.BucketInfoV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_BucketInfoV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::BucketInfoV1 * msg = new ::zippylog::protocol::BucketInfoV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.BucketInfoV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_BucketInfoV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfoV1");
    ::zippylog::protocol::BucketInfoV1 *m = (::zippylog::protocol::BucketInfoV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_BucketInfoV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfoV1");
    ::zippylog::protocol::BucketInfoV1 *m = (::zippylog::protocol::BucketInfoV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_BucketInfoV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfoV1");
    ::zippylog::protocol::BucketInfoV1 *m = (::zippylog::protocol::BucketInfoV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_BucketInfoV1_clear_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfoV1");
    ::zippylog::protocol::BucketInfoV1 *m = (::zippylog::protocol::BucketInfoV1 *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_BucketInfoV1_get_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfoV1");
    ::zippylog::protocol::BucketInfoV1 *m = (::zippylog::protocol::BucketInfoV1 *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_BucketInfoV1_set_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfoV1");
    ::zippylog::protocol::BucketInfoV1 *m = (::zippylog::protocol::BucketInfoV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_BucketInfoV1_has_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfoV1");
    ::zippylog::protocol::BucketInfoV1 *m = (::zippylog::protocol::BucketInfoV1 *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

int lua_protobuf_zippylog_protocol_BucketInfoV1_clear_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfoV1");
    ::zippylog::protocol::BucketInfoV1 *m = (::zippylog::protocol::BucketInfoV1 *)mud->msg;
    m->clear_stream_set();
    return 0;
}

int lua_protobuf_zippylog_protocol_BucketInfoV1_get_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfoV1");
    ::zippylog::protocol::BucketInfoV1 *m = (::zippylog::protocol::BucketInfoV1 *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->stream_set_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->stream_set_size());
    }
    ::zippylog::protocol::StreamSetInfoV1 * got_msg = m->mutable_stream_set(index-1);
    lua_protobuf_zippylog_protocol_StreamSetInfoV1_pushreference(L, got_msg, NULL, NULL);
    return 1;
}

int lua_protobuf_zippylog_protocol_BucketInfoV1_set_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfoV1");
    ::zippylog::protocol::BucketInfoV1 *m = (::zippylog::protocol::BucketInfoV1 *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->stream_set_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    return luaL_error(L, "to manipulate embedded messages, fetch the embedded message and modify it");
    return 0;
}

int lua_protobuf_zippylog_protocol_BucketInfoV1_size_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfoV1");
    ::zippylog::protocol::BucketInfoV1 *m = (::zippylog::protocol::BucketInfoV1 *)mud->msg;
    int size = m->stream_set_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_protocol_BucketInfoV1_add_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfoV1");
    ::zippylog::protocol::BucketInfoV1 *m = (::zippylog::protocol::BucketInfoV1 *)mud->msg;
    ::zippylog::protocol::StreamSetInfoV1 *msg_new = m->add_stream_set();
    lua_protobuf_zippylog_protocol_StreamSetInfoV1_pushreference(L, msg_new, NULL, NULL);
    return 1;
}

static const struct luaL_Reg StoreInfoV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_StoreInfoV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_StoreInfoV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StoreInfoV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_StoreInfoV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_StoreInfoV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_StoreInfoV1_gc},
    {"clear_bucket", lua_protobuf_zippylog_protocol_StoreInfoV1_clear_bucket},
    {"get_bucket", lua_protobuf_zippylog_protocol_StoreInfoV1_get_bucket},
    {"set_bucket", lua_protobuf_zippylog_protocol_StoreInfoV1_set_bucket},
    {"size_bucket", lua_protobuf_zippylog_protocol_StoreInfoV1_size_bucket},
    {"add_bucket", lua_protobuf_zippylog_protocol_StoreInfoV1_add_bucket},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_StoreInfoV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.StoreInfoV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StoreInfoV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.StoreInfoV1", StoreInfoV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_StoreInfoV1_pushcopy(lua_State *L, const ::zippylog::protocol::StoreInfoV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreInfoV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreInfoV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_StoreInfoV1_pushreference(lua_State *L, ::zippylog::protocol::StoreInfoV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreInfoV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_StoreInfoV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreInfoV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreInfoV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreInfoV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::StoreInfoV1 * msg = new ::zippylog::protocol::StoreInfoV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreInfoV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreInfoV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreInfoV1");
    ::zippylog::protocol::StoreInfoV1 *m = (::zippylog::protocol::StoreInfoV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreInfoV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreInfoV1");
    ::zippylog::protocol::StoreInfoV1 *m = (::zippylog::protocol::StoreInfoV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreInfoV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreInfoV1");
    ::zippylog::protocol::StoreInfoV1 *m = (::zippylog::protocol::StoreInfoV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreInfoV1_clear_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreInfoV1");
    ::zippylog::protocol::StoreInfoV1 *m = (::zippylog::protocol::StoreInfoV1 *)mud->msg;
    m->clear_bucket();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreInfoV1_get_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreInfoV1");
    ::zippylog::protocol::StoreInfoV1 *m = (::zippylog::protocol::StoreInfoV1 *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->bucket_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->bucket_size());
    }
    ::zippylog::protocol::BucketInfoV1 * got_msg = m->mutable_bucket(index-1);
    lua_protobuf_zippylog_protocol_BucketInfoV1_pushreference(L, got_msg, NULL, NULL);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreInfoV1_set_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreInfoV1");
    ::zippylog::protocol::StoreInfoV1 *m = (::zippylog::protocol::StoreInfoV1 *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->bucket_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    return luaL_error(L, "to manipulate embedded messages, fetch the embedded message and modify it");
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreInfoV1_size_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreInfoV1");
    ::zippylog::protocol::StoreInfoV1 *m = (::zippylog::protocol::StoreInfoV1 *)mud->msg;
    int size = m->bucket_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreInfoV1_add_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreInfoV1");
    ::zippylog::protocol::StoreInfoV1 *m = (::zippylog::protocol::StoreInfoV1 *)mud->msg;
    ::zippylog::protocol::BucketInfoV1 *msg_new = m->add_bucket();
    lua_protobuf_zippylog_protocol_BucketInfoV1_pushreference(L, msg_new, NULL, NULL);
    return 1;
}

static const struct luaL_Reg StoreChangeStreamAddedV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StoreChangeStreamAddedV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_gc},
    {"clear_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_clear_bucket},
    {"get_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_get_bucket},
    {"set_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_set_bucket},
    {"has_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_has_bucket},
    {"clear_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_clear_stream_set},
    {"get_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_get_stream_set},
    {"set_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_set_stream_set},
    {"has_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_has_stream_set},
    {"clear_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_clear_stream},
    {"get_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_get_stream},
    {"set_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_set_stream},
    {"has_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_has_stream},
    {"clear_length", lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_clear_length},
    {"get_length", lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_get_length},
    {"set_length", lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_set_length},
    {"has_length", lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_has_length},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StoreChangeStreamAddedV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.StoreChangeStreamAddedV1", StoreChangeStreamAddedV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_pushcopy(lua_State *L, const ::zippylog::protocol::StoreChangeStreamAddedV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeStreamAddedV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_pushreference(lua_State *L, ::zippylog::protocol::StoreChangeStreamAddedV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeStreamAddedV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::StoreChangeStreamAddedV1 * msg = new ::zippylog::protocol::StoreChangeStreamAddedV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    ::zippylog::protocol::StoreChangeStreamAddedV1 *m = (::zippylog::protocol::StoreChangeStreamAddedV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    ::zippylog::protocol::StoreChangeStreamAddedV1 *m = (::zippylog::protocol::StoreChangeStreamAddedV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    ::zippylog::protocol::StoreChangeStreamAddedV1 *m = (::zippylog::protocol::StoreChangeStreamAddedV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_clear_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    ::zippylog::protocol::StoreChangeStreamAddedV1 *m = (::zippylog::protocol::StoreChangeStreamAddedV1 *)mud->msg;
    m->clear_bucket();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_get_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    ::zippylog::protocol::StoreChangeStreamAddedV1 *m = (::zippylog::protocol::StoreChangeStreamAddedV1 *)mud->msg;
    string s = m->bucket();
    m->has_bucket() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_set_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    ::zippylog::protocol::StoreChangeStreamAddedV1 *m = (::zippylog::protocol::StoreChangeStreamAddedV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_bucket();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_bucket(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_has_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    ::zippylog::protocol::StoreChangeStreamAddedV1 *m = (::zippylog::protocol::StoreChangeStreamAddedV1 *)mud->msg;
    lua_pushboolean(L, m->has_bucket());
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_clear_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    ::zippylog::protocol::StoreChangeStreamAddedV1 *m = (::zippylog::protocol::StoreChangeStreamAddedV1 *)mud->msg;
    m->clear_stream_set();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_get_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    ::zippylog::protocol::StoreChangeStreamAddedV1 *m = (::zippylog::protocol::StoreChangeStreamAddedV1 *)mud->msg;
    string s = m->stream_set();
    m->has_stream_set() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_set_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    ::zippylog::protocol::StoreChangeStreamAddedV1 *m = (::zippylog::protocol::StoreChangeStreamAddedV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_stream_set();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_stream_set(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_has_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    ::zippylog::protocol::StoreChangeStreamAddedV1 *m = (::zippylog::protocol::StoreChangeStreamAddedV1 *)mud->msg;
    lua_pushboolean(L, m->has_stream_set());
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_clear_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    ::zippylog::protocol::StoreChangeStreamAddedV1 *m = (::zippylog::protocol::StoreChangeStreamAddedV1 *)mud->msg;
    m->clear_stream();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_get_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    ::zippylog::protocol::StoreChangeStreamAddedV1 *m = (::zippylog::protocol::StoreChangeStreamAddedV1 *)mud->msg;
    string s = m->stream();
    m->has_stream() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_set_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    ::zippylog::protocol::StoreChangeStreamAddedV1 *m = (::zippylog::protocol::StoreChangeStreamAddedV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_stream();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_stream(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_has_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    ::zippylog::protocol::StoreChangeStreamAddedV1 *m = (::zippylog::protocol::StoreChangeStreamAddedV1 *)mud->msg;
    lua_pushboolean(L, m->has_stream());
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_clear_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    ::zippylog::protocol::StoreChangeStreamAddedV1 *m = (::zippylog::protocol::StoreChangeStreamAddedV1 *)mud->msg;
    m->clear_length();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_get_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    ::zippylog::protocol::StoreChangeStreamAddedV1 *m = (::zippylog::protocol::StoreChangeStreamAddedV1 *)mud->msg;
    m->has_length() ? lua_pushinteger(L, m->length()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_set_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    ::zippylog::protocol::StoreChangeStreamAddedV1 *m = (::zippylog::protocol::StoreChangeStreamAddedV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_length();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_length(i);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAddedV1_has_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAddedV1");
    ::zippylog::protocol::StoreChangeStreamAddedV1 *m = (::zippylog::protocol::StoreChangeStreamAddedV1 *)mud->msg;
    lua_pushboolean(L, m->has_length());
    return 1;
}

static const struct luaL_Reg StoreChangeStreamDeletedV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StoreChangeStreamDeletedV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_gc},
    {"clear_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_clear_bucket},
    {"get_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_get_bucket},
    {"set_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_set_bucket},
    {"has_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_has_bucket},
    {"clear_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_clear_stream_set},
    {"get_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_get_stream_set},
    {"set_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_set_stream_set},
    {"has_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_has_stream_set},
    {"clear_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_clear_stream},
    {"get_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_get_stream},
    {"set_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_set_stream},
    {"has_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_has_stream},
    {"clear_length", lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_clear_length},
    {"get_length", lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_get_length},
    {"set_length", lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_set_length},
    {"has_length", lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_has_length},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StoreChangeStreamDeletedV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.StoreChangeStreamDeletedV1", StoreChangeStreamDeletedV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_pushcopy(lua_State *L, const ::zippylog::protocol::StoreChangeStreamDeletedV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeStreamDeletedV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_pushreference(lua_State *L, ::zippylog::protocol::StoreChangeStreamDeletedV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeStreamDeletedV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::StoreChangeStreamDeletedV1 * msg = new ::zippylog::protocol::StoreChangeStreamDeletedV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    ::zippylog::protocol::StoreChangeStreamDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamDeletedV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    ::zippylog::protocol::StoreChangeStreamDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamDeletedV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    ::zippylog::protocol::StoreChangeStreamDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamDeletedV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_clear_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    ::zippylog::protocol::StoreChangeStreamDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamDeletedV1 *)mud->msg;
    m->clear_bucket();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_get_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    ::zippylog::protocol::StoreChangeStreamDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamDeletedV1 *)mud->msg;
    string s = m->bucket();
    m->has_bucket() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_set_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    ::zippylog::protocol::StoreChangeStreamDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamDeletedV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_bucket();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_bucket(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_has_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    ::zippylog::protocol::StoreChangeStreamDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamDeletedV1 *)mud->msg;
    lua_pushboolean(L, m->has_bucket());
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_clear_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    ::zippylog::protocol::StoreChangeStreamDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamDeletedV1 *)mud->msg;
    m->clear_stream_set();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_get_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    ::zippylog::protocol::StoreChangeStreamDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamDeletedV1 *)mud->msg;
    string s = m->stream_set();
    m->has_stream_set() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_set_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    ::zippylog::protocol::StoreChangeStreamDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamDeletedV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_stream_set();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_stream_set(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_has_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    ::zippylog::protocol::StoreChangeStreamDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamDeletedV1 *)mud->msg;
    lua_pushboolean(L, m->has_stream_set());
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_clear_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    ::zippylog::protocol::StoreChangeStreamDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamDeletedV1 *)mud->msg;
    m->clear_stream();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_get_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    ::zippylog::protocol::StoreChangeStreamDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamDeletedV1 *)mud->msg;
    string s = m->stream();
    m->has_stream() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_set_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    ::zippylog::protocol::StoreChangeStreamDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamDeletedV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_stream();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_stream(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_has_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    ::zippylog::protocol::StoreChangeStreamDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamDeletedV1 *)mud->msg;
    lua_pushboolean(L, m->has_stream());
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_clear_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    ::zippylog::protocol::StoreChangeStreamDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamDeletedV1 *)mud->msg;
    m->clear_length();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_get_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    ::zippylog::protocol::StoreChangeStreamDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamDeletedV1 *)mud->msg;
    m->has_length() ? lua_pushinteger(L, m->length()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_set_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    ::zippylog::protocol::StoreChangeStreamDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamDeletedV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_length();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_length(i);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeletedV1_has_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeletedV1");
    ::zippylog::protocol::StoreChangeStreamDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamDeletedV1 *)mud->msg;
    lua_pushboolean(L, m->has_length());
    return 1;
}

static const struct luaL_Reg StoreChangeStreamAppendedV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StoreChangeStreamAppendedV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_gc},
    {"clear_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_clear_bucket},
    {"get_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_get_bucket},
    {"set_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_set_bucket},
    {"has_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_has_bucket},
    {"clear_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_clear_stream_set},
    {"get_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_get_stream_set},
    {"set_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_set_stream_set},
    {"has_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_has_stream_set},
    {"clear_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_clear_stream},
    {"get_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_get_stream},
    {"set_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_set_stream},
    {"has_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_has_stream},
    {"clear_length", lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_clear_length},
    {"get_length", lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_get_length},
    {"set_length", lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_set_length},
    {"has_length", lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_has_length},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StoreChangeStreamAppendedV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.StoreChangeStreamAppendedV1", StoreChangeStreamAppendedV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_pushcopy(lua_State *L, const ::zippylog::protocol::StoreChangeStreamAppendedV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeStreamAppendedV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_pushreference(lua_State *L, ::zippylog::protocol::StoreChangeStreamAppendedV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeStreamAppendedV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::StoreChangeStreamAppendedV1 * msg = new ::zippylog::protocol::StoreChangeStreamAppendedV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    ::zippylog::protocol::StoreChangeStreamAppendedV1 *m = (::zippylog::protocol::StoreChangeStreamAppendedV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    ::zippylog::protocol::StoreChangeStreamAppendedV1 *m = (::zippylog::protocol::StoreChangeStreamAppendedV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    ::zippylog::protocol::StoreChangeStreamAppendedV1 *m = (::zippylog::protocol::StoreChangeStreamAppendedV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_clear_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    ::zippylog::protocol::StoreChangeStreamAppendedV1 *m = (::zippylog::protocol::StoreChangeStreamAppendedV1 *)mud->msg;
    m->clear_bucket();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_get_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    ::zippylog::protocol::StoreChangeStreamAppendedV1 *m = (::zippylog::protocol::StoreChangeStreamAppendedV1 *)mud->msg;
    string s = m->bucket();
    m->has_bucket() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_set_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    ::zippylog::protocol::StoreChangeStreamAppendedV1 *m = (::zippylog::protocol::StoreChangeStreamAppendedV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_bucket();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_bucket(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_has_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    ::zippylog::protocol::StoreChangeStreamAppendedV1 *m = (::zippylog::protocol::StoreChangeStreamAppendedV1 *)mud->msg;
    lua_pushboolean(L, m->has_bucket());
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_clear_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    ::zippylog::protocol::StoreChangeStreamAppendedV1 *m = (::zippylog::protocol::StoreChangeStreamAppendedV1 *)mud->msg;
    m->clear_stream_set();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_get_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    ::zippylog::protocol::StoreChangeStreamAppendedV1 *m = (::zippylog::protocol::StoreChangeStreamAppendedV1 *)mud->msg;
    string s = m->stream_set();
    m->has_stream_set() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_set_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    ::zippylog::protocol::StoreChangeStreamAppendedV1 *m = (::zippylog::protocol::StoreChangeStreamAppendedV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_stream_set();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_stream_set(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_has_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    ::zippylog::protocol::StoreChangeStreamAppendedV1 *m = (::zippylog::protocol::StoreChangeStreamAppendedV1 *)mud->msg;
    lua_pushboolean(L, m->has_stream_set());
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_clear_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    ::zippylog::protocol::StoreChangeStreamAppendedV1 *m = (::zippylog::protocol::StoreChangeStreamAppendedV1 *)mud->msg;
    m->clear_stream();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_get_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    ::zippylog::protocol::StoreChangeStreamAppendedV1 *m = (::zippylog::protocol::StoreChangeStreamAppendedV1 *)mud->msg;
    string s = m->stream();
    m->has_stream() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_set_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    ::zippylog::protocol::StoreChangeStreamAppendedV1 *m = (::zippylog::protocol::StoreChangeStreamAppendedV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_stream();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_stream(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_has_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    ::zippylog::protocol::StoreChangeStreamAppendedV1 *m = (::zippylog::protocol::StoreChangeStreamAppendedV1 *)mud->msg;
    lua_pushboolean(L, m->has_stream());
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_clear_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    ::zippylog::protocol::StoreChangeStreamAppendedV1 *m = (::zippylog::protocol::StoreChangeStreamAppendedV1 *)mud->msg;
    m->clear_length();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_get_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    ::zippylog::protocol::StoreChangeStreamAppendedV1 *m = (::zippylog::protocol::StoreChangeStreamAppendedV1 *)mud->msg;
    m->has_length() ? lua_pushinteger(L, m->length()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_set_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    ::zippylog::protocol::StoreChangeStreamAppendedV1 *m = (::zippylog::protocol::StoreChangeStreamAppendedV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_length();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_length(i);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppendedV1_has_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppendedV1");
    ::zippylog::protocol::StoreChangeStreamAppendedV1 *m = (::zippylog::protocol::StoreChangeStreamAppendedV1 *)mud->msg;
    lua_pushboolean(L, m->has_length());
    return 1;
}

static const struct luaL_Reg StoreChangeBucketAddedV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_StoreChangeBucketAddedV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_StoreChangeBucketAddedV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StoreChangeBucketAddedV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_StoreChangeBucketAddedV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_StoreChangeBucketAddedV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_StoreChangeBucketAddedV1_gc},
    {"clear_bucket", lua_protobuf_zippylog_protocol_StoreChangeBucketAddedV1_clear_bucket},
    {"get_bucket", lua_protobuf_zippylog_protocol_StoreChangeBucketAddedV1_get_bucket},
    {"set_bucket", lua_protobuf_zippylog_protocol_StoreChangeBucketAddedV1_set_bucket},
    {"has_bucket", lua_protobuf_zippylog_protocol_StoreChangeBucketAddedV1_has_bucket},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_StoreChangeBucketAddedV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.StoreChangeBucketAddedV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StoreChangeBucketAddedV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.StoreChangeBucketAddedV1", StoreChangeBucketAddedV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_StoreChangeBucketAddedV1_pushcopy(lua_State *L, const ::zippylog::protocol::StoreChangeBucketAddedV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeBucketAddedV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeBucketAddedV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_StoreChangeBucketAddedV1_pushreference(lua_State *L, ::zippylog::protocol::StoreChangeBucketAddedV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeBucketAddedV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_StoreChangeBucketAddedV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeBucketAddedV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeBucketAddedV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeBucketAddedV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::StoreChangeBucketAddedV1 * msg = new ::zippylog::protocol::StoreChangeBucketAddedV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeBucketAddedV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeBucketAddedV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketAddedV1");
    ::zippylog::protocol::StoreChangeBucketAddedV1 *m = (::zippylog::protocol::StoreChangeBucketAddedV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeBucketAddedV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketAddedV1");
    ::zippylog::protocol::StoreChangeBucketAddedV1 *m = (::zippylog::protocol::StoreChangeBucketAddedV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeBucketAddedV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketAddedV1");
    ::zippylog::protocol::StoreChangeBucketAddedV1 *m = (::zippylog::protocol::StoreChangeBucketAddedV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeBucketAddedV1_clear_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketAddedV1");
    ::zippylog::protocol::StoreChangeBucketAddedV1 *m = (::zippylog::protocol::StoreChangeBucketAddedV1 *)mud->msg;
    m->clear_bucket();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeBucketAddedV1_get_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketAddedV1");
    ::zippylog::protocol::StoreChangeBucketAddedV1 *m = (::zippylog::protocol::StoreChangeBucketAddedV1 *)mud->msg;
    string s = m->bucket();
    m->has_bucket() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeBucketAddedV1_set_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketAddedV1");
    ::zippylog::protocol::StoreChangeBucketAddedV1 *m = (::zippylog::protocol::StoreChangeBucketAddedV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_bucket();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_bucket(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeBucketAddedV1_has_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketAddedV1");
    ::zippylog::protocol::StoreChangeBucketAddedV1 *m = (::zippylog::protocol::StoreChangeBucketAddedV1 *)mud->msg;
    lua_pushboolean(L, m->has_bucket());
    return 1;
}

static const struct luaL_Reg StoreChangeBucketDeletedV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_StoreChangeBucketDeletedV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_StoreChangeBucketDeletedV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StoreChangeBucketDeletedV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_StoreChangeBucketDeletedV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_StoreChangeBucketDeletedV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_StoreChangeBucketDeletedV1_gc},
    {"clear_bucket", lua_protobuf_zippylog_protocol_StoreChangeBucketDeletedV1_clear_bucket},
    {"get_bucket", lua_protobuf_zippylog_protocol_StoreChangeBucketDeletedV1_get_bucket},
    {"set_bucket", lua_protobuf_zippylog_protocol_StoreChangeBucketDeletedV1_set_bucket},
    {"has_bucket", lua_protobuf_zippylog_protocol_StoreChangeBucketDeletedV1_has_bucket},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_StoreChangeBucketDeletedV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.StoreChangeBucketDeletedV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StoreChangeBucketDeletedV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.StoreChangeBucketDeletedV1", StoreChangeBucketDeletedV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_StoreChangeBucketDeletedV1_pushcopy(lua_State *L, const ::zippylog::protocol::StoreChangeBucketDeletedV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeBucketDeletedV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeBucketDeletedV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_StoreChangeBucketDeletedV1_pushreference(lua_State *L, ::zippylog::protocol::StoreChangeBucketDeletedV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeBucketDeletedV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_StoreChangeBucketDeletedV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeBucketDeletedV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeBucketDeletedV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeBucketDeletedV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::StoreChangeBucketDeletedV1 * msg = new ::zippylog::protocol::StoreChangeBucketDeletedV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeBucketDeletedV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeBucketDeletedV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketDeletedV1");
    ::zippylog::protocol::StoreChangeBucketDeletedV1 *m = (::zippylog::protocol::StoreChangeBucketDeletedV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeBucketDeletedV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketDeletedV1");
    ::zippylog::protocol::StoreChangeBucketDeletedV1 *m = (::zippylog::protocol::StoreChangeBucketDeletedV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeBucketDeletedV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketDeletedV1");
    ::zippylog::protocol::StoreChangeBucketDeletedV1 *m = (::zippylog::protocol::StoreChangeBucketDeletedV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeBucketDeletedV1_clear_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketDeletedV1");
    ::zippylog::protocol::StoreChangeBucketDeletedV1 *m = (::zippylog::protocol::StoreChangeBucketDeletedV1 *)mud->msg;
    m->clear_bucket();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeBucketDeletedV1_get_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketDeletedV1");
    ::zippylog::protocol::StoreChangeBucketDeletedV1 *m = (::zippylog::protocol::StoreChangeBucketDeletedV1 *)mud->msg;
    string s = m->bucket();
    m->has_bucket() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeBucketDeletedV1_set_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketDeletedV1");
    ::zippylog::protocol::StoreChangeBucketDeletedV1 *m = (::zippylog::protocol::StoreChangeBucketDeletedV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_bucket();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_bucket(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeBucketDeletedV1_has_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketDeletedV1");
    ::zippylog::protocol::StoreChangeBucketDeletedV1 *m = (::zippylog::protocol::StoreChangeBucketDeletedV1 *)mud->msg;
    lua_pushboolean(L, m->has_bucket());
    return 1;
}

static const struct luaL_Reg StoreChangeStreamSetAddedV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StoreChangeStreamSetAddedV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_gc},
    {"clear_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_clear_bucket},
    {"get_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_get_bucket},
    {"set_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_set_bucket},
    {"has_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_has_bucket},
    {"clear_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_clear_stream_set},
    {"get_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_get_stream_set},
    {"set_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_set_stream_set},
    {"has_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_has_stream_set},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamSetAddedV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StoreChangeStreamSetAddedV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.StoreChangeStreamSetAddedV1", StoreChangeStreamSetAddedV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_pushcopy(lua_State *L, const ::zippylog::protocol::StoreChangeStreamSetAddedV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeStreamSetAddedV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamSetAddedV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_pushreference(lua_State *L, ::zippylog::protocol::StoreChangeStreamSetAddedV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamSetAddedV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeStreamSetAddedV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamSetAddedV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::StoreChangeStreamSetAddedV1 * msg = new ::zippylog::protocol::StoreChangeStreamSetAddedV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamSetAddedV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetAddedV1");
    ::zippylog::protocol::StoreChangeStreamSetAddedV1 *m = (::zippylog::protocol::StoreChangeStreamSetAddedV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetAddedV1");
    ::zippylog::protocol::StoreChangeStreamSetAddedV1 *m = (::zippylog::protocol::StoreChangeStreamSetAddedV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetAddedV1");
    ::zippylog::protocol::StoreChangeStreamSetAddedV1 *m = (::zippylog::protocol::StoreChangeStreamSetAddedV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_clear_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetAddedV1");
    ::zippylog::protocol::StoreChangeStreamSetAddedV1 *m = (::zippylog::protocol::StoreChangeStreamSetAddedV1 *)mud->msg;
    m->clear_bucket();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_get_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetAddedV1");
    ::zippylog::protocol::StoreChangeStreamSetAddedV1 *m = (::zippylog::protocol::StoreChangeStreamSetAddedV1 *)mud->msg;
    string s = m->bucket();
    m->has_bucket() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_set_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetAddedV1");
    ::zippylog::protocol::StoreChangeStreamSetAddedV1 *m = (::zippylog::protocol::StoreChangeStreamSetAddedV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_bucket();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_bucket(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_has_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetAddedV1");
    ::zippylog::protocol::StoreChangeStreamSetAddedV1 *m = (::zippylog::protocol::StoreChangeStreamSetAddedV1 *)mud->msg;
    lua_pushboolean(L, m->has_bucket());
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_clear_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetAddedV1");
    ::zippylog::protocol::StoreChangeStreamSetAddedV1 *m = (::zippylog::protocol::StoreChangeStreamSetAddedV1 *)mud->msg;
    m->clear_stream_set();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_get_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetAddedV1");
    ::zippylog::protocol::StoreChangeStreamSetAddedV1 *m = (::zippylog::protocol::StoreChangeStreamSetAddedV1 *)mud->msg;
    string s = m->stream_set();
    m->has_stream_set() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_set_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetAddedV1");
    ::zippylog::protocol::StoreChangeStreamSetAddedV1 *m = (::zippylog::protocol::StoreChangeStreamSetAddedV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_stream_set();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_stream_set(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAddedV1_has_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetAddedV1");
    ::zippylog::protocol::StoreChangeStreamSetAddedV1 *m = (::zippylog::protocol::StoreChangeStreamSetAddedV1 *)mud->msg;
    lua_pushboolean(L, m->has_stream_set());
    return 1;
}

static const struct luaL_Reg StoreChangeStreamSetDeletedV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StoreChangeStreamSetDeletedV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_gc},
    {"clear_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_clear_bucket},
    {"get_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_get_bucket},
    {"set_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_set_bucket},
    {"has_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_has_bucket},
    {"clear_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_clear_stream_set},
    {"get_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_get_stream_set},
    {"set_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_set_stream_set},
    {"has_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_has_stream_set},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeletedV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StoreChangeStreamSetDeletedV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.StoreChangeStreamSetDeletedV1", StoreChangeStreamSetDeletedV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_pushcopy(lua_State *L, const ::zippylog::protocol::StoreChangeStreamSetDeletedV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeStreamSetDeletedV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeletedV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_pushreference(lua_State *L, ::zippylog::protocol::StoreChangeStreamSetDeletedV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeletedV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeStreamSetDeletedV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeletedV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::StoreChangeStreamSetDeletedV1 * msg = new ::zippylog::protocol::StoreChangeStreamSetDeletedV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeletedV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeletedV1");
    ::zippylog::protocol::StoreChangeStreamSetDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamSetDeletedV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeletedV1");
    ::zippylog::protocol::StoreChangeStreamSetDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamSetDeletedV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeletedV1");
    ::zippylog::protocol::StoreChangeStreamSetDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamSetDeletedV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_clear_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeletedV1");
    ::zippylog::protocol::StoreChangeStreamSetDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamSetDeletedV1 *)mud->msg;
    m->clear_bucket();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_get_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeletedV1");
    ::zippylog::protocol::StoreChangeStreamSetDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamSetDeletedV1 *)mud->msg;
    string s = m->bucket();
    m->has_bucket() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_set_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeletedV1");
    ::zippylog::protocol::StoreChangeStreamSetDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamSetDeletedV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_bucket();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_bucket(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_has_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeletedV1");
    ::zippylog::protocol::StoreChangeStreamSetDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamSetDeletedV1 *)mud->msg;
    lua_pushboolean(L, m->has_bucket());
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_clear_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeletedV1");
    ::zippylog::protocol::StoreChangeStreamSetDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamSetDeletedV1 *)mud->msg;
    m->clear_stream_set();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_get_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeletedV1");
    ::zippylog::protocol::StoreChangeStreamSetDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamSetDeletedV1 *)mud->msg;
    string s = m->stream_set();
    m->has_stream_set() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_set_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeletedV1");
    ::zippylog::protocol::StoreChangeStreamSetDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamSetDeletedV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_stream_set();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_stream_set(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeletedV1_has_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeletedV1");
    ::zippylog::protocol::StoreChangeStreamSetDeletedV1 *m = (::zippylog::protocol::StoreChangeStreamSetDeletedV1 *)mud->msg;
    lua_pushboolean(L, m->has_stream_set());
    return 1;
}

static const struct luaL_Reg PluginStateV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_PluginStateV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_PluginStateV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg PluginStateV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_PluginStateV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_PluginStateV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_PluginStateV1_gc},
    {"clear_name", lua_protobuf_zippylog_protocol_PluginStateV1_clear_name},
    {"get_name", lua_protobuf_zippylog_protocol_PluginStateV1_get_name},
    {"set_name", lua_protobuf_zippylog_protocol_PluginStateV1_set_name},
    {"has_name", lua_protobuf_zippylog_protocol_PluginStateV1_has_name},
    {"clear_state", lua_protobuf_zippylog_protocol_PluginStateV1_clear_state},
    {"get_state", lua_protobuf_zippylog_protocol_PluginStateV1_get_state},
    {"set_state", lua_protobuf_zippylog_protocol_PluginStateV1_set_state},
    {"has_state", lua_protobuf_zippylog_protocol_PluginStateV1_has_state},
    {"clear_error_code", lua_protobuf_zippylog_protocol_PluginStateV1_clear_error_code},
    {"get_error_code", lua_protobuf_zippylog_protocol_PluginStateV1_get_error_code},
    {"set_error_code", lua_protobuf_zippylog_protocol_PluginStateV1_set_error_code},
    {"has_error_code", lua_protobuf_zippylog_protocol_PluginStateV1_has_error_code},
    {"clear_error_message", lua_protobuf_zippylog_protocol_PluginStateV1_clear_error_message},
    {"get_error_message", lua_protobuf_zippylog_protocol_PluginStateV1_get_error_message},
    {"set_error_message", lua_protobuf_zippylog_protocol_PluginStateV1_set_error_message},
    {"has_error_message", lua_protobuf_zippylog_protocol_PluginStateV1_has_error_message},
    {"clear_lua_current_memory", lua_protobuf_zippylog_protocol_PluginStateV1_clear_lua_current_memory},
    {"get_lua_current_memory", lua_protobuf_zippylog_protocol_PluginStateV1_get_lua_current_memory},
    {"set_lua_current_memory", lua_protobuf_zippylog_protocol_PluginStateV1_set_lua_current_memory},
    {"has_lua_current_memory", lua_protobuf_zippylog_protocol_PluginStateV1_has_lua_current_memory},
    {"clear_lua_max_memory", lua_protobuf_zippylog_protocol_PluginStateV1_clear_lua_max_memory},
    {"get_lua_max_memory", lua_protobuf_zippylog_protocol_PluginStateV1_get_lua_max_memory},
    {"set_lua_max_memory", lua_protobuf_zippylog_protocol_PluginStateV1_set_lua_max_memory},
    {"has_lua_max_memory", lua_protobuf_zippylog_protocol_PluginStateV1_has_lua_max_memory},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_PluginStateV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.PluginStateV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, PluginStateV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.PluginStateV1", PluginStateV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_PluginStateV1_pushcopy(lua_State *L, const ::zippylog::protocol::PluginStateV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::PluginStateV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.PluginStateV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_PluginStateV1_pushreference(lua_State *L, ::zippylog::protocol::PluginStateV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.PluginStateV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_PluginStateV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::PluginStateV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.PluginStateV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::PluginStateV1 * msg = new ::zippylog::protocol::PluginStateV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.PluginStateV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_PluginStateV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_PluginStateV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_PluginStateV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_PluginStateV1_clear_name(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    m->clear_name();
    return 0;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_get_name(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    string s = m->name();
    m->has_name() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_set_name(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_name();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_name(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_has_name(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    lua_pushboolean(L, m->has_name());
    return 1;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_clear_state(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    m->clear_state();
    return 0;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_get_state(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    m->has_state() ? lua_pushinteger(L, m->state()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_set_state(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_state();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_state((::zippylog::protocol::PluginRunState)i);
    return 0;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_has_state(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    lua_pushboolean(L, m->has_state());
    return 1;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_clear_error_code(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    m->clear_error_code();
    return 0;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_get_error_code(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    m->has_error_code() ? lua_pushinteger(L, m->error_code()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_set_error_code(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_error_code();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_error_code((::zippylog::protocol::PluginErrorReason)i);
    return 0;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_has_error_code(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    lua_pushboolean(L, m->has_error_code());
    return 1;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_clear_error_message(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    m->clear_error_message();
    return 0;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_get_error_message(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    string s = m->error_message();
    m->has_error_message() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_set_error_message(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_error_message();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_error_message(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_has_error_message(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    lua_pushboolean(L, m->has_error_message());
    return 1;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_clear_lua_current_memory(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    m->clear_lua_current_memory();
    return 0;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_get_lua_current_memory(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    m->has_lua_current_memory() ? lua_pushinteger(L, m->lua_current_memory()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_set_lua_current_memory(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_lua_current_memory();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_lua_current_memory(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_has_lua_current_memory(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    lua_pushboolean(L, m->has_lua_current_memory());
    return 1;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_clear_lua_max_memory(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    m->clear_lua_max_memory();
    return 0;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_get_lua_max_memory(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    m->has_lua_max_memory() ? lua_pushinteger(L, m->lua_max_memory()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_set_lua_max_memory(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_lua_max_memory();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_lua_max_memory(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_PluginStateV1_has_lua_max_memory(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.PluginStateV1");
    ::zippylog::protocol::PluginStateV1 *m = (::zippylog::protocol::PluginStateV1 *)mud->msg;
    lua_pushboolean(L, m->has_lua_max_memory());
    return 1;
}
