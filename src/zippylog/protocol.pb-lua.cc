// Generated by the lua-protobuf compiler
// You shouldn't edit this file manually
//
// source proto file: zippylog/protocol.proto

#include "zippylog/protocol.pb-lua.h"

#ifdef __cplusplus
extern "C" { // make sure functions treated with C naming
#endif

#include <lauxlib.h>

#ifdef __cplusplus
}
#endif

#include <string>

// this represents Lua udata for a protocol buffer message
// we record where a message came from so we can GC it properly
typedef struct msg_udata { // confuse over-simplified pretty-printer
    ::google::protobuf::Message * msg;
    bool lua_owns;
    lua_protobuf_gc_callback gc_callback;
    void * callback_data;
} msg_udata;

using ::std::string;

int lua_protobuf_zippylog_protocol_open(lua_State *L)
{
    const char *table = luaL_findtable(L, LUA_GLOBALSINDEX, "protobuf.zippylog.protocol", 1);
    if (table) {
        return luaL_error(L, "could not create parent Lua tables");
    }
    if (!lua_istable(L, -1)) {
        lua_newtable(L);
        lua_setfield(L, -2, "zippylog.protocol");
    }
    lua_pop(L, 1);
    luaL_Reg funcs [] = { { NULL, NULL } };
    luaL_register(L, "protobuf.zippylog.protocol", funcs);
    lua_protobuf_zippylog_protocol_StreamInfo_open(L);
    lua_protobuf_zippylog_protocol_StreamSetInfo_open(L);
    lua_protobuf_zippylog_protocol_BucketInfo_open(L);
    lua_protobuf_zippylog_protocol_StoreInfo_open(L);
    lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_open(L);
    lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_open(L);
    lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_open(L);
    lua_protobuf_zippylog_protocol_StoreChangeBucketAdded_open(L);
    lua_protobuf_zippylog_protocol_StoreChangeBucketDeleted_open(L);
    lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_open(L);
    lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_open(L);
    return 1;
}


static const struct luaL_Reg StreamInfo_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_StreamInfo_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_StreamInfo_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StreamInfo_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_StreamInfo_serialized},
    {"clear", lua_protobuf_zippylog_protocol_StreamInfo_clear},
    {"__gc", lua_protobuf_zippylog_protocol_StreamInfo_gc},
    {"clear_path", lua_protobuf_zippylog_protocol_StreamInfo_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_StreamInfo_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_StreamInfo_set_path},
    {"has_path", lua_protobuf_zippylog_protocol_StreamInfo_has_path},
    {"clear_length", lua_protobuf_zippylog_protocol_StreamInfo_clear_length},
    {"get_length", lua_protobuf_zippylog_protocol_StreamInfo_get_length},
    {"set_length", lua_protobuf_zippylog_protocol_StreamInfo_set_length},
    {"has_length", lua_protobuf_zippylog_protocol_StreamInfo_has_length},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_StreamInfo_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.StreamInfo");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StreamInfo_methods);
    luaL_register(L, "protobuf.zippylog.protocol.StreamInfo", StreamInfo_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_StreamInfo_pushcopy(lua_State *L, const ::zippylog::protocol::StreamInfo &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StreamInfo(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StreamInfo");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_StreamInfo_pushreference(lua_State *L, ::zippylog::protocol::StreamInfo *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StreamInfo");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_StreamInfo_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StreamInfo();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StreamInfo");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_StreamInfo_parsefromstring(lua_State *L)
{
    assert(0);
    return 1;
}
int lua_protobuf_zippylog_protocol_StreamInfo_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamInfo");
    ::zippylog::protocol::StreamInfo *m = (::zippylog::protocol::StreamInfo *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_StreamInfo_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamInfo");
    ::zippylog::protocol::StreamInfo *m = (::zippylog::protocol::StreamInfo *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_StreamInfo_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamInfo");
    ::zippylog::protocol::StreamInfo *m = (::zippylog::protocol::StreamInfo *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_StreamInfo_clear_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamInfo");
    ::zippylog::protocol::StreamInfo *m = (::zippylog::protocol::StreamInfo *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_StreamInfo_get_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamInfo");
    ::zippylog::protocol::StreamInfo *m = (::zippylog::protocol::StreamInfo *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StreamInfo_set_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamInfo");
    ::zippylog::protocol::StreamInfo *m = (::zippylog::protocol::StreamInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StreamInfo_has_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamInfo");
    ::zippylog::protocol::StreamInfo *m = (::zippylog::protocol::StreamInfo *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

int lua_protobuf_zippylog_protocol_StreamInfo_clear_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamInfo");
    ::zippylog::protocol::StreamInfo *m = (::zippylog::protocol::StreamInfo *)mud->msg;
    m->clear_length();
    return 0;
}

int lua_protobuf_zippylog_protocol_StreamInfo_get_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamInfo");
    ::zippylog::protocol::StreamInfo *m = (::zippylog::protocol::StreamInfo *)mud->msg;
    m->has_length() ? lua_pushinteger(L, m->length()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StreamInfo_set_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamInfo");
    ::zippylog::protocol::StreamInfo *m = (::zippylog::protocol::StreamInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_length();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_length(i);
    return 0;
}

int lua_protobuf_zippylog_protocol_StreamInfo_has_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamInfo");
    ::zippylog::protocol::StreamInfo *m = (::zippylog::protocol::StreamInfo *)mud->msg;
    lua_pushboolean(L, m->has_length());
    return 1;
}

static const struct luaL_Reg StreamSetInfo_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_StreamSetInfo_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_StreamSetInfo_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StreamSetInfo_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_StreamSetInfo_serialized},
    {"clear", lua_protobuf_zippylog_protocol_StreamSetInfo_clear},
    {"__gc", lua_protobuf_zippylog_protocol_StreamSetInfo_gc},
    {"clear_path", lua_protobuf_zippylog_protocol_StreamSetInfo_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_StreamSetInfo_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_StreamSetInfo_set_path},
    {"has_path", lua_protobuf_zippylog_protocol_StreamSetInfo_has_path},
    {"clear_stream", lua_protobuf_zippylog_protocol_StreamSetInfo_clear_stream},
    {"get_stream", lua_protobuf_zippylog_protocol_StreamSetInfo_get_stream},
    {"set_stream", lua_protobuf_zippylog_protocol_StreamSetInfo_set_stream},
    {"size_stream", lua_protobuf_zippylog_protocol_StreamSetInfo_size_stream},
    {"add_stream", lua_protobuf_zippylog_protocol_StreamSetInfo_add_stream},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_StreamSetInfo_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.StreamSetInfo");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StreamSetInfo_methods);
    luaL_register(L, "protobuf.zippylog.protocol.StreamSetInfo", StreamSetInfo_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_StreamSetInfo_pushcopy(lua_State *L, const ::zippylog::protocol::StreamSetInfo &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StreamSetInfo(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StreamSetInfo");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_StreamSetInfo_pushreference(lua_State *L, ::zippylog::protocol::StreamSetInfo *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StreamSetInfo");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_StreamSetInfo_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StreamSetInfo();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StreamSetInfo");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_StreamSetInfo_parsefromstring(lua_State *L)
{
    assert(0);
    return 1;
}
int lua_protobuf_zippylog_protocol_StreamSetInfo_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfo");
    ::zippylog::protocol::StreamSetInfo *m = (::zippylog::protocol::StreamSetInfo *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_StreamSetInfo_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfo");
    ::zippylog::protocol::StreamSetInfo *m = (::zippylog::protocol::StreamSetInfo *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_StreamSetInfo_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfo");
    ::zippylog::protocol::StreamSetInfo *m = (::zippylog::protocol::StreamSetInfo *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_StreamSetInfo_clear_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfo");
    ::zippylog::protocol::StreamSetInfo *m = (::zippylog::protocol::StreamSetInfo *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_StreamSetInfo_get_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfo");
    ::zippylog::protocol::StreamSetInfo *m = (::zippylog::protocol::StreamSetInfo *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StreamSetInfo_set_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfo");
    ::zippylog::protocol::StreamSetInfo *m = (::zippylog::protocol::StreamSetInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StreamSetInfo_has_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfo");
    ::zippylog::protocol::StreamSetInfo *m = (::zippylog::protocol::StreamSetInfo *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

int lua_protobuf_zippylog_protocol_StreamSetInfo_clear_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfo");
    ::zippylog::protocol::StreamSetInfo *m = (::zippylog::protocol::StreamSetInfo *)mud->msg;
    m->clear_stream();
    return 0;
}

int lua_protobuf_zippylog_protocol_StreamSetInfo_get_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfo");
    ::zippylog::protocol::StreamSetInfo *m = (::zippylog::protocol::StreamSetInfo *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->stream_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->stream_size());
    }
    ::zippylog::protocol::StreamInfo * got_msg = m->mutable_stream(index-1);
    lua_protobuf_zippylog_protocol_StreamInfo_pushreference(L, got_msg, NULL, NULL);
    return 1;
}

int lua_protobuf_zippylog_protocol_StreamSetInfo_set_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfo");
    ::zippylog::protocol::StreamSetInfo *m = (::zippylog::protocol::StreamSetInfo *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    size_t current_size = m->stream_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    return luaL_error(L, "to manipulate embedded messages, fetch the embedded message and modify it");
    return 0;
}

int lua_protobuf_zippylog_protocol_StreamSetInfo_size_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfo");
    ::zippylog::protocol::StreamSetInfo *m = (::zippylog::protocol::StreamSetInfo *)mud->msg;
    int size = m->stream_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_protocol_StreamSetInfo_add_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StreamSetInfo");
    ::zippylog::protocol::StreamSetInfo *m = (::zippylog::protocol::StreamSetInfo *)mud->msg;
    ::zippylog::protocol::StreamInfo *msg_new = m->add_stream();
    lua_protobuf_zippylog_protocol_StreamInfo_pushreference(L, msg_new, NULL, NULL);
    return 1;
}

static const struct luaL_Reg BucketInfo_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_BucketInfo_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_BucketInfo_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg BucketInfo_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_BucketInfo_serialized},
    {"clear", lua_protobuf_zippylog_protocol_BucketInfo_clear},
    {"__gc", lua_protobuf_zippylog_protocol_BucketInfo_gc},
    {"clear_path", lua_protobuf_zippylog_protocol_BucketInfo_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_BucketInfo_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_BucketInfo_set_path},
    {"has_path", lua_protobuf_zippylog_protocol_BucketInfo_has_path},
    {"clear_stream_set", lua_protobuf_zippylog_protocol_BucketInfo_clear_stream_set},
    {"get_stream_set", lua_protobuf_zippylog_protocol_BucketInfo_get_stream_set},
    {"set_stream_set", lua_protobuf_zippylog_protocol_BucketInfo_set_stream_set},
    {"size_stream_set", lua_protobuf_zippylog_protocol_BucketInfo_size_stream_set},
    {"add_stream_set", lua_protobuf_zippylog_protocol_BucketInfo_add_stream_set},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_BucketInfo_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.BucketInfo");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, BucketInfo_methods);
    luaL_register(L, "protobuf.zippylog.protocol.BucketInfo", BucketInfo_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_BucketInfo_pushcopy(lua_State *L, const ::zippylog::protocol::BucketInfo &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::BucketInfo(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.BucketInfo");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_BucketInfo_pushreference(lua_State *L, ::zippylog::protocol::BucketInfo *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.BucketInfo");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_BucketInfo_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::BucketInfo();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.BucketInfo");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_BucketInfo_parsefromstring(lua_State *L)
{
    assert(0);
    return 1;
}
int lua_protobuf_zippylog_protocol_BucketInfo_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfo");
    ::zippylog::protocol::BucketInfo *m = (::zippylog::protocol::BucketInfo *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_BucketInfo_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfo");
    ::zippylog::protocol::BucketInfo *m = (::zippylog::protocol::BucketInfo *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_BucketInfo_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfo");
    ::zippylog::protocol::BucketInfo *m = (::zippylog::protocol::BucketInfo *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_BucketInfo_clear_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfo");
    ::zippylog::protocol::BucketInfo *m = (::zippylog::protocol::BucketInfo *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_BucketInfo_get_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfo");
    ::zippylog::protocol::BucketInfo *m = (::zippylog::protocol::BucketInfo *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_BucketInfo_set_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfo");
    ::zippylog::protocol::BucketInfo *m = (::zippylog::protocol::BucketInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_BucketInfo_has_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfo");
    ::zippylog::protocol::BucketInfo *m = (::zippylog::protocol::BucketInfo *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

int lua_protobuf_zippylog_protocol_BucketInfo_clear_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfo");
    ::zippylog::protocol::BucketInfo *m = (::zippylog::protocol::BucketInfo *)mud->msg;
    m->clear_stream_set();
    return 0;
}

int lua_protobuf_zippylog_protocol_BucketInfo_get_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfo");
    ::zippylog::protocol::BucketInfo *m = (::zippylog::protocol::BucketInfo *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->stream_set_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->stream_set_size());
    }
    ::zippylog::protocol::StreamSetInfo * got_msg = m->mutable_stream_set(index-1);
    lua_protobuf_zippylog_protocol_StreamSetInfo_pushreference(L, got_msg, NULL, NULL);
    return 1;
}

int lua_protobuf_zippylog_protocol_BucketInfo_set_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfo");
    ::zippylog::protocol::BucketInfo *m = (::zippylog::protocol::BucketInfo *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    size_t current_size = m->stream_set_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    return luaL_error(L, "to manipulate embedded messages, fetch the embedded message and modify it");
    return 0;
}

int lua_protobuf_zippylog_protocol_BucketInfo_size_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfo");
    ::zippylog::protocol::BucketInfo *m = (::zippylog::protocol::BucketInfo *)mud->msg;
    int size = m->stream_set_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_protocol_BucketInfo_add_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.BucketInfo");
    ::zippylog::protocol::BucketInfo *m = (::zippylog::protocol::BucketInfo *)mud->msg;
    ::zippylog::protocol::StreamSetInfo *msg_new = m->add_stream_set();
    lua_protobuf_zippylog_protocol_StreamSetInfo_pushreference(L, msg_new, NULL, NULL);
    return 1;
}

static const struct luaL_Reg StoreInfo_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_StoreInfo_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_StoreInfo_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StoreInfo_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_StoreInfo_serialized},
    {"clear", lua_protobuf_zippylog_protocol_StoreInfo_clear},
    {"__gc", lua_protobuf_zippylog_protocol_StoreInfo_gc},
    {"clear_bucket", lua_protobuf_zippylog_protocol_StoreInfo_clear_bucket},
    {"get_bucket", lua_protobuf_zippylog_protocol_StoreInfo_get_bucket},
    {"set_bucket", lua_protobuf_zippylog_protocol_StoreInfo_set_bucket},
    {"size_bucket", lua_protobuf_zippylog_protocol_StoreInfo_size_bucket},
    {"add_bucket", lua_protobuf_zippylog_protocol_StoreInfo_add_bucket},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_StoreInfo_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.StoreInfo");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StoreInfo_methods);
    luaL_register(L, "protobuf.zippylog.protocol.StoreInfo", StoreInfo_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_StoreInfo_pushcopy(lua_State *L, const ::zippylog::protocol::StoreInfo &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreInfo(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreInfo");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_StoreInfo_pushreference(lua_State *L, ::zippylog::protocol::StoreInfo *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreInfo");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_StoreInfo_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreInfo();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreInfo");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreInfo_parsefromstring(lua_State *L)
{
    assert(0);
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreInfo_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreInfo");
    ::zippylog::protocol::StoreInfo *m = (::zippylog::protocol::StoreInfo *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreInfo_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreInfo");
    ::zippylog::protocol::StoreInfo *m = (::zippylog::protocol::StoreInfo *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreInfo_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreInfo");
    ::zippylog::protocol::StoreInfo *m = (::zippylog::protocol::StoreInfo *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreInfo_clear_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreInfo");
    ::zippylog::protocol::StoreInfo *m = (::zippylog::protocol::StoreInfo *)mud->msg;
    m->clear_bucket();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreInfo_get_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreInfo");
    ::zippylog::protocol::StoreInfo *m = (::zippylog::protocol::StoreInfo *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->bucket_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->bucket_size());
    }
    ::zippylog::protocol::BucketInfo * got_msg = m->mutable_bucket(index-1);
    lua_protobuf_zippylog_protocol_BucketInfo_pushreference(L, got_msg, NULL, NULL);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreInfo_set_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreInfo");
    ::zippylog::protocol::StoreInfo *m = (::zippylog::protocol::StoreInfo *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    size_t current_size = m->bucket_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    return luaL_error(L, "to manipulate embedded messages, fetch the embedded message and modify it");
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreInfo_size_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreInfo");
    ::zippylog::protocol::StoreInfo *m = (::zippylog::protocol::StoreInfo *)mud->msg;
    int size = m->bucket_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreInfo_add_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreInfo");
    ::zippylog::protocol::StoreInfo *m = (::zippylog::protocol::StoreInfo *)mud->msg;
    ::zippylog::protocol::BucketInfo *msg_new = m->add_bucket();
    lua_protobuf_zippylog_protocol_BucketInfo_pushreference(L, msg_new, NULL, NULL);
    return 1;
}

static const struct luaL_Reg StoreChangeStreamAdded_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StoreChangeStreamAdded_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_serialized},
    {"clear", lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_clear},
    {"__gc", lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_gc},
    {"clear_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_clear_bucket},
    {"get_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_get_bucket},
    {"set_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_set_bucket},
    {"has_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_has_bucket},
    {"clear_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_clear_stream_set},
    {"get_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_get_stream_set},
    {"set_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_set_stream_set},
    {"has_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_has_stream_set},
    {"clear_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_clear_stream},
    {"get_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_get_stream},
    {"set_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_set_stream},
    {"has_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_has_stream},
    {"clear_length", lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_clear_length},
    {"get_length", lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_get_length},
    {"set_length", lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_set_length},
    {"has_length", lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_has_length},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamAdded");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StoreChangeStreamAdded_methods);
    luaL_register(L, "protobuf.zippylog.protocol.StoreChangeStreamAdded", StoreChangeStreamAdded_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_pushcopy(lua_State *L, const ::zippylog::protocol::StoreChangeStreamAdded &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeStreamAdded(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamAdded");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_pushreference(lua_State *L, ::zippylog::protocol::StoreChangeStreamAdded *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamAdded");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeStreamAdded();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamAdded");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_parsefromstring(lua_State *L)
{
    assert(0);
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAdded");
    ::zippylog::protocol::StoreChangeStreamAdded *m = (::zippylog::protocol::StoreChangeStreamAdded *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAdded");
    ::zippylog::protocol::StoreChangeStreamAdded *m = (::zippylog::protocol::StoreChangeStreamAdded *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAdded");
    ::zippylog::protocol::StoreChangeStreamAdded *m = (::zippylog::protocol::StoreChangeStreamAdded *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_clear_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAdded");
    ::zippylog::protocol::StoreChangeStreamAdded *m = (::zippylog::protocol::StoreChangeStreamAdded *)mud->msg;
    m->clear_bucket();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_get_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAdded");
    ::zippylog::protocol::StoreChangeStreamAdded *m = (::zippylog::protocol::StoreChangeStreamAdded *)mud->msg;
    string s = m->bucket();
    m->has_bucket() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_set_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAdded");
    ::zippylog::protocol::StoreChangeStreamAdded *m = (::zippylog::protocol::StoreChangeStreamAdded *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_bucket();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_bucket(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_has_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAdded");
    ::zippylog::protocol::StoreChangeStreamAdded *m = (::zippylog::protocol::StoreChangeStreamAdded *)mud->msg;
    lua_pushboolean(L, m->has_bucket());
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_clear_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAdded");
    ::zippylog::protocol::StoreChangeStreamAdded *m = (::zippylog::protocol::StoreChangeStreamAdded *)mud->msg;
    m->clear_stream_set();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_get_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAdded");
    ::zippylog::protocol::StoreChangeStreamAdded *m = (::zippylog::protocol::StoreChangeStreamAdded *)mud->msg;
    string s = m->stream_set();
    m->has_stream_set() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_set_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAdded");
    ::zippylog::protocol::StoreChangeStreamAdded *m = (::zippylog::protocol::StoreChangeStreamAdded *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_stream_set();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_stream_set(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_has_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAdded");
    ::zippylog::protocol::StoreChangeStreamAdded *m = (::zippylog::protocol::StoreChangeStreamAdded *)mud->msg;
    lua_pushboolean(L, m->has_stream_set());
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_clear_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAdded");
    ::zippylog::protocol::StoreChangeStreamAdded *m = (::zippylog::protocol::StoreChangeStreamAdded *)mud->msg;
    m->clear_stream();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_get_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAdded");
    ::zippylog::protocol::StoreChangeStreamAdded *m = (::zippylog::protocol::StoreChangeStreamAdded *)mud->msg;
    string s = m->stream();
    m->has_stream() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_set_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAdded");
    ::zippylog::protocol::StoreChangeStreamAdded *m = (::zippylog::protocol::StoreChangeStreamAdded *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_stream();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_stream(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_has_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAdded");
    ::zippylog::protocol::StoreChangeStreamAdded *m = (::zippylog::protocol::StoreChangeStreamAdded *)mud->msg;
    lua_pushboolean(L, m->has_stream());
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_clear_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAdded");
    ::zippylog::protocol::StoreChangeStreamAdded *m = (::zippylog::protocol::StoreChangeStreamAdded *)mud->msg;
    m->clear_length();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_get_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAdded");
    ::zippylog::protocol::StoreChangeStreamAdded *m = (::zippylog::protocol::StoreChangeStreamAdded *)mud->msg;
    m->has_length() ? lua_pushinteger(L, m->length()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_set_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAdded");
    ::zippylog::protocol::StoreChangeStreamAdded *m = (::zippylog::protocol::StoreChangeStreamAdded *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_length();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_length(i);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAdded_has_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAdded");
    ::zippylog::protocol::StoreChangeStreamAdded *m = (::zippylog::protocol::StoreChangeStreamAdded *)mud->msg;
    lua_pushboolean(L, m->has_length());
    return 1;
}

static const struct luaL_Reg StoreChangeStreamDeleted_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StoreChangeStreamDeleted_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_serialized},
    {"clear", lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_clear},
    {"__gc", lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_gc},
    {"clear_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_clear_bucket},
    {"get_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_get_bucket},
    {"set_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_set_bucket},
    {"has_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_has_bucket},
    {"clear_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_clear_stream_set},
    {"get_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_get_stream_set},
    {"set_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_set_stream_set},
    {"has_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_has_stream_set},
    {"clear_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_clear_stream},
    {"get_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_get_stream},
    {"set_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_set_stream},
    {"has_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_has_stream},
    {"clear_length", lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_clear_length},
    {"get_length", lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_get_length},
    {"set_length", lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_set_length},
    {"has_length", lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_has_length},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamDeleted");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StoreChangeStreamDeleted_methods);
    luaL_register(L, "protobuf.zippylog.protocol.StoreChangeStreamDeleted", StoreChangeStreamDeleted_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_pushcopy(lua_State *L, const ::zippylog::protocol::StoreChangeStreamDeleted &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeStreamDeleted(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamDeleted");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_pushreference(lua_State *L, ::zippylog::protocol::StoreChangeStreamDeleted *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamDeleted");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeStreamDeleted();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamDeleted");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_parsefromstring(lua_State *L)
{
    assert(0);
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeleted");
    ::zippylog::protocol::StoreChangeStreamDeleted *m = (::zippylog::protocol::StoreChangeStreamDeleted *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeleted");
    ::zippylog::protocol::StoreChangeStreamDeleted *m = (::zippylog::protocol::StoreChangeStreamDeleted *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeleted");
    ::zippylog::protocol::StoreChangeStreamDeleted *m = (::zippylog::protocol::StoreChangeStreamDeleted *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_clear_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeleted");
    ::zippylog::protocol::StoreChangeStreamDeleted *m = (::zippylog::protocol::StoreChangeStreamDeleted *)mud->msg;
    m->clear_bucket();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_get_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeleted");
    ::zippylog::protocol::StoreChangeStreamDeleted *m = (::zippylog::protocol::StoreChangeStreamDeleted *)mud->msg;
    string s = m->bucket();
    m->has_bucket() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_set_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeleted");
    ::zippylog::protocol::StoreChangeStreamDeleted *m = (::zippylog::protocol::StoreChangeStreamDeleted *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_bucket();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_bucket(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_has_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeleted");
    ::zippylog::protocol::StoreChangeStreamDeleted *m = (::zippylog::protocol::StoreChangeStreamDeleted *)mud->msg;
    lua_pushboolean(L, m->has_bucket());
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_clear_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeleted");
    ::zippylog::protocol::StoreChangeStreamDeleted *m = (::zippylog::protocol::StoreChangeStreamDeleted *)mud->msg;
    m->clear_stream_set();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_get_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeleted");
    ::zippylog::protocol::StoreChangeStreamDeleted *m = (::zippylog::protocol::StoreChangeStreamDeleted *)mud->msg;
    string s = m->stream_set();
    m->has_stream_set() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_set_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeleted");
    ::zippylog::protocol::StoreChangeStreamDeleted *m = (::zippylog::protocol::StoreChangeStreamDeleted *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_stream_set();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_stream_set(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_has_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeleted");
    ::zippylog::protocol::StoreChangeStreamDeleted *m = (::zippylog::protocol::StoreChangeStreamDeleted *)mud->msg;
    lua_pushboolean(L, m->has_stream_set());
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_clear_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeleted");
    ::zippylog::protocol::StoreChangeStreamDeleted *m = (::zippylog::protocol::StoreChangeStreamDeleted *)mud->msg;
    m->clear_stream();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_get_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeleted");
    ::zippylog::protocol::StoreChangeStreamDeleted *m = (::zippylog::protocol::StoreChangeStreamDeleted *)mud->msg;
    string s = m->stream();
    m->has_stream() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_set_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeleted");
    ::zippylog::protocol::StoreChangeStreamDeleted *m = (::zippylog::protocol::StoreChangeStreamDeleted *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_stream();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_stream(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_has_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeleted");
    ::zippylog::protocol::StoreChangeStreamDeleted *m = (::zippylog::protocol::StoreChangeStreamDeleted *)mud->msg;
    lua_pushboolean(L, m->has_stream());
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_clear_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeleted");
    ::zippylog::protocol::StoreChangeStreamDeleted *m = (::zippylog::protocol::StoreChangeStreamDeleted *)mud->msg;
    m->clear_length();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_get_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeleted");
    ::zippylog::protocol::StoreChangeStreamDeleted *m = (::zippylog::protocol::StoreChangeStreamDeleted *)mud->msg;
    m->has_length() ? lua_pushinteger(L, m->length()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_set_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeleted");
    ::zippylog::protocol::StoreChangeStreamDeleted *m = (::zippylog::protocol::StoreChangeStreamDeleted *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_length();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_length(i);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamDeleted_has_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamDeleted");
    ::zippylog::protocol::StoreChangeStreamDeleted *m = (::zippylog::protocol::StoreChangeStreamDeleted *)mud->msg;
    lua_pushboolean(L, m->has_length());
    return 1;
}

static const struct luaL_Reg StoreChangeStreamAppended_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StoreChangeStreamAppended_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_serialized},
    {"clear", lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_clear},
    {"__gc", lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_gc},
    {"clear_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_clear_bucket},
    {"get_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_get_bucket},
    {"set_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_set_bucket},
    {"has_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_has_bucket},
    {"clear_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_clear_stream_set},
    {"get_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_get_stream_set},
    {"set_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_set_stream_set},
    {"has_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_has_stream_set},
    {"clear_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_clear_stream},
    {"get_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_get_stream},
    {"set_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_set_stream},
    {"has_stream", lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_has_stream},
    {"clear_length", lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_clear_length},
    {"get_length", lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_get_length},
    {"set_length", lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_set_length},
    {"has_length", lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_has_length},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamAppended");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StoreChangeStreamAppended_methods);
    luaL_register(L, "protobuf.zippylog.protocol.StoreChangeStreamAppended", StoreChangeStreamAppended_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_pushcopy(lua_State *L, const ::zippylog::protocol::StoreChangeStreamAppended &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeStreamAppended(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamAppended");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_pushreference(lua_State *L, ::zippylog::protocol::StoreChangeStreamAppended *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamAppended");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeStreamAppended();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamAppended");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_parsefromstring(lua_State *L)
{
    assert(0);
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppended");
    ::zippylog::protocol::StoreChangeStreamAppended *m = (::zippylog::protocol::StoreChangeStreamAppended *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppended");
    ::zippylog::protocol::StoreChangeStreamAppended *m = (::zippylog::protocol::StoreChangeStreamAppended *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppended");
    ::zippylog::protocol::StoreChangeStreamAppended *m = (::zippylog::protocol::StoreChangeStreamAppended *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_clear_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppended");
    ::zippylog::protocol::StoreChangeStreamAppended *m = (::zippylog::protocol::StoreChangeStreamAppended *)mud->msg;
    m->clear_bucket();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_get_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppended");
    ::zippylog::protocol::StoreChangeStreamAppended *m = (::zippylog::protocol::StoreChangeStreamAppended *)mud->msg;
    string s = m->bucket();
    m->has_bucket() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_set_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppended");
    ::zippylog::protocol::StoreChangeStreamAppended *m = (::zippylog::protocol::StoreChangeStreamAppended *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_bucket();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_bucket(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_has_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppended");
    ::zippylog::protocol::StoreChangeStreamAppended *m = (::zippylog::protocol::StoreChangeStreamAppended *)mud->msg;
    lua_pushboolean(L, m->has_bucket());
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_clear_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppended");
    ::zippylog::protocol::StoreChangeStreamAppended *m = (::zippylog::protocol::StoreChangeStreamAppended *)mud->msg;
    m->clear_stream_set();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_get_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppended");
    ::zippylog::protocol::StoreChangeStreamAppended *m = (::zippylog::protocol::StoreChangeStreamAppended *)mud->msg;
    string s = m->stream_set();
    m->has_stream_set() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_set_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppended");
    ::zippylog::protocol::StoreChangeStreamAppended *m = (::zippylog::protocol::StoreChangeStreamAppended *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_stream_set();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_stream_set(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_has_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppended");
    ::zippylog::protocol::StoreChangeStreamAppended *m = (::zippylog::protocol::StoreChangeStreamAppended *)mud->msg;
    lua_pushboolean(L, m->has_stream_set());
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_clear_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppended");
    ::zippylog::protocol::StoreChangeStreamAppended *m = (::zippylog::protocol::StoreChangeStreamAppended *)mud->msg;
    m->clear_stream();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_get_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppended");
    ::zippylog::protocol::StoreChangeStreamAppended *m = (::zippylog::protocol::StoreChangeStreamAppended *)mud->msg;
    string s = m->stream();
    m->has_stream() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_set_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppended");
    ::zippylog::protocol::StoreChangeStreamAppended *m = (::zippylog::protocol::StoreChangeStreamAppended *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_stream();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_stream(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_has_stream(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppended");
    ::zippylog::protocol::StoreChangeStreamAppended *m = (::zippylog::protocol::StoreChangeStreamAppended *)mud->msg;
    lua_pushboolean(L, m->has_stream());
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_clear_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppended");
    ::zippylog::protocol::StoreChangeStreamAppended *m = (::zippylog::protocol::StoreChangeStreamAppended *)mud->msg;
    m->clear_length();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_get_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppended");
    ::zippylog::protocol::StoreChangeStreamAppended *m = (::zippylog::protocol::StoreChangeStreamAppended *)mud->msg;
    m->has_length() ? lua_pushinteger(L, m->length()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_set_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppended");
    ::zippylog::protocol::StoreChangeStreamAppended *m = (::zippylog::protocol::StoreChangeStreamAppended *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_length();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_length(i);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamAppended_has_length(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamAppended");
    ::zippylog::protocol::StoreChangeStreamAppended *m = (::zippylog::protocol::StoreChangeStreamAppended *)mud->msg;
    lua_pushboolean(L, m->has_length());
    return 1;
}

static const struct luaL_Reg StoreChangeBucketAdded_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_StoreChangeBucketAdded_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_StoreChangeBucketAdded_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StoreChangeBucketAdded_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_StoreChangeBucketAdded_serialized},
    {"clear", lua_protobuf_zippylog_protocol_StoreChangeBucketAdded_clear},
    {"__gc", lua_protobuf_zippylog_protocol_StoreChangeBucketAdded_gc},
    {"clear_bucket", lua_protobuf_zippylog_protocol_StoreChangeBucketAdded_clear_bucket},
    {"get_bucket", lua_protobuf_zippylog_protocol_StoreChangeBucketAdded_get_bucket},
    {"set_bucket", lua_protobuf_zippylog_protocol_StoreChangeBucketAdded_set_bucket},
    {"has_bucket", lua_protobuf_zippylog_protocol_StoreChangeBucketAdded_has_bucket},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_StoreChangeBucketAdded_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.StoreChangeBucketAdded");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StoreChangeBucketAdded_methods);
    luaL_register(L, "protobuf.zippylog.protocol.StoreChangeBucketAdded", StoreChangeBucketAdded_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_StoreChangeBucketAdded_pushcopy(lua_State *L, const ::zippylog::protocol::StoreChangeBucketAdded &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeBucketAdded(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeBucketAdded");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_StoreChangeBucketAdded_pushreference(lua_State *L, ::zippylog::protocol::StoreChangeBucketAdded *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeBucketAdded");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_StoreChangeBucketAdded_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeBucketAdded();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeBucketAdded");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeBucketAdded_parsefromstring(lua_State *L)
{
    assert(0);
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeBucketAdded_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketAdded");
    ::zippylog::protocol::StoreChangeBucketAdded *m = (::zippylog::protocol::StoreChangeBucketAdded *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeBucketAdded_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketAdded");
    ::zippylog::protocol::StoreChangeBucketAdded *m = (::zippylog::protocol::StoreChangeBucketAdded *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeBucketAdded_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketAdded");
    ::zippylog::protocol::StoreChangeBucketAdded *m = (::zippylog::protocol::StoreChangeBucketAdded *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeBucketAdded_clear_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketAdded");
    ::zippylog::protocol::StoreChangeBucketAdded *m = (::zippylog::protocol::StoreChangeBucketAdded *)mud->msg;
    m->clear_bucket();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeBucketAdded_get_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketAdded");
    ::zippylog::protocol::StoreChangeBucketAdded *m = (::zippylog::protocol::StoreChangeBucketAdded *)mud->msg;
    string s = m->bucket();
    m->has_bucket() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeBucketAdded_set_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketAdded");
    ::zippylog::protocol::StoreChangeBucketAdded *m = (::zippylog::protocol::StoreChangeBucketAdded *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_bucket();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_bucket(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeBucketAdded_has_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketAdded");
    ::zippylog::protocol::StoreChangeBucketAdded *m = (::zippylog::protocol::StoreChangeBucketAdded *)mud->msg;
    lua_pushboolean(L, m->has_bucket());
    return 1;
}

static const struct luaL_Reg StoreChangeBucketDeleted_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_StoreChangeBucketDeleted_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_StoreChangeBucketDeleted_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StoreChangeBucketDeleted_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_StoreChangeBucketDeleted_serialized},
    {"clear", lua_protobuf_zippylog_protocol_StoreChangeBucketDeleted_clear},
    {"__gc", lua_protobuf_zippylog_protocol_StoreChangeBucketDeleted_gc},
    {"clear_bucket", lua_protobuf_zippylog_protocol_StoreChangeBucketDeleted_clear_bucket},
    {"get_bucket", lua_protobuf_zippylog_protocol_StoreChangeBucketDeleted_get_bucket},
    {"set_bucket", lua_protobuf_zippylog_protocol_StoreChangeBucketDeleted_set_bucket},
    {"has_bucket", lua_protobuf_zippylog_protocol_StoreChangeBucketDeleted_has_bucket},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_StoreChangeBucketDeleted_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.StoreChangeBucketDeleted");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StoreChangeBucketDeleted_methods);
    luaL_register(L, "protobuf.zippylog.protocol.StoreChangeBucketDeleted", StoreChangeBucketDeleted_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_StoreChangeBucketDeleted_pushcopy(lua_State *L, const ::zippylog::protocol::StoreChangeBucketDeleted &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeBucketDeleted(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeBucketDeleted");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_StoreChangeBucketDeleted_pushreference(lua_State *L, ::zippylog::protocol::StoreChangeBucketDeleted *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeBucketDeleted");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_StoreChangeBucketDeleted_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeBucketDeleted();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeBucketDeleted");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeBucketDeleted_parsefromstring(lua_State *L)
{
    assert(0);
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeBucketDeleted_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketDeleted");
    ::zippylog::protocol::StoreChangeBucketDeleted *m = (::zippylog::protocol::StoreChangeBucketDeleted *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeBucketDeleted_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketDeleted");
    ::zippylog::protocol::StoreChangeBucketDeleted *m = (::zippylog::protocol::StoreChangeBucketDeleted *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeBucketDeleted_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketDeleted");
    ::zippylog::protocol::StoreChangeBucketDeleted *m = (::zippylog::protocol::StoreChangeBucketDeleted *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeBucketDeleted_clear_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketDeleted");
    ::zippylog::protocol::StoreChangeBucketDeleted *m = (::zippylog::protocol::StoreChangeBucketDeleted *)mud->msg;
    m->clear_bucket();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeBucketDeleted_get_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketDeleted");
    ::zippylog::protocol::StoreChangeBucketDeleted *m = (::zippylog::protocol::StoreChangeBucketDeleted *)mud->msg;
    string s = m->bucket();
    m->has_bucket() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeBucketDeleted_set_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketDeleted");
    ::zippylog::protocol::StoreChangeBucketDeleted *m = (::zippylog::protocol::StoreChangeBucketDeleted *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_bucket();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_bucket(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeBucketDeleted_has_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeBucketDeleted");
    ::zippylog::protocol::StoreChangeBucketDeleted *m = (::zippylog::protocol::StoreChangeBucketDeleted *)mud->msg;
    lua_pushboolean(L, m->has_bucket());
    return 1;
}

static const struct luaL_Reg StoreChangeStreamSetAdded_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StoreChangeStreamSetAdded_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_serialized},
    {"clear", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_clear},
    {"__gc", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_gc},
    {"clear_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_clear_bucket},
    {"get_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_get_bucket},
    {"set_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_set_bucket},
    {"has_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_has_bucket},
    {"clear_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_clear_stream_set},
    {"get_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_get_stream_set},
    {"set_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_set_stream_set},
    {"has_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_has_stream_set},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamSetAdded");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StoreChangeStreamSetAdded_methods);
    luaL_register(L, "protobuf.zippylog.protocol.StoreChangeStreamSetAdded", StoreChangeStreamSetAdded_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_pushcopy(lua_State *L, const ::zippylog::protocol::StoreChangeStreamSetAdded &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeStreamSetAdded(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamSetAdded");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_pushreference(lua_State *L, ::zippylog::protocol::StoreChangeStreamSetAdded *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamSetAdded");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeStreamSetAdded();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamSetAdded");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_parsefromstring(lua_State *L)
{
    assert(0);
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetAdded");
    ::zippylog::protocol::StoreChangeStreamSetAdded *m = (::zippylog::protocol::StoreChangeStreamSetAdded *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetAdded");
    ::zippylog::protocol::StoreChangeStreamSetAdded *m = (::zippylog::protocol::StoreChangeStreamSetAdded *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetAdded");
    ::zippylog::protocol::StoreChangeStreamSetAdded *m = (::zippylog::protocol::StoreChangeStreamSetAdded *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_clear_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetAdded");
    ::zippylog::protocol::StoreChangeStreamSetAdded *m = (::zippylog::protocol::StoreChangeStreamSetAdded *)mud->msg;
    m->clear_bucket();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_get_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetAdded");
    ::zippylog::protocol::StoreChangeStreamSetAdded *m = (::zippylog::protocol::StoreChangeStreamSetAdded *)mud->msg;
    string s = m->bucket();
    m->has_bucket() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_set_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetAdded");
    ::zippylog::protocol::StoreChangeStreamSetAdded *m = (::zippylog::protocol::StoreChangeStreamSetAdded *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_bucket();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_bucket(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_has_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetAdded");
    ::zippylog::protocol::StoreChangeStreamSetAdded *m = (::zippylog::protocol::StoreChangeStreamSetAdded *)mud->msg;
    lua_pushboolean(L, m->has_bucket());
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_clear_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetAdded");
    ::zippylog::protocol::StoreChangeStreamSetAdded *m = (::zippylog::protocol::StoreChangeStreamSetAdded *)mud->msg;
    m->clear_stream_set();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_get_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetAdded");
    ::zippylog::protocol::StoreChangeStreamSetAdded *m = (::zippylog::protocol::StoreChangeStreamSetAdded *)mud->msg;
    string s = m->stream_set();
    m->has_stream_set() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_set_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetAdded");
    ::zippylog::protocol::StoreChangeStreamSetAdded *m = (::zippylog::protocol::StoreChangeStreamSetAdded *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_stream_set();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_stream_set(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetAdded_has_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetAdded");
    ::zippylog::protocol::StoreChangeStreamSetAdded *m = (::zippylog::protocol::StoreChangeStreamSetAdded *)mud->msg;
    lua_pushboolean(L, m->has_stream_set());
    return 1;
}

static const struct luaL_Reg StoreChangeStreamSetDeleted_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StoreChangeStreamSetDeleted_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_serialized},
    {"clear", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_clear},
    {"__gc", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_gc},
    {"clear_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_clear_bucket},
    {"get_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_get_bucket},
    {"set_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_set_bucket},
    {"has_bucket", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_has_bucket},
    {"clear_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_clear_stream_set},
    {"get_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_get_stream_set},
    {"set_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_set_stream_set},
    {"has_stream_set", lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_has_stream_set},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeleted");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StoreChangeStreamSetDeleted_methods);
    luaL_register(L, "protobuf.zippylog.protocol.StoreChangeStreamSetDeleted", StoreChangeStreamSetDeleted_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_pushcopy(lua_State *L, const ::zippylog::protocol::StoreChangeStreamSetDeleted &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeStreamSetDeleted(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeleted");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_pushreference(lua_State *L, ::zippylog::protocol::StoreChangeStreamSetDeleted *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeleted");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::StoreChangeStreamSetDeleted();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeleted");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_parsefromstring(lua_State *L)
{
    assert(0);
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeleted");
    ::zippylog::protocol::StoreChangeStreamSetDeleted *m = (::zippylog::protocol::StoreChangeStreamSetDeleted *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeleted");
    ::zippylog::protocol::StoreChangeStreamSetDeleted *m = (::zippylog::protocol::StoreChangeStreamSetDeleted *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeleted");
    ::zippylog::protocol::StoreChangeStreamSetDeleted *m = (::zippylog::protocol::StoreChangeStreamSetDeleted *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_clear_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeleted");
    ::zippylog::protocol::StoreChangeStreamSetDeleted *m = (::zippylog::protocol::StoreChangeStreamSetDeleted *)mud->msg;
    m->clear_bucket();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_get_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeleted");
    ::zippylog::protocol::StoreChangeStreamSetDeleted *m = (::zippylog::protocol::StoreChangeStreamSetDeleted *)mud->msg;
    string s = m->bucket();
    m->has_bucket() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_set_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeleted");
    ::zippylog::protocol::StoreChangeStreamSetDeleted *m = (::zippylog::protocol::StoreChangeStreamSetDeleted *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_bucket();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_bucket(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_has_bucket(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeleted");
    ::zippylog::protocol::StoreChangeStreamSetDeleted *m = (::zippylog::protocol::StoreChangeStreamSetDeleted *)mud->msg;
    lua_pushboolean(L, m->has_bucket());
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_clear_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeleted");
    ::zippylog::protocol::StoreChangeStreamSetDeleted *m = (::zippylog::protocol::StoreChangeStreamSetDeleted *)mud->msg;
    m->clear_stream_set();
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_get_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeleted");
    ::zippylog::protocol::StoreChangeStreamSetDeleted *m = (::zippylog::protocol::StoreChangeStreamSetDeleted *)mud->msg;
    string s = m->stream_set();
    m->has_stream_set() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_set_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeleted");
    ::zippylog::protocol::StoreChangeStreamSetDeleted *m = (::zippylog::protocol::StoreChangeStreamSetDeleted *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_stream_set();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_stream_set(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_StoreChangeStreamSetDeleted_has_stream_set(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.StoreChangeStreamSetDeleted");
    ::zippylog::protocol::StoreChangeStreamSetDeleted *m = (::zippylog::protocol::StoreChangeStreamSetDeleted *)mud->msg;
    lua_pushboolean(L, m->has_stream_set());
    return 1;
}
