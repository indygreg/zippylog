// Generated by the lua-protobuf compiler.
// You shouldn't be editing this file manually
//
// source proto file: zippylog/message.proto

#ifndef LUA_PROTOBUF_zippylog_message_H
#define LUA_PROTOBUF_zippylog_message_H

#include "lua-protobuf.h"
#include <zippylog/message.pb.h>

#ifdef __cplusplus
extern "C" {
#endif

#include <lua.h>

// register all messages in this package to a Lua state
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_open(lua_State *L);

// Message Envelope
// registers the message type with Lua
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_open(lua_State *L);


// push a copy of the message to the Lua stack
// caller is free to use original message however she wants, but changes will not
// be reflected in Lua and vice-verse
LUA_PROTOBUF_EXPORT bool lua_protobuf_zippylog_message_Envelope_pushcopy(lua_State *L, const ::zippylog::message::Envelope &msg);

// push a reference of the message to the Lua stack
// the 3rd and 4th arguments define a callback that can be invoked just before Lua
// garbage collects the message. If the 3rd argument is NULL, Lua will *NOT* free
// memory. If the second argument points to a function, that function is called when
// Lua garbage collects the object. The function is sent a pointer to the message being
// collected and the 4th argument to this function. If the function returns true,
// Lua will free the memory. If false (0), Lua will not free the memory.
LUA_PROTOBUF_EXPORT bool lua_protobuf_zippylog_message_Envelope_pushreference(lua_State *L, ::zippylog::message::Envelope *msg, lua_protobuf_gc_callback callback, void *data);


// The following functions are called by Lua. Many people will not need them,
// but they are exported for those that do.


// constructor called from Lua
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_new(lua_State *L);

// obtain instance from a serialized string
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_parsefromstring(lua_State *L);

// garbage collects message instance in Lua
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_gc(lua_State *L);

// obtain serialized representation of instance
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_serialized(lua_State *L);

// clear all fields in the message
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_clear(lua_State *L);

// optional uint32 version = 1
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_clear_version(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_get_version(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_set_version(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_has_version(lua_State *L);

// repeated bytes message = 2
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_clear_message(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_get_message(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_set_message(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_size_message(lua_State *L);

// repeated uint32 message_namespace = 3
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_clear_message_namespace(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_get_message_namespace(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_set_message_namespace(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_size_message_namespace(lua_State *L);

// repeated uint32 message_type = 4
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_clear_message_type(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_get_message_type(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_set_message_type(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_size_message_type(lua_State *L);

// optional uint64 create_time = 5
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_clear_create_time(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_get_create_time(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_set_create_time(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_has_create_time(lua_State *L);

// repeated bytes tag = 6
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_clear_tag(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_get_tag(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_set_tag(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_size_tag(lua_State *L);

// repeated message actor = 7
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_clear_actor(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_get_actor(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_set_actor(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_size_actor(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_add_actor(lua_State *L);

// optional uint64 numeric_value = 8
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_clear_numeric_value(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_get_numeric_value(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_set_numeric_value(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_has_numeric_value(lua_State *L);

// optional string string_value = 9
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_clear_string_value(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_get_string_value(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_set_string_value(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_Envelope_has_string_value(lua_State *L);

// end of message Envelope

// Message ActorInfo
// registers the message type with Lua
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_open(lua_State *L);


// push a copy of the message to the Lua stack
// caller is free to use original message however she wants, but changes will not
// be reflected in Lua and vice-verse
LUA_PROTOBUF_EXPORT bool lua_protobuf_zippylog_message_ActorInfo_pushcopy(lua_State *L, const ::zippylog::message::ActorInfo &msg);

// push a reference of the message to the Lua stack
// the 3rd and 4th arguments define a callback that can be invoked just before Lua
// garbage collects the message. If the 3rd argument is NULL, Lua will *NOT* free
// memory. If the second argument points to a function, that function is called when
// Lua garbage collects the object. The function is sent a pointer to the message being
// collected and the 4th argument to this function. If the function returns true,
// Lua will free the memory. If false (0), Lua will not free the memory.
LUA_PROTOBUF_EXPORT bool lua_protobuf_zippylog_message_ActorInfo_pushreference(lua_State *L, ::zippylog::message::ActorInfo *msg, lua_protobuf_gc_callback callback, void *data);


// The following functions are called by Lua. Many people will not need them,
// but they are exported for those that do.


// constructor called from Lua
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_new(lua_State *L);

// obtain instance from a serialized string
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_parsefromstring(lua_State *L);

// garbage collects message instance in Lua
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_gc(lua_State *L);

// obtain serialized representation of instance
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_serialized(lua_State *L);

// clear all fields in the message
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_clear(lua_State *L);

// optional uint64 touch_time = 1
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_clear_touch_time(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_get_touch_time(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_set_touch_time(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_has_touch_time(lua_State *L);

// optional uint64 sequence_id = 2
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_clear_sequence_id(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_get_sequence_id(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_set_sequence_id(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_has_sequence_id(lua_State *L);

// optional string hostname = 3
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_clear_hostname(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_get_hostname(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_set_hostname(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_has_hostname(lua_State *L);

// optional bytes host_id = 4
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_clear_host_id(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_get_host_id(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_set_host_id(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_has_host_id(lua_State *L);

// optional bytes actor_id = 5
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_clear_actor_id(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_get_actor_id(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_set_actor_id(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_has_actor_id(lua_State *L);

// optional bytes app_id = 6
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_clear_app_id(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_get_app_id(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_set_app_id(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_message_ActorInfo_has_app_id(lua_State *L);

// end of message ActorInfo

#ifdef __cplusplus
}
#endif

#endif