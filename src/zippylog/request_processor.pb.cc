// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zippylog/request_processor.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zippylog {
namespace request_processor {

namespace {

const ::google::protobuf::Descriptor* Create_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Create_reflection_ = NULL;
const ::google::protobuf::Descriptor* Destroy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Destroy_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* FailReceiveMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FailReceiveMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiveEmptyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiveEmptyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnknownMessageVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnknownMessageVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnknownRequestType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnknownRequestType_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnvelopeParseFailure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnvelopeParseFailure_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmptyEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmptyEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvalidMessageEnumeration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvalidMessageEnumeration_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeginProcessStoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeginProcessStoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EndProcessStoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndProcessStoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiveInvalidGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiveInvalidGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInvalidStream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInvalidStream_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInvalidOffset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInvalidOffset_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeginProcessGetStream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeginProcessGetStream_reflection_ = NULL;
const ::google::protobuf::Descriptor* EndProcessGetStream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndProcessGetStream_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendErrorResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendErrorResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardSubscribeKeepalive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardSubscribeKeepalive_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeginProcessBucketInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeginProcessBucketInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EndProcessBucketInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndProcessBucketInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeginProcessStreamSetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeginProcessStreamSetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EndProcessStreamSetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndProcessStreamSetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeginProcessStreamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeginProcessStreamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EndProcessStreamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndProcessStreamInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_zippylog_2frequest_5fprocessor_2eproto() {
  protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zippylog/request_processor.proto");
  GOOGLE_CHECK(file != NULL);
  Create_descriptor_ = file->message_type(0);
  static const int Create_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Create, id_),
  };
  Create_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Create_descriptor_,
      Create::default_instance_,
      Create_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Create, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Create, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Create));
  Destroy_descriptor_ = file->message_type(1);
  static const int Destroy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destroy, id_),
  };
  Destroy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Destroy_descriptor_,
      Destroy::default_instance_,
      Destroy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destroy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destroy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Destroy));
  RunStart_descriptor_ = file->message_type(2);
  static const int RunStart_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStart, id_),
  };
  RunStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunStart_descriptor_,
      RunStart::default_instance_,
      RunStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunStart));
  RunStop_descriptor_ = file->message_type(3);
  static const int RunStop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStop, id_),
  };
  RunStop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunStop_descriptor_,
      RunStop::default_instance_,
      RunStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunStop));
  FailReceiveMessage_descriptor_ = file->message_type(4);
  static const int FailReceiveMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailReceiveMessage, id_),
  };
  FailReceiveMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FailReceiveMessage_descriptor_,
      FailReceiveMessage::default_instance_,
      FailReceiveMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailReceiveMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailReceiveMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FailReceiveMessage));
  ReceiveEmptyMessage_descriptor_ = file->message_type(5);
  static const int ReceiveEmptyMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveEmptyMessage, id_),
  };
  ReceiveEmptyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiveEmptyMessage_descriptor_,
      ReceiveEmptyMessage::default_instance_,
      ReceiveEmptyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveEmptyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveEmptyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiveEmptyMessage));
  UnknownMessageVersion_descriptor_ = file->message_type(6);
  static const int UnknownMessageVersion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnknownMessageVersion, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnknownMessageVersion, version_),
  };
  UnknownMessageVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnknownMessageVersion_descriptor_,
      UnknownMessageVersion::default_instance_,
      UnknownMessageVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnknownMessageVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnknownMessageVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnknownMessageVersion));
  UnknownRequestType_descriptor_ = file->message_type(7);
  static const int UnknownRequestType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnknownRequestType, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnknownRequestType, enumeration_),
  };
  UnknownRequestType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnknownRequestType_descriptor_,
      UnknownRequestType::default_instance_,
      UnknownRequestType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnknownRequestType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnknownRequestType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnknownRequestType));
  EnvelopeParseFailure_descriptor_ = file->message_type(8);
  static const int EnvelopeParseFailure_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvelopeParseFailure, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvelopeParseFailure, data_),
  };
  EnvelopeParseFailure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnvelopeParseFailure_descriptor_,
      EnvelopeParseFailure::default_instance_,
      EnvelopeParseFailure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvelopeParseFailure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvelopeParseFailure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnvelopeParseFailure));
  EmptyEnvelope_descriptor_ = file->message_type(9);
  static const int EmptyEnvelope_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyEnvelope, id_),
  };
  EmptyEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmptyEnvelope_descriptor_,
      EmptyEnvelope::default_instance_,
      EmptyEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmptyEnvelope));
  InvalidMessageEnumeration_descriptor_ = file->message_type(10);
  static const int InvalidMessageEnumeration_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidMessageEnumeration, id_),
  };
  InvalidMessageEnumeration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvalidMessageEnumeration_descriptor_,
      InvalidMessageEnumeration::default_instance_,
      InvalidMessageEnumeration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidMessageEnumeration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidMessageEnumeration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvalidMessageEnumeration));
  BeginProcessStoreInfo_descriptor_ = file->message_type(11);
  static const int BeginProcessStoreInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginProcessStoreInfo, id_),
  };
  BeginProcessStoreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeginProcessStoreInfo_descriptor_,
      BeginProcessStoreInfo::default_instance_,
      BeginProcessStoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginProcessStoreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginProcessStoreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeginProcessStoreInfo));
  EndProcessStoreInfo_descriptor_ = file->message_type(12);
  static const int EndProcessStoreInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndProcessStoreInfo, id_),
  };
  EndProcessStoreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EndProcessStoreInfo_descriptor_,
      EndProcessStoreInfo::default_instance_,
      EndProcessStoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndProcessStoreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndProcessStoreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EndProcessStoreInfo));
  ReceiveInvalidGet_descriptor_ = file->message_type(13);
  static const int ReceiveInvalidGet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveInvalidGet, id_),
  };
  ReceiveInvalidGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiveInvalidGet_descriptor_,
      ReceiveInvalidGet::default_instance_,
      ReceiveInvalidGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveInvalidGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveInvalidGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiveInvalidGet));
  GetInvalidStream_descriptor_ = file->message_type(14);
  static const int GetInvalidStream_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInvalidStream, id_),
  };
  GetInvalidStream_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInvalidStream_descriptor_,
      GetInvalidStream::default_instance_,
      GetInvalidStream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInvalidStream, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInvalidStream, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInvalidStream));
  GetInvalidOffset_descriptor_ = file->message_type(15);
  static const int GetInvalidOffset_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInvalidOffset, id_),
  };
  GetInvalidOffset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInvalidOffset_descriptor_,
      GetInvalidOffset::default_instance_,
      GetInvalidOffset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInvalidOffset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInvalidOffset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInvalidOffset));
  BeginProcessGetStream_descriptor_ = file->message_type(16);
  static const int BeginProcessGetStream_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginProcessGetStream, id_),
  };
  BeginProcessGetStream_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeginProcessGetStream_descriptor_,
      BeginProcessGetStream::default_instance_,
      BeginProcessGetStream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginProcessGetStream, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginProcessGetStream, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeginProcessGetStream));
  EndProcessGetStream_descriptor_ = file->message_type(17);
  static const int EndProcessGetStream_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndProcessGetStream, id_),
  };
  EndProcessGetStream_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EndProcessGetStream_descriptor_,
      EndProcessGetStream::default_instance_,
      EndProcessGetStream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndProcessGetStream, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndProcessGetStream, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EndProcessGetStream));
  SendErrorResponse_descriptor_ = file->message_type(18);
  static const int SendErrorResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendErrorResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendErrorResponse, message_),
  };
  SendErrorResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendErrorResponse_descriptor_,
      SendErrorResponse::default_instance_,
      SendErrorResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendErrorResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendErrorResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendErrorResponse));
  ForwardSubscribeKeepalive_descriptor_ = file->message_type(19);
  static const int ForwardSubscribeKeepalive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardSubscribeKeepalive, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardSubscribeKeepalive, subscription_),
  };
  ForwardSubscribeKeepalive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardSubscribeKeepalive_descriptor_,
      ForwardSubscribeKeepalive::default_instance_,
      ForwardSubscribeKeepalive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardSubscribeKeepalive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardSubscribeKeepalive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardSubscribeKeepalive));
  BeginProcessBucketInfo_descriptor_ = file->message_type(20);
  static const int BeginProcessBucketInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginProcessBucketInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginProcessBucketInfo, path_),
  };
  BeginProcessBucketInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeginProcessBucketInfo_descriptor_,
      BeginProcessBucketInfo::default_instance_,
      BeginProcessBucketInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginProcessBucketInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginProcessBucketInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeginProcessBucketInfo));
  EndProcessBucketInfo_descriptor_ = file->message_type(21);
  static const int EndProcessBucketInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndProcessBucketInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndProcessBucketInfo, path_),
  };
  EndProcessBucketInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EndProcessBucketInfo_descriptor_,
      EndProcessBucketInfo::default_instance_,
      EndProcessBucketInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndProcessBucketInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndProcessBucketInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EndProcessBucketInfo));
  BeginProcessStreamSetInfo_descriptor_ = file->message_type(22);
  static const int BeginProcessStreamSetInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginProcessStreamSetInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginProcessStreamSetInfo, path_),
  };
  BeginProcessStreamSetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeginProcessStreamSetInfo_descriptor_,
      BeginProcessStreamSetInfo::default_instance_,
      BeginProcessStreamSetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginProcessStreamSetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginProcessStreamSetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeginProcessStreamSetInfo));
  EndProcessStreamSetInfo_descriptor_ = file->message_type(23);
  static const int EndProcessStreamSetInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndProcessStreamSetInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndProcessStreamSetInfo, path_),
  };
  EndProcessStreamSetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EndProcessStreamSetInfo_descriptor_,
      EndProcessStreamSetInfo::default_instance_,
      EndProcessStreamSetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndProcessStreamSetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndProcessStreamSetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EndProcessStreamSetInfo));
  BeginProcessStreamInfo_descriptor_ = file->message_type(24);
  static const int BeginProcessStreamInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginProcessStreamInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginProcessStreamInfo, path_),
  };
  BeginProcessStreamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeginProcessStreamInfo_descriptor_,
      BeginProcessStreamInfo::default_instance_,
      BeginProcessStreamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginProcessStreamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginProcessStreamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeginProcessStreamInfo));
  EndProcessStreamInfo_descriptor_ = file->message_type(25);
  static const int EndProcessStreamInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndProcessStreamInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndProcessStreamInfo, path_),
  };
  EndProcessStreamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EndProcessStreamInfo_descriptor_,
      EndProcessStreamInfo::default_instance_,
      EndProcessStreamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndProcessStreamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndProcessStreamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EndProcessStreamInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zippylog_2frequest_5fprocessor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Create_descriptor_, &Create::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Destroy_descriptor_, &Destroy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunStart_descriptor_, &RunStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunStop_descriptor_, &RunStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FailReceiveMessage_descriptor_, &FailReceiveMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiveEmptyMessage_descriptor_, &ReceiveEmptyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnknownMessageVersion_descriptor_, &UnknownMessageVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnknownRequestType_descriptor_, &UnknownRequestType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnvelopeParseFailure_descriptor_, &EnvelopeParseFailure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmptyEnvelope_descriptor_, &EmptyEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvalidMessageEnumeration_descriptor_, &InvalidMessageEnumeration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeginProcessStoreInfo_descriptor_, &BeginProcessStoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EndProcessStoreInfo_descriptor_, &EndProcessStoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiveInvalidGet_descriptor_, &ReceiveInvalidGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInvalidStream_descriptor_, &GetInvalidStream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInvalidOffset_descriptor_, &GetInvalidOffset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeginProcessGetStream_descriptor_, &BeginProcessGetStream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EndProcessGetStream_descriptor_, &EndProcessGetStream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendErrorResponse_descriptor_, &SendErrorResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardSubscribeKeepalive_descriptor_, &ForwardSubscribeKeepalive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeginProcessBucketInfo_descriptor_, &BeginProcessBucketInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EndProcessBucketInfo_descriptor_, &EndProcessBucketInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeginProcessStreamSetInfo_descriptor_, &BeginProcessStreamSetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EndProcessStreamSetInfo_descriptor_, &EndProcessStreamSetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeginProcessStreamInfo_descriptor_, &BeginProcessStreamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EndProcessStreamInfo_descriptor_, &EndProcessStreamInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zippylog_2frequest_5fprocessor_2eproto() {
  delete Create::default_instance_;
  delete Create_reflection_;
  delete Destroy::default_instance_;
  delete Destroy_reflection_;
  delete RunStart::default_instance_;
  delete RunStart_reflection_;
  delete RunStop::default_instance_;
  delete RunStop_reflection_;
  delete FailReceiveMessage::default_instance_;
  delete FailReceiveMessage_reflection_;
  delete ReceiveEmptyMessage::default_instance_;
  delete ReceiveEmptyMessage_reflection_;
  delete UnknownMessageVersion::default_instance_;
  delete UnknownMessageVersion_reflection_;
  delete UnknownRequestType::default_instance_;
  delete UnknownRequestType_reflection_;
  delete EnvelopeParseFailure::default_instance_;
  delete EnvelopeParseFailure_reflection_;
  delete EmptyEnvelope::default_instance_;
  delete EmptyEnvelope_reflection_;
  delete InvalidMessageEnumeration::default_instance_;
  delete InvalidMessageEnumeration_reflection_;
  delete BeginProcessStoreInfo::default_instance_;
  delete BeginProcessStoreInfo_reflection_;
  delete EndProcessStoreInfo::default_instance_;
  delete EndProcessStoreInfo_reflection_;
  delete ReceiveInvalidGet::default_instance_;
  delete ReceiveInvalidGet_reflection_;
  delete GetInvalidStream::default_instance_;
  delete GetInvalidStream_reflection_;
  delete GetInvalidOffset::default_instance_;
  delete GetInvalidOffset_reflection_;
  delete BeginProcessGetStream::default_instance_;
  delete BeginProcessGetStream_reflection_;
  delete EndProcessGetStream::default_instance_;
  delete EndProcessGetStream_reflection_;
  delete SendErrorResponse::default_instance_;
  delete SendErrorResponse_reflection_;
  delete ForwardSubscribeKeepalive::default_instance_;
  delete ForwardSubscribeKeepalive_reflection_;
  delete BeginProcessBucketInfo::default_instance_;
  delete BeginProcessBucketInfo_reflection_;
  delete EndProcessBucketInfo::default_instance_;
  delete EndProcessBucketInfo_reflection_;
  delete BeginProcessStreamSetInfo::default_instance_;
  delete BeginProcessStreamSetInfo_reflection_;
  delete EndProcessStreamSetInfo::default_instance_;
  delete EndProcessStreamSetInfo_reflection_;
  delete BeginProcessStreamInfo::default_instance_;
  delete BeginProcessStreamInfo_reflection_;
  delete EndProcessStreamInfo::default_instance_;
  delete EndProcessStreamInfo_reflection_;
}

void protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n zippylog/request_processor.proto\022\032zipp"
    "ylog.request_processor\"\024\n\006Create\022\n\n\002id\030\001"
    " \001(\014\"\025\n\007Destroy\022\n\n\002id\030\001 \001(\014\"\026\n\010RunStart\022"
    "\n\n\002id\030\001 \001(\014\"\025\n\007RunStop\022\n\n\002id\030\002 \001(\014\" \n\022Fa"
    "ilReceiveMessage\022\n\n\002id\030\001 \001(\014\"!\n\023ReceiveE"
    "mptyMessage\022\n\n\002id\030\001 \001(\014\"4\n\025UnknownMessag"
    "eVersion\022\n\n\002id\030\001 \001(\014\022\017\n\007version\030\002 \001(\r\"5\n"
    "\022UnknownRequestType\022\n\n\002id\030\001 \001(\014\022\023\n\013enume"
    "ration\030\002 \001(\r\"0\n\024EnvelopeParseFailure\022\n\n\002"
    "id\030\001 \001(\014\022\014\n\004data\030\002 \001(\014\"\033\n\rEmptyEnvelope\022"
    "\n\n\002id\030\001 \001(\014\"\'\n\031InvalidMessageEnumeration"
    "\022\n\n\002id\030\001 \001(\014\"#\n\025BeginProcessStoreInfo\022\n\n"
    "\002id\030\001 \001(\014\"!\n\023EndProcessStoreInfo\022\n\n\002id\030\001"
    " \001(\014\"\037\n\021ReceiveInvalidGet\022\n\n\002id\030\001 \001(\014\"\036\n"
    "\020GetInvalidStream\022\n\n\002id\030\001 \001(\014\"\036\n\020GetInva"
    "lidOffset\022\n\n\002id\030\001 \001(\014\"#\n\025BeginProcessGet"
    "Stream\022\n\n\002id\030\001 \001(\014\"!\n\023EndProcessGetStrea"
    "m\022\n\n\002id\030\001 \001(\014\"0\n\021SendErrorResponse\022\n\n\002id"
    "\030\001 \001(\014\022\017\n\007message\030\002 \001(\t\"=\n\031ForwardSubscr"
    "ibeKeepalive\022\n\n\002id\030\001 \001(\014\022\024\n\014subscription"
    "\030\002 \001(\014\"2\n\026BeginProcessBucketInfo\022\n\n\002id\030\001"
    " \001(\014\022\014\n\004path\030\002 \001(\t\"0\n\024EndProcessBucketIn"
    "fo\022\n\n\002id\030\001 \001(\014\022\014\n\004path\030\002 \001(\t\"5\n\031BeginPro"
    "cessStreamSetInfo\022\n\n\002id\030\001 \001(\014\022\014\n\004path\030\002 "
    "\001(\t\"3\n\027EndProcessStreamSetInfo\022\n\n\002id\030\001 \001"
    "(\014\022\014\n\004path\030\002 \001(\t\"2\n\026BeginProcessStreamIn"
    "fo\022\n\n\002id\030\001 \001(\014\022\014\n\004path\030\002 \001(\t\"0\n\024EndProce"
    "ssStreamInfo\022\n\n\002id\030\001 \001(\014\022\014\n\004path\030\002 \001(\t", 1118);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zippylog/request_processor.proto", &protobuf_RegisterTypes);
  Create::default_instance_ = new Create();
  Destroy::default_instance_ = new Destroy();
  RunStart::default_instance_ = new RunStart();
  RunStop::default_instance_ = new RunStop();
  FailReceiveMessage::default_instance_ = new FailReceiveMessage();
  ReceiveEmptyMessage::default_instance_ = new ReceiveEmptyMessage();
  UnknownMessageVersion::default_instance_ = new UnknownMessageVersion();
  UnknownRequestType::default_instance_ = new UnknownRequestType();
  EnvelopeParseFailure::default_instance_ = new EnvelopeParseFailure();
  EmptyEnvelope::default_instance_ = new EmptyEnvelope();
  InvalidMessageEnumeration::default_instance_ = new InvalidMessageEnumeration();
  BeginProcessStoreInfo::default_instance_ = new BeginProcessStoreInfo();
  EndProcessStoreInfo::default_instance_ = new EndProcessStoreInfo();
  ReceiveInvalidGet::default_instance_ = new ReceiveInvalidGet();
  GetInvalidStream::default_instance_ = new GetInvalidStream();
  GetInvalidOffset::default_instance_ = new GetInvalidOffset();
  BeginProcessGetStream::default_instance_ = new BeginProcessGetStream();
  EndProcessGetStream::default_instance_ = new EndProcessGetStream();
  SendErrorResponse::default_instance_ = new SendErrorResponse();
  ForwardSubscribeKeepalive::default_instance_ = new ForwardSubscribeKeepalive();
  BeginProcessBucketInfo::default_instance_ = new BeginProcessBucketInfo();
  EndProcessBucketInfo::default_instance_ = new EndProcessBucketInfo();
  BeginProcessStreamSetInfo::default_instance_ = new BeginProcessStreamSetInfo();
  EndProcessStreamSetInfo::default_instance_ = new EndProcessStreamSetInfo();
  BeginProcessStreamInfo::default_instance_ = new BeginProcessStreamInfo();
  EndProcessStreamInfo::default_instance_ = new EndProcessStreamInfo();
  Create::default_instance_->InitAsDefaultInstance();
  Destroy::default_instance_->InitAsDefaultInstance();
  RunStart::default_instance_->InitAsDefaultInstance();
  RunStop::default_instance_->InitAsDefaultInstance();
  FailReceiveMessage::default_instance_->InitAsDefaultInstance();
  ReceiveEmptyMessage::default_instance_->InitAsDefaultInstance();
  UnknownMessageVersion::default_instance_->InitAsDefaultInstance();
  UnknownRequestType::default_instance_->InitAsDefaultInstance();
  EnvelopeParseFailure::default_instance_->InitAsDefaultInstance();
  EmptyEnvelope::default_instance_->InitAsDefaultInstance();
  InvalidMessageEnumeration::default_instance_->InitAsDefaultInstance();
  BeginProcessStoreInfo::default_instance_->InitAsDefaultInstance();
  EndProcessStoreInfo::default_instance_->InitAsDefaultInstance();
  ReceiveInvalidGet::default_instance_->InitAsDefaultInstance();
  GetInvalidStream::default_instance_->InitAsDefaultInstance();
  GetInvalidOffset::default_instance_->InitAsDefaultInstance();
  BeginProcessGetStream::default_instance_->InitAsDefaultInstance();
  EndProcessGetStream::default_instance_->InitAsDefaultInstance();
  SendErrorResponse::default_instance_->InitAsDefaultInstance();
  ForwardSubscribeKeepalive::default_instance_->InitAsDefaultInstance();
  BeginProcessBucketInfo::default_instance_->InitAsDefaultInstance();
  EndProcessBucketInfo::default_instance_->InitAsDefaultInstance();
  BeginProcessStreamSetInfo::default_instance_->InitAsDefaultInstance();
  EndProcessStreamSetInfo::default_instance_->InitAsDefaultInstance();
  BeginProcessStreamInfo::default_instance_->InitAsDefaultInstance();
  EndProcessStreamInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zippylog_2frequest_5fprocessor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zippylog_2frequest_5fprocessor_2eproto {
  StaticDescriptorInitializer_zippylog_2frequest_5fprocessor_2eproto() {
    protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();
  }
} static_descriptor_initializer_zippylog_2frequest_5fprocessor_2eproto_;


// ===================================================================

const ::std::string Create::_default_id_;
#ifndef _MSC_VER
const int Create::kIdFieldNumber;
#endif  // !_MSC_VER

Create::Create()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Create::InitAsDefaultInstance() {
}

Create::Create(const Create& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Create::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Create::~Create() {
  SharedDtor();
}

void Create::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void Create::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Create::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Create_descriptor_;
}

const Create& Create::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

Create* Create::default_instance_ = NULL;

Create* Create::New() const {
  return new Create;
}

void Create::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Create::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Create::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Create::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Create* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Create*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Create::MergeFrom(const Create& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Create::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Create::CopyFrom(const Create& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Create::IsInitialized() const {
  
  return true;
}

void Create::Swap(Create* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Create::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Create_descriptor_;
  metadata.reflection = Create_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Destroy::_default_id_;
#ifndef _MSC_VER
const int Destroy::kIdFieldNumber;
#endif  // !_MSC_VER

Destroy::Destroy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Destroy::InitAsDefaultInstance() {
}

Destroy::Destroy(const Destroy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Destroy::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Destroy::~Destroy() {
  SharedDtor();
}

void Destroy::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void Destroy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Destroy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Destroy_descriptor_;
}

const Destroy& Destroy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

Destroy* Destroy::default_instance_ = NULL;

Destroy* Destroy::New() const {
  return new Destroy;
}

void Destroy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Destroy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Destroy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Destroy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Destroy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Destroy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Destroy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Destroy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Destroy::MergeFrom(const Destroy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Destroy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Destroy::CopyFrom(const Destroy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Destroy::IsInitialized() const {
  
  return true;
}

void Destroy::Swap(Destroy* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Destroy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Destroy_descriptor_;
  metadata.reflection = Destroy_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RunStart::_default_id_;
#ifndef _MSC_VER
const int RunStart::kIdFieldNumber;
#endif  // !_MSC_VER

RunStart::RunStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RunStart::InitAsDefaultInstance() {
}

RunStart::RunStart(const RunStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RunStart::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunStart::~RunStart() {
  SharedDtor();
}

void RunStart::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void RunStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunStart_descriptor_;
}

const RunStart& RunStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

RunStart* RunStart::default_instance_ = NULL;

RunStart* RunStart::New() const {
  return new RunStart;
}

void RunStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RunStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RunStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RunStart::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunStart::MergeFrom(const RunStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunStart::CopyFrom(const RunStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunStart::IsInitialized() const {
  
  return true;
}

void RunStart::Swap(RunStart* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunStart_descriptor_;
  metadata.reflection = RunStart_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RunStop::_default_id_;
#ifndef _MSC_VER
const int RunStop::kIdFieldNumber;
#endif  // !_MSC_VER

RunStop::RunStop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RunStop::InitAsDefaultInstance() {
}

RunStop::RunStop(const RunStop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RunStop::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunStop::~RunStop() {
  SharedDtor();
}

void RunStop::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void RunStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunStop_descriptor_;
}

const RunStop& RunStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

RunStop* RunStop::default_instance_ = NULL;

RunStop* RunStop::New() const {
  return new RunStop;
}

void RunStop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RunStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RunStop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 2;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RunStop::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunStop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunStop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunStop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunStop::MergeFrom(const RunStop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunStop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunStop::CopyFrom(const RunStop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunStop::IsInitialized() const {
  
  return true;
}

void RunStop::Swap(RunStop* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunStop_descriptor_;
  metadata.reflection = RunStop_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string FailReceiveMessage::_default_id_;
#ifndef _MSC_VER
const int FailReceiveMessage::kIdFieldNumber;
#endif  // !_MSC_VER

FailReceiveMessage::FailReceiveMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FailReceiveMessage::InitAsDefaultInstance() {
}

FailReceiveMessage::FailReceiveMessage(const FailReceiveMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FailReceiveMessage::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FailReceiveMessage::~FailReceiveMessage() {
  SharedDtor();
}

void FailReceiveMessage::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void FailReceiveMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FailReceiveMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FailReceiveMessage_descriptor_;
}

const FailReceiveMessage& FailReceiveMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

FailReceiveMessage* FailReceiveMessage::default_instance_ = NULL;

FailReceiveMessage* FailReceiveMessage::New() const {
  return new FailReceiveMessage;
}

void FailReceiveMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FailReceiveMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FailReceiveMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FailReceiveMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FailReceiveMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FailReceiveMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FailReceiveMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FailReceiveMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FailReceiveMessage::MergeFrom(const FailReceiveMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FailReceiveMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FailReceiveMessage::CopyFrom(const FailReceiveMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FailReceiveMessage::IsInitialized() const {
  
  return true;
}

void FailReceiveMessage::Swap(FailReceiveMessage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FailReceiveMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FailReceiveMessage_descriptor_;
  metadata.reflection = FailReceiveMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ReceiveEmptyMessage::_default_id_;
#ifndef _MSC_VER
const int ReceiveEmptyMessage::kIdFieldNumber;
#endif  // !_MSC_VER

ReceiveEmptyMessage::ReceiveEmptyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiveEmptyMessage::InitAsDefaultInstance() {
}

ReceiveEmptyMessage::ReceiveEmptyMessage(const ReceiveEmptyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiveEmptyMessage::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiveEmptyMessage::~ReceiveEmptyMessage() {
  SharedDtor();
}

void ReceiveEmptyMessage::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void ReceiveEmptyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiveEmptyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiveEmptyMessage_descriptor_;
}

const ReceiveEmptyMessage& ReceiveEmptyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

ReceiveEmptyMessage* ReceiveEmptyMessage::default_instance_ = NULL;

ReceiveEmptyMessage* ReceiveEmptyMessage::New() const {
  return new ReceiveEmptyMessage;
}

void ReceiveEmptyMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiveEmptyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiveEmptyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiveEmptyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiveEmptyMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveEmptyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiveEmptyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiveEmptyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiveEmptyMessage::MergeFrom(const ReceiveEmptyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiveEmptyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveEmptyMessage::CopyFrom(const ReceiveEmptyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveEmptyMessage::IsInitialized() const {
  
  return true;
}

void ReceiveEmptyMessage::Swap(ReceiveEmptyMessage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiveEmptyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiveEmptyMessage_descriptor_;
  metadata.reflection = ReceiveEmptyMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string UnknownMessageVersion::_default_id_;
#ifndef _MSC_VER
const int UnknownMessageVersion::kIdFieldNumber;
const int UnknownMessageVersion::kVersionFieldNumber;
#endif  // !_MSC_VER

UnknownMessageVersion::UnknownMessageVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnknownMessageVersion::InitAsDefaultInstance() {
}

UnknownMessageVersion::UnknownMessageVersion(const UnknownMessageVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnknownMessageVersion::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnknownMessageVersion::~UnknownMessageVersion() {
  SharedDtor();
}

void UnknownMessageVersion::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void UnknownMessageVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnknownMessageVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnknownMessageVersion_descriptor_;
}

const UnknownMessageVersion& UnknownMessageVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

UnknownMessageVersion* UnknownMessageVersion::default_instance_ = NULL;

UnknownMessageVersion* UnknownMessageVersion::New() const {
  return new UnknownMessageVersion;
}

void UnknownMessageVersion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnknownMessageVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }
      
      // optional uint32 version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnknownMessageVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  // optional uint32 version = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnknownMessageVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  // optional uint32 version = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnknownMessageVersion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
    // optional uint32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnknownMessageVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnknownMessageVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnknownMessageVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnknownMessageVersion::MergeFrom(const UnknownMessageVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnknownMessageVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnknownMessageVersion::CopyFrom(const UnknownMessageVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownMessageVersion::IsInitialized() const {
  
  return true;
}

void UnknownMessageVersion::Swap(UnknownMessageVersion* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnknownMessageVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnknownMessageVersion_descriptor_;
  metadata.reflection = UnknownMessageVersion_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string UnknownRequestType::_default_id_;
#ifndef _MSC_VER
const int UnknownRequestType::kIdFieldNumber;
const int UnknownRequestType::kEnumerationFieldNumber;
#endif  // !_MSC_VER

UnknownRequestType::UnknownRequestType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnknownRequestType::InitAsDefaultInstance() {
}

UnknownRequestType::UnknownRequestType(const UnknownRequestType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnknownRequestType::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  enumeration_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnknownRequestType::~UnknownRequestType() {
  SharedDtor();
}

void UnknownRequestType::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void UnknownRequestType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnknownRequestType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnknownRequestType_descriptor_;
}

const UnknownRequestType& UnknownRequestType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

UnknownRequestType* UnknownRequestType::default_instance_ = NULL;

UnknownRequestType* UnknownRequestType::New() const {
  return new UnknownRequestType;
}

void UnknownRequestType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    enumeration_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnknownRequestType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enumeration;
        break;
      }
      
      // optional uint32 enumeration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enumeration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enumeration_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnknownRequestType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  // optional uint32 enumeration = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->enumeration(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnknownRequestType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  // optional uint32 enumeration = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->enumeration(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnknownRequestType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
    // optional uint32 enumeration = 2;
    if (has_enumeration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enumeration());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnknownRequestType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnknownRequestType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnknownRequestType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnknownRequestType::MergeFrom(const UnknownRequestType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_enumeration(from.enumeration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnknownRequestType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnknownRequestType::CopyFrom(const UnknownRequestType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownRequestType::IsInitialized() const {
  
  return true;
}

void UnknownRequestType::Swap(UnknownRequestType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(enumeration_, other->enumeration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnknownRequestType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnknownRequestType_descriptor_;
  metadata.reflection = UnknownRequestType_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string EnvelopeParseFailure::_default_id_;
const ::std::string EnvelopeParseFailure::_default_data_;
#ifndef _MSC_VER
const int EnvelopeParseFailure::kIdFieldNumber;
const int EnvelopeParseFailure::kDataFieldNumber;
#endif  // !_MSC_VER

EnvelopeParseFailure::EnvelopeParseFailure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnvelopeParseFailure::InitAsDefaultInstance() {
}

EnvelopeParseFailure::EnvelopeParseFailure(const EnvelopeParseFailure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnvelopeParseFailure::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  data_ = const_cast< ::std::string*>(&_default_data_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnvelopeParseFailure::~EnvelopeParseFailure() {
  SharedDtor();
}

void EnvelopeParseFailure::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void EnvelopeParseFailure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnvelopeParseFailure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnvelopeParseFailure_descriptor_;
}

const EnvelopeParseFailure& EnvelopeParseFailure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

EnvelopeParseFailure* EnvelopeParseFailure::default_instance_ = NULL;

EnvelopeParseFailure* EnvelopeParseFailure::New() const {
  return new EnvelopeParseFailure;
}

void EnvelopeParseFailure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnvelopeParseFailure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnvelopeParseFailure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  // optional bytes data = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnvelopeParseFailure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  // optional bytes data = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnvelopeParseFailure::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvelopeParseFailure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnvelopeParseFailure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnvelopeParseFailure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnvelopeParseFailure::MergeFrom(const EnvelopeParseFailure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnvelopeParseFailure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvelopeParseFailure::CopyFrom(const EnvelopeParseFailure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvelopeParseFailure::IsInitialized() const {
  
  return true;
}

void EnvelopeParseFailure::Swap(EnvelopeParseFailure* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnvelopeParseFailure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnvelopeParseFailure_descriptor_;
  metadata.reflection = EnvelopeParseFailure_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string EmptyEnvelope::_default_id_;
#ifndef _MSC_VER
const int EmptyEnvelope::kIdFieldNumber;
#endif  // !_MSC_VER

EmptyEnvelope::EmptyEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmptyEnvelope::InitAsDefaultInstance() {
}

EmptyEnvelope::EmptyEnvelope(const EmptyEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmptyEnvelope::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmptyEnvelope::~EmptyEnvelope() {
  SharedDtor();
}

void EmptyEnvelope::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void EmptyEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmptyEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmptyEnvelope_descriptor_;
}

const EmptyEnvelope& EmptyEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

EmptyEnvelope* EmptyEnvelope::default_instance_ = NULL;

EmptyEnvelope* EmptyEnvelope::New() const {
  return new EmptyEnvelope;
}

void EmptyEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmptyEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EmptyEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmptyEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmptyEnvelope::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmptyEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmptyEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmptyEnvelope::MergeFrom(const EmptyEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmptyEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyEnvelope::CopyFrom(const EmptyEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyEnvelope::IsInitialized() const {
  
  return true;
}

void EmptyEnvelope::Swap(EmptyEnvelope* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmptyEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmptyEnvelope_descriptor_;
  metadata.reflection = EmptyEnvelope_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string InvalidMessageEnumeration::_default_id_;
#ifndef _MSC_VER
const int InvalidMessageEnumeration::kIdFieldNumber;
#endif  // !_MSC_VER

InvalidMessageEnumeration::InvalidMessageEnumeration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvalidMessageEnumeration::InitAsDefaultInstance() {
}

InvalidMessageEnumeration::InvalidMessageEnumeration(const InvalidMessageEnumeration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvalidMessageEnumeration::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvalidMessageEnumeration::~InvalidMessageEnumeration() {
  SharedDtor();
}

void InvalidMessageEnumeration::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void InvalidMessageEnumeration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvalidMessageEnumeration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvalidMessageEnumeration_descriptor_;
}

const InvalidMessageEnumeration& InvalidMessageEnumeration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

InvalidMessageEnumeration* InvalidMessageEnumeration::default_instance_ = NULL;

InvalidMessageEnumeration* InvalidMessageEnumeration::New() const {
  return new InvalidMessageEnumeration;
}

void InvalidMessageEnumeration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvalidMessageEnumeration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvalidMessageEnumeration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvalidMessageEnumeration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvalidMessageEnumeration::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvalidMessageEnumeration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvalidMessageEnumeration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvalidMessageEnumeration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvalidMessageEnumeration::MergeFrom(const InvalidMessageEnumeration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvalidMessageEnumeration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvalidMessageEnumeration::CopyFrom(const InvalidMessageEnumeration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvalidMessageEnumeration::IsInitialized() const {
  
  return true;
}

void InvalidMessageEnumeration::Swap(InvalidMessageEnumeration* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvalidMessageEnumeration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvalidMessageEnumeration_descriptor_;
  metadata.reflection = InvalidMessageEnumeration_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string BeginProcessStoreInfo::_default_id_;
#ifndef _MSC_VER
const int BeginProcessStoreInfo::kIdFieldNumber;
#endif  // !_MSC_VER

BeginProcessStoreInfo::BeginProcessStoreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BeginProcessStoreInfo::InitAsDefaultInstance() {
}

BeginProcessStoreInfo::BeginProcessStoreInfo(const BeginProcessStoreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BeginProcessStoreInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginProcessStoreInfo::~BeginProcessStoreInfo() {
  SharedDtor();
}

void BeginProcessStoreInfo::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void BeginProcessStoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginProcessStoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeginProcessStoreInfo_descriptor_;
}

const BeginProcessStoreInfo& BeginProcessStoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

BeginProcessStoreInfo* BeginProcessStoreInfo::default_instance_ = NULL;

BeginProcessStoreInfo* BeginProcessStoreInfo::New() const {
  return new BeginProcessStoreInfo;
}

void BeginProcessStoreInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeginProcessStoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BeginProcessStoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BeginProcessStoreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BeginProcessStoreInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginProcessStoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeginProcessStoreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeginProcessStoreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeginProcessStoreInfo::MergeFrom(const BeginProcessStoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeginProcessStoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginProcessStoreInfo::CopyFrom(const BeginProcessStoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginProcessStoreInfo::IsInitialized() const {
  
  return true;
}

void BeginProcessStoreInfo::Swap(BeginProcessStoreInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeginProcessStoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeginProcessStoreInfo_descriptor_;
  metadata.reflection = BeginProcessStoreInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string EndProcessStoreInfo::_default_id_;
#ifndef _MSC_VER
const int EndProcessStoreInfo::kIdFieldNumber;
#endif  // !_MSC_VER

EndProcessStoreInfo::EndProcessStoreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EndProcessStoreInfo::InitAsDefaultInstance() {
}

EndProcessStoreInfo::EndProcessStoreInfo(const EndProcessStoreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EndProcessStoreInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndProcessStoreInfo::~EndProcessStoreInfo() {
  SharedDtor();
}

void EndProcessStoreInfo::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void EndProcessStoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndProcessStoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndProcessStoreInfo_descriptor_;
}

const EndProcessStoreInfo& EndProcessStoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

EndProcessStoreInfo* EndProcessStoreInfo::default_instance_ = NULL;

EndProcessStoreInfo* EndProcessStoreInfo::New() const {
  return new EndProcessStoreInfo;
}

void EndProcessStoreInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EndProcessStoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EndProcessStoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EndProcessStoreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EndProcessStoreInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndProcessStoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EndProcessStoreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EndProcessStoreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EndProcessStoreInfo::MergeFrom(const EndProcessStoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EndProcessStoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndProcessStoreInfo::CopyFrom(const EndProcessStoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndProcessStoreInfo::IsInitialized() const {
  
  return true;
}

void EndProcessStoreInfo::Swap(EndProcessStoreInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EndProcessStoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndProcessStoreInfo_descriptor_;
  metadata.reflection = EndProcessStoreInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ReceiveInvalidGet::_default_id_;
#ifndef _MSC_VER
const int ReceiveInvalidGet::kIdFieldNumber;
#endif  // !_MSC_VER

ReceiveInvalidGet::ReceiveInvalidGet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiveInvalidGet::InitAsDefaultInstance() {
}

ReceiveInvalidGet::ReceiveInvalidGet(const ReceiveInvalidGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiveInvalidGet::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiveInvalidGet::~ReceiveInvalidGet() {
  SharedDtor();
}

void ReceiveInvalidGet::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void ReceiveInvalidGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiveInvalidGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiveInvalidGet_descriptor_;
}

const ReceiveInvalidGet& ReceiveInvalidGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

ReceiveInvalidGet* ReceiveInvalidGet::default_instance_ = NULL;

ReceiveInvalidGet* ReceiveInvalidGet::New() const {
  return new ReceiveInvalidGet;
}

void ReceiveInvalidGet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiveInvalidGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiveInvalidGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiveInvalidGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiveInvalidGet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveInvalidGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiveInvalidGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiveInvalidGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiveInvalidGet::MergeFrom(const ReceiveInvalidGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiveInvalidGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveInvalidGet::CopyFrom(const ReceiveInvalidGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveInvalidGet::IsInitialized() const {
  
  return true;
}

void ReceiveInvalidGet::Swap(ReceiveInvalidGet* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiveInvalidGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiveInvalidGet_descriptor_;
  metadata.reflection = ReceiveInvalidGet_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GetInvalidStream::_default_id_;
#ifndef _MSC_VER
const int GetInvalidStream::kIdFieldNumber;
#endif  // !_MSC_VER

GetInvalidStream::GetInvalidStream()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetInvalidStream::InitAsDefaultInstance() {
}

GetInvalidStream::GetInvalidStream(const GetInvalidStream& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetInvalidStream::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInvalidStream::~GetInvalidStream() {
  SharedDtor();
}

void GetInvalidStream::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void GetInvalidStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInvalidStream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInvalidStream_descriptor_;
}

const GetInvalidStream& GetInvalidStream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

GetInvalidStream* GetInvalidStream::default_instance_ = NULL;

GetInvalidStream* GetInvalidStream::New() const {
  return new GetInvalidStream;
}

void GetInvalidStream::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInvalidStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetInvalidStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetInvalidStream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetInvalidStream::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInvalidStream::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInvalidStream* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInvalidStream*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInvalidStream::MergeFrom(const GetInvalidStream& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInvalidStream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInvalidStream::CopyFrom(const GetInvalidStream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInvalidStream::IsInitialized() const {
  
  return true;
}

void GetInvalidStream::Swap(GetInvalidStream* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInvalidStream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInvalidStream_descriptor_;
  metadata.reflection = GetInvalidStream_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GetInvalidOffset::_default_id_;
#ifndef _MSC_VER
const int GetInvalidOffset::kIdFieldNumber;
#endif  // !_MSC_VER

GetInvalidOffset::GetInvalidOffset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetInvalidOffset::InitAsDefaultInstance() {
}

GetInvalidOffset::GetInvalidOffset(const GetInvalidOffset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetInvalidOffset::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInvalidOffset::~GetInvalidOffset() {
  SharedDtor();
}

void GetInvalidOffset::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void GetInvalidOffset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInvalidOffset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInvalidOffset_descriptor_;
}

const GetInvalidOffset& GetInvalidOffset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

GetInvalidOffset* GetInvalidOffset::default_instance_ = NULL;

GetInvalidOffset* GetInvalidOffset::New() const {
  return new GetInvalidOffset;
}

void GetInvalidOffset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInvalidOffset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetInvalidOffset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetInvalidOffset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetInvalidOffset::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInvalidOffset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInvalidOffset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInvalidOffset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInvalidOffset::MergeFrom(const GetInvalidOffset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInvalidOffset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInvalidOffset::CopyFrom(const GetInvalidOffset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInvalidOffset::IsInitialized() const {
  
  return true;
}

void GetInvalidOffset::Swap(GetInvalidOffset* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInvalidOffset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInvalidOffset_descriptor_;
  metadata.reflection = GetInvalidOffset_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string BeginProcessGetStream::_default_id_;
#ifndef _MSC_VER
const int BeginProcessGetStream::kIdFieldNumber;
#endif  // !_MSC_VER

BeginProcessGetStream::BeginProcessGetStream()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BeginProcessGetStream::InitAsDefaultInstance() {
}

BeginProcessGetStream::BeginProcessGetStream(const BeginProcessGetStream& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BeginProcessGetStream::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginProcessGetStream::~BeginProcessGetStream() {
  SharedDtor();
}

void BeginProcessGetStream::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void BeginProcessGetStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginProcessGetStream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeginProcessGetStream_descriptor_;
}

const BeginProcessGetStream& BeginProcessGetStream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

BeginProcessGetStream* BeginProcessGetStream::default_instance_ = NULL;

BeginProcessGetStream* BeginProcessGetStream::New() const {
  return new BeginProcessGetStream;
}

void BeginProcessGetStream::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeginProcessGetStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BeginProcessGetStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BeginProcessGetStream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BeginProcessGetStream::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginProcessGetStream::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeginProcessGetStream* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeginProcessGetStream*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeginProcessGetStream::MergeFrom(const BeginProcessGetStream& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeginProcessGetStream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginProcessGetStream::CopyFrom(const BeginProcessGetStream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginProcessGetStream::IsInitialized() const {
  
  return true;
}

void BeginProcessGetStream::Swap(BeginProcessGetStream* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeginProcessGetStream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeginProcessGetStream_descriptor_;
  metadata.reflection = BeginProcessGetStream_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string EndProcessGetStream::_default_id_;
#ifndef _MSC_VER
const int EndProcessGetStream::kIdFieldNumber;
#endif  // !_MSC_VER

EndProcessGetStream::EndProcessGetStream()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EndProcessGetStream::InitAsDefaultInstance() {
}

EndProcessGetStream::EndProcessGetStream(const EndProcessGetStream& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EndProcessGetStream::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndProcessGetStream::~EndProcessGetStream() {
  SharedDtor();
}

void EndProcessGetStream::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void EndProcessGetStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndProcessGetStream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndProcessGetStream_descriptor_;
}

const EndProcessGetStream& EndProcessGetStream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

EndProcessGetStream* EndProcessGetStream::default_instance_ = NULL;

EndProcessGetStream* EndProcessGetStream::New() const {
  return new EndProcessGetStream;
}

void EndProcessGetStream::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EndProcessGetStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EndProcessGetStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EndProcessGetStream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EndProcessGetStream::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndProcessGetStream::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EndProcessGetStream* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EndProcessGetStream*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EndProcessGetStream::MergeFrom(const EndProcessGetStream& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EndProcessGetStream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndProcessGetStream::CopyFrom(const EndProcessGetStream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndProcessGetStream::IsInitialized() const {
  
  return true;
}

void EndProcessGetStream::Swap(EndProcessGetStream* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EndProcessGetStream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndProcessGetStream_descriptor_;
  metadata.reflection = EndProcessGetStream_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SendErrorResponse::_default_id_;
const ::std::string SendErrorResponse::_default_message_;
#ifndef _MSC_VER
const int SendErrorResponse::kIdFieldNumber;
const int SendErrorResponse::kMessageFieldNumber;
#endif  // !_MSC_VER

SendErrorResponse::SendErrorResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendErrorResponse::InitAsDefaultInstance() {
}

SendErrorResponse::SendErrorResponse(const SendErrorResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendErrorResponse::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  message_ = const_cast< ::std::string*>(&_default_message_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendErrorResponse::~SendErrorResponse() {
  SharedDtor();
}

void SendErrorResponse::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (message_ != &_default_message_) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void SendErrorResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendErrorResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendErrorResponse_descriptor_;
}

const SendErrorResponse& SendErrorResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

SendErrorResponse* SendErrorResponse::default_instance_ = NULL;

SendErrorResponse* SendErrorResponse::New() const {
  return new SendErrorResponse;
}

void SendErrorResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (message_ != &_default_message_) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendErrorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendErrorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  // optional string message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendErrorResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  // optional string message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendErrorResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendErrorResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendErrorResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendErrorResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendErrorResponse::MergeFrom(const SendErrorResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendErrorResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendErrorResponse::CopyFrom(const SendErrorResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendErrorResponse::IsInitialized() const {
  
  return true;
}

void SendErrorResponse::Swap(SendErrorResponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendErrorResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendErrorResponse_descriptor_;
  metadata.reflection = SendErrorResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ForwardSubscribeKeepalive::_default_id_;
const ::std::string ForwardSubscribeKeepalive::_default_subscription_;
#ifndef _MSC_VER
const int ForwardSubscribeKeepalive::kIdFieldNumber;
const int ForwardSubscribeKeepalive::kSubscriptionFieldNumber;
#endif  // !_MSC_VER

ForwardSubscribeKeepalive::ForwardSubscribeKeepalive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ForwardSubscribeKeepalive::InitAsDefaultInstance() {
}

ForwardSubscribeKeepalive::ForwardSubscribeKeepalive(const ForwardSubscribeKeepalive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ForwardSubscribeKeepalive::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  subscription_ = const_cast< ::std::string*>(&_default_subscription_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardSubscribeKeepalive::~ForwardSubscribeKeepalive() {
  SharedDtor();
}

void ForwardSubscribeKeepalive::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (subscription_ != &_default_subscription_) {
    delete subscription_;
  }
  if (this != default_instance_) {
  }
}

void ForwardSubscribeKeepalive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardSubscribeKeepalive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardSubscribeKeepalive_descriptor_;
}

const ForwardSubscribeKeepalive& ForwardSubscribeKeepalive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

ForwardSubscribeKeepalive* ForwardSubscribeKeepalive::default_instance_ = NULL;

ForwardSubscribeKeepalive* ForwardSubscribeKeepalive::New() const {
  return new ForwardSubscribeKeepalive;
}

void ForwardSubscribeKeepalive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (subscription_ != &_default_subscription_) {
        subscription_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardSubscribeKeepalive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscription;
        break;
      }
      
      // optional bytes subscription = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_subscription()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ForwardSubscribeKeepalive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  // optional bytes subscription = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->subscription(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ForwardSubscribeKeepalive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  // optional bytes subscription = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->subscription(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ForwardSubscribeKeepalive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
    // optional bytes subscription = 2;
    if (has_subscription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->subscription());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardSubscribeKeepalive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardSubscribeKeepalive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardSubscribeKeepalive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardSubscribeKeepalive::MergeFrom(const ForwardSubscribeKeepalive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_subscription(from.subscription());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardSubscribeKeepalive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardSubscribeKeepalive::CopyFrom(const ForwardSubscribeKeepalive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardSubscribeKeepalive::IsInitialized() const {
  
  return true;
}

void ForwardSubscribeKeepalive::Swap(ForwardSubscribeKeepalive* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(subscription_, other->subscription_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardSubscribeKeepalive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardSubscribeKeepalive_descriptor_;
  metadata.reflection = ForwardSubscribeKeepalive_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string BeginProcessBucketInfo::_default_id_;
const ::std::string BeginProcessBucketInfo::_default_path_;
#ifndef _MSC_VER
const int BeginProcessBucketInfo::kIdFieldNumber;
const int BeginProcessBucketInfo::kPathFieldNumber;
#endif  // !_MSC_VER

BeginProcessBucketInfo::BeginProcessBucketInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BeginProcessBucketInfo::InitAsDefaultInstance() {
}

BeginProcessBucketInfo::BeginProcessBucketInfo(const BeginProcessBucketInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BeginProcessBucketInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  path_ = const_cast< ::std::string*>(&_default_path_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginProcessBucketInfo::~BeginProcessBucketInfo() {
  SharedDtor();
}

void BeginProcessBucketInfo::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (path_ != &_default_path_) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void BeginProcessBucketInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginProcessBucketInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeginProcessBucketInfo_descriptor_;
}

const BeginProcessBucketInfo& BeginProcessBucketInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

BeginProcessBucketInfo* BeginProcessBucketInfo::default_instance_ = NULL;

BeginProcessBucketInfo* BeginProcessBucketInfo::New() const {
  return new BeginProcessBucketInfo;
}

void BeginProcessBucketInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (path_ != &_default_path_) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeginProcessBucketInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }
      
      // optional string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BeginProcessBucketInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  // optional string path = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BeginProcessBucketInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  // optional string path = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BeginProcessBucketInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginProcessBucketInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeginProcessBucketInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeginProcessBucketInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeginProcessBucketInfo::MergeFrom(const BeginProcessBucketInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeginProcessBucketInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginProcessBucketInfo::CopyFrom(const BeginProcessBucketInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginProcessBucketInfo::IsInitialized() const {
  
  return true;
}

void BeginProcessBucketInfo::Swap(BeginProcessBucketInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeginProcessBucketInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeginProcessBucketInfo_descriptor_;
  metadata.reflection = BeginProcessBucketInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string EndProcessBucketInfo::_default_id_;
const ::std::string EndProcessBucketInfo::_default_path_;
#ifndef _MSC_VER
const int EndProcessBucketInfo::kIdFieldNumber;
const int EndProcessBucketInfo::kPathFieldNumber;
#endif  // !_MSC_VER

EndProcessBucketInfo::EndProcessBucketInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EndProcessBucketInfo::InitAsDefaultInstance() {
}

EndProcessBucketInfo::EndProcessBucketInfo(const EndProcessBucketInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EndProcessBucketInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  path_ = const_cast< ::std::string*>(&_default_path_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndProcessBucketInfo::~EndProcessBucketInfo() {
  SharedDtor();
}

void EndProcessBucketInfo::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (path_ != &_default_path_) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void EndProcessBucketInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndProcessBucketInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndProcessBucketInfo_descriptor_;
}

const EndProcessBucketInfo& EndProcessBucketInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

EndProcessBucketInfo* EndProcessBucketInfo::default_instance_ = NULL;

EndProcessBucketInfo* EndProcessBucketInfo::New() const {
  return new EndProcessBucketInfo;
}

void EndProcessBucketInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (path_ != &_default_path_) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EndProcessBucketInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }
      
      // optional string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EndProcessBucketInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  // optional string path = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EndProcessBucketInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  // optional string path = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EndProcessBucketInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndProcessBucketInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EndProcessBucketInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EndProcessBucketInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EndProcessBucketInfo::MergeFrom(const EndProcessBucketInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EndProcessBucketInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndProcessBucketInfo::CopyFrom(const EndProcessBucketInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndProcessBucketInfo::IsInitialized() const {
  
  return true;
}

void EndProcessBucketInfo::Swap(EndProcessBucketInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EndProcessBucketInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndProcessBucketInfo_descriptor_;
  metadata.reflection = EndProcessBucketInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string BeginProcessStreamSetInfo::_default_id_;
const ::std::string BeginProcessStreamSetInfo::_default_path_;
#ifndef _MSC_VER
const int BeginProcessStreamSetInfo::kIdFieldNumber;
const int BeginProcessStreamSetInfo::kPathFieldNumber;
#endif  // !_MSC_VER

BeginProcessStreamSetInfo::BeginProcessStreamSetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BeginProcessStreamSetInfo::InitAsDefaultInstance() {
}

BeginProcessStreamSetInfo::BeginProcessStreamSetInfo(const BeginProcessStreamSetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BeginProcessStreamSetInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  path_ = const_cast< ::std::string*>(&_default_path_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginProcessStreamSetInfo::~BeginProcessStreamSetInfo() {
  SharedDtor();
}

void BeginProcessStreamSetInfo::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (path_ != &_default_path_) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void BeginProcessStreamSetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginProcessStreamSetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeginProcessStreamSetInfo_descriptor_;
}

const BeginProcessStreamSetInfo& BeginProcessStreamSetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

BeginProcessStreamSetInfo* BeginProcessStreamSetInfo::default_instance_ = NULL;

BeginProcessStreamSetInfo* BeginProcessStreamSetInfo::New() const {
  return new BeginProcessStreamSetInfo;
}

void BeginProcessStreamSetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (path_ != &_default_path_) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeginProcessStreamSetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }
      
      // optional string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BeginProcessStreamSetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  // optional string path = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BeginProcessStreamSetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  // optional string path = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BeginProcessStreamSetInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginProcessStreamSetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeginProcessStreamSetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeginProcessStreamSetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeginProcessStreamSetInfo::MergeFrom(const BeginProcessStreamSetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeginProcessStreamSetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginProcessStreamSetInfo::CopyFrom(const BeginProcessStreamSetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginProcessStreamSetInfo::IsInitialized() const {
  
  return true;
}

void BeginProcessStreamSetInfo::Swap(BeginProcessStreamSetInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeginProcessStreamSetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeginProcessStreamSetInfo_descriptor_;
  metadata.reflection = BeginProcessStreamSetInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string EndProcessStreamSetInfo::_default_id_;
const ::std::string EndProcessStreamSetInfo::_default_path_;
#ifndef _MSC_VER
const int EndProcessStreamSetInfo::kIdFieldNumber;
const int EndProcessStreamSetInfo::kPathFieldNumber;
#endif  // !_MSC_VER

EndProcessStreamSetInfo::EndProcessStreamSetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EndProcessStreamSetInfo::InitAsDefaultInstance() {
}

EndProcessStreamSetInfo::EndProcessStreamSetInfo(const EndProcessStreamSetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EndProcessStreamSetInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  path_ = const_cast< ::std::string*>(&_default_path_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndProcessStreamSetInfo::~EndProcessStreamSetInfo() {
  SharedDtor();
}

void EndProcessStreamSetInfo::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (path_ != &_default_path_) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void EndProcessStreamSetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndProcessStreamSetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndProcessStreamSetInfo_descriptor_;
}

const EndProcessStreamSetInfo& EndProcessStreamSetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

EndProcessStreamSetInfo* EndProcessStreamSetInfo::default_instance_ = NULL;

EndProcessStreamSetInfo* EndProcessStreamSetInfo::New() const {
  return new EndProcessStreamSetInfo;
}

void EndProcessStreamSetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (path_ != &_default_path_) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EndProcessStreamSetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }
      
      // optional string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EndProcessStreamSetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  // optional string path = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EndProcessStreamSetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  // optional string path = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EndProcessStreamSetInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndProcessStreamSetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EndProcessStreamSetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EndProcessStreamSetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EndProcessStreamSetInfo::MergeFrom(const EndProcessStreamSetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EndProcessStreamSetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndProcessStreamSetInfo::CopyFrom(const EndProcessStreamSetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndProcessStreamSetInfo::IsInitialized() const {
  
  return true;
}

void EndProcessStreamSetInfo::Swap(EndProcessStreamSetInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EndProcessStreamSetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndProcessStreamSetInfo_descriptor_;
  metadata.reflection = EndProcessStreamSetInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string BeginProcessStreamInfo::_default_id_;
const ::std::string BeginProcessStreamInfo::_default_path_;
#ifndef _MSC_VER
const int BeginProcessStreamInfo::kIdFieldNumber;
const int BeginProcessStreamInfo::kPathFieldNumber;
#endif  // !_MSC_VER

BeginProcessStreamInfo::BeginProcessStreamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BeginProcessStreamInfo::InitAsDefaultInstance() {
}

BeginProcessStreamInfo::BeginProcessStreamInfo(const BeginProcessStreamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BeginProcessStreamInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  path_ = const_cast< ::std::string*>(&_default_path_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginProcessStreamInfo::~BeginProcessStreamInfo() {
  SharedDtor();
}

void BeginProcessStreamInfo::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (path_ != &_default_path_) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void BeginProcessStreamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginProcessStreamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeginProcessStreamInfo_descriptor_;
}

const BeginProcessStreamInfo& BeginProcessStreamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

BeginProcessStreamInfo* BeginProcessStreamInfo::default_instance_ = NULL;

BeginProcessStreamInfo* BeginProcessStreamInfo::New() const {
  return new BeginProcessStreamInfo;
}

void BeginProcessStreamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (path_ != &_default_path_) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeginProcessStreamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }
      
      // optional string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BeginProcessStreamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  // optional string path = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BeginProcessStreamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  // optional string path = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BeginProcessStreamInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginProcessStreamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeginProcessStreamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeginProcessStreamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeginProcessStreamInfo::MergeFrom(const BeginProcessStreamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeginProcessStreamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginProcessStreamInfo::CopyFrom(const BeginProcessStreamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginProcessStreamInfo::IsInitialized() const {
  
  return true;
}

void BeginProcessStreamInfo::Swap(BeginProcessStreamInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeginProcessStreamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeginProcessStreamInfo_descriptor_;
  metadata.reflection = BeginProcessStreamInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string EndProcessStreamInfo::_default_id_;
const ::std::string EndProcessStreamInfo::_default_path_;
#ifndef _MSC_VER
const int EndProcessStreamInfo::kIdFieldNumber;
const int EndProcessStreamInfo::kPathFieldNumber;
#endif  // !_MSC_VER

EndProcessStreamInfo::EndProcessStreamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EndProcessStreamInfo::InitAsDefaultInstance() {
}

EndProcessStreamInfo::EndProcessStreamInfo(const EndProcessStreamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EndProcessStreamInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  path_ = const_cast< ::std::string*>(&_default_path_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndProcessStreamInfo::~EndProcessStreamInfo() {
  SharedDtor();
}

void EndProcessStreamInfo::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (path_ != &_default_path_) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void EndProcessStreamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndProcessStreamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndProcessStreamInfo_descriptor_;
}

const EndProcessStreamInfo& EndProcessStreamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2frequest_5fprocessor_2eproto();  return *default_instance_;
}

EndProcessStreamInfo* EndProcessStreamInfo::default_instance_ = NULL;

EndProcessStreamInfo* EndProcessStreamInfo::New() const {
  return new EndProcessStreamInfo;
}

void EndProcessStreamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (path_ != &_default_path_) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EndProcessStreamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }
      
      // optional string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EndProcessStreamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  // optional string path = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EndProcessStreamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  // optional string path = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EndProcessStreamInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndProcessStreamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EndProcessStreamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EndProcessStreamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EndProcessStreamInfo::MergeFrom(const EndProcessStreamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EndProcessStreamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndProcessStreamInfo::CopyFrom(const EndProcessStreamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndProcessStreamInfo::IsInitialized() const {
  
  return true;
}

void EndProcessStreamInfo::Swap(EndProcessStreamInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EndProcessStreamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndProcessStreamInfo_descriptor_;
  metadata.reflection = EndProcessStreamInfo_reflection_;
  return metadata;
}



bool Create::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool Create::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool Destroy::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool Destroy::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool RunStart::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool RunStart::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool RunStop::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool RunStop::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool FailReceiveMessage::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool FailReceiveMessage::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool ReceiveEmptyMessage::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool ReceiveEmptyMessage::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool UnknownMessageVersion::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool UnknownMessageVersion::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool UnknownRequestType::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool UnknownRequestType::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool EnvelopeParseFailure::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool EnvelopeParseFailure::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool EmptyEnvelope::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool EmptyEnvelope::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool InvalidMessageEnumeration::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool InvalidMessageEnumeration::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool BeginProcessStoreInfo::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool BeginProcessStoreInfo::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool EndProcessStoreInfo::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool EndProcessStoreInfo::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool ReceiveInvalidGet::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool ReceiveInvalidGet::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool GetInvalidStream::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool GetInvalidStream::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool GetInvalidOffset::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool GetInvalidOffset::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool BeginProcessGetStream::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool BeginProcessGetStream::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool EndProcessGetStream::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool EndProcessGetStream::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool SendErrorResponse::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool SendErrorResponse::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool ForwardSubscribeKeepalive::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool ForwardSubscribeKeepalive::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool BeginProcessBucketInfo::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool BeginProcessBucketInfo::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool EndProcessBucketInfo::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool EndProcessBucketInfo::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool BeginProcessStreamSetInfo::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool BeginProcessStreamSetInfo::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool EndProcessStreamSetInfo::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool EndProcessStreamSetInfo::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool BeginProcessStreamInfo::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool BeginProcessStreamInfo::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool EndProcessStreamInfo::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool EndProcessStreamInfo::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}
// @@protoc_insertion_point(namespace_scope)

}  // namespace request_processor
}  // namespace zippylog

// @@protoc_insertion_point(global_scope)
