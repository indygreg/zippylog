// Generated by the lua-protobuf compiler
// You shouldn't edit this file manually
//
// source proto file: zippylog/request_processor.proto

#include "zippylog/request_processor.pb-lua.h"

#ifdef __cplusplus
extern "C" { // make sure functions treated with C naming
#endif

#include <lauxlib.h>

#ifdef __cplusplus
}
#endif

#include <string>

// this represents Lua udata for a protocol buffer message
// we record where a message came from so we can GC it properly
typedef struct msg_udata { // confuse over-simplified pretty-printer
    ::google::protobuf::Message * msg;
    bool lua_owns;
    lua_protobuf_gc_callback gc_callback;
    void * callback_data;
} msg_udata;

using ::std::string;

int lua_protobuf_zippylog_request_processor_open(lua_State *L)
{
    const char *table = luaL_findtable(L, LUA_GLOBALSINDEX, "protobuf.zippylog.request_processor", 1);
    if (table) {
        return luaL_error(L, "could not create parent Lua tables");
    }
    if (!lua_istable(L, -1)) {
        lua_newtable(L);
        lua_setfield(L, -2, "zippylog.request_processor");
    }
    lua_pop(L, 1);
    luaL_Reg funcs [] = { { NULL, NULL } };
    luaL_register(L, "protobuf.zippylog.request_processor", funcs);
    lua_protobuf_zippylog_request_processor_Create_open(L);
    lua_protobuf_zippylog_request_processor_Destroy_open(L);
    lua_protobuf_zippylog_request_processor_RunStart_open(L);
    lua_protobuf_zippylog_request_processor_RunStop_open(L);
    lua_protobuf_zippylog_request_processor_FailReceiveMessage_open(L);
    lua_protobuf_zippylog_request_processor_ReceiveEmptyMessage_open(L);
    lua_protobuf_zippylog_request_processor_UnknownMessageVersion_open(L);
    lua_protobuf_zippylog_request_processor_UnknownRequestType_open(L);
    lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_open(L);
    lua_protobuf_zippylog_request_processor_EmptyEnvelope_open(L);
    lua_protobuf_zippylog_request_processor_InvalidMessageEnumeration_open(L);
    lua_protobuf_zippylog_request_processor_EnvelopeEmbeddedMessageParseFailure_open(L);
    lua_protobuf_zippylog_request_processor_BeginProcessStoreInfo_open(L);
    lua_protobuf_zippylog_request_processor_EndProcessStoreInfo_open(L);
    lua_protobuf_zippylog_request_processor_ReceiveInvalidGet_open(L);
    lua_protobuf_zippylog_request_processor_GetInvalidStream_open(L);
    lua_protobuf_zippylog_request_processor_GetInvalidOffset_open(L);
    lua_protobuf_zippylog_request_processor_BeginProcessGetStream_open(L);
    lua_protobuf_zippylog_request_processor_EndProcessGetStream_open(L);
    lua_protobuf_zippylog_request_processor_SendErrorResponse_open(L);
    lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_open(L);
    lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_open(L);
    lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_open(L);
    lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_open(L);
    lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_open(L);
    lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_open(L);
    lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_open(L);
    lua_protobuf_zippylog_request_processor_BeginProcessWriteEnvelope_open(L);
    lua_protobuf_zippylog_request_processor_EndProcessWriteEnvelope_open(L);
    return 1;
}


static const struct luaL_Reg Create_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_Create_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_Create_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg Create_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_Create_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_Create_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_Create_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_Create_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_Create_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_Create_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_Create_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_Create_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.Create");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, Create_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.Create", Create_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_Create_pushcopy(lua_State *L, const ::zippylog::request_processor::Create &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::Create(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.Create");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_Create_pushreference(lua_State *L, ::zippylog::request_processor::Create *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.Create");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_Create_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::Create();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.Create");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_Create_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::Create * msg = new ::zippylog::request_processor::Create();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.Create");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_Create_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.Create");
    ::zippylog::request_processor::Create *m = (::zippylog::request_processor::Create *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_Create_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.Create");
    ::zippylog::request_processor::Create *m = (::zippylog::request_processor::Create *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_Create_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.Create");
    ::zippylog::request_processor::Create *m = (::zippylog::request_processor::Create *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_Create_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.Create");
    ::zippylog::request_processor::Create *m = (::zippylog::request_processor::Create *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_Create_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.Create");
    ::zippylog::request_processor::Create *m = (::zippylog::request_processor::Create *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_Create_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.Create");
    ::zippylog::request_processor::Create *m = (::zippylog::request_processor::Create *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_Create_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.Create");
    ::zippylog::request_processor::Create *m = (::zippylog::request_processor::Create *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg Destroy_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_Destroy_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_Destroy_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg Destroy_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_Destroy_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_Destroy_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_Destroy_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_Destroy_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_Destroy_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_Destroy_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_Destroy_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_Destroy_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.Destroy");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, Destroy_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.Destroy", Destroy_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_Destroy_pushcopy(lua_State *L, const ::zippylog::request_processor::Destroy &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::Destroy(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.Destroy");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_Destroy_pushreference(lua_State *L, ::zippylog::request_processor::Destroy *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.Destroy");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_Destroy_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::Destroy();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.Destroy");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_Destroy_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::Destroy * msg = new ::zippylog::request_processor::Destroy();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.Destroy");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_Destroy_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.Destroy");
    ::zippylog::request_processor::Destroy *m = (::zippylog::request_processor::Destroy *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_Destroy_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.Destroy");
    ::zippylog::request_processor::Destroy *m = (::zippylog::request_processor::Destroy *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_Destroy_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.Destroy");
    ::zippylog::request_processor::Destroy *m = (::zippylog::request_processor::Destroy *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_Destroy_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.Destroy");
    ::zippylog::request_processor::Destroy *m = (::zippylog::request_processor::Destroy *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_Destroy_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.Destroy");
    ::zippylog::request_processor::Destroy *m = (::zippylog::request_processor::Destroy *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_Destroy_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.Destroy");
    ::zippylog::request_processor::Destroy *m = (::zippylog::request_processor::Destroy *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_Destroy_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.Destroy");
    ::zippylog::request_processor::Destroy *m = (::zippylog::request_processor::Destroy *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg RunStart_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_RunStart_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_RunStart_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg RunStart_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_RunStart_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_RunStart_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_RunStart_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_RunStart_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_RunStart_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_RunStart_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_RunStart_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_RunStart_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.RunStart");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, RunStart_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.RunStart", RunStart_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_RunStart_pushcopy(lua_State *L, const ::zippylog::request_processor::RunStart &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::RunStart(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.RunStart");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_RunStart_pushreference(lua_State *L, ::zippylog::request_processor::RunStart *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.RunStart");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_RunStart_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::RunStart();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.RunStart");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_RunStart_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::RunStart * msg = new ::zippylog::request_processor::RunStart();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.RunStart");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_RunStart_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.RunStart");
    ::zippylog::request_processor::RunStart *m = (::zippylog::request_processor::RunStart *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_RunStart_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.RunStart");
    ::zippylog::request_processor::RunStart *m = (::zippylog::request_processor::RunStart *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_RunStart_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.RunStart");
    ::zippylog::request_processor::RunStart *m = (::zippylog::request_processor::RunStart *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_RunStart_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.RunStart");
    ::zippylog::request_processor::RunStart *m = (::zippylog::request_processor::RunStart *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_RunStart_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.RunStart");
    ::zippylog::request_processor::RunStart *m = (::zippylog::request_processor::RunStart *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_RunStart_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.RunStart");
    ::zippylog::request_processor::RunStart *m = (::zippylog::request_processor::RunStart *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_RunStart_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.RunStart");
    ::zippylog::request_processor::RunStart *m = (::zippylog::request_processor::RunStart *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg RunStop_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_RunStop_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_RunStop_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg RunStop_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_RunStop_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_RunStop_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_RunStop_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_RunStop_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_RunStop_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_RunStop_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_RunStop_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_RunStop_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.RunStop");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, RunStop_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.RunStop", RunStop_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_RunStop_pushcopy(lua_State *L, const ::zippylog::request_processor::RunStop &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::RunStop(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.RunStop");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_RunStop_pushreference(lua_State *L, ::zippylog::request_processor::RunStop *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.RunStop");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_RunStop_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::RunStop();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.RunStop");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_RunStop_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::RunStop * msg = new ::zippylog::request_processor::RunStop();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.RunStop");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_RunStop_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.RunStop");
    ::zippylog::request_processor::RunStop *m = (::zippylog::request_processor::RunStop *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_RunStop_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.RunStop");
    ::zippylog::request_processor::RunStop *m = (::zippylog::request_processor::RunStop *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_RunStop_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.RunStop");
    ::zippylog::request_processor::RunStop *m = (::zippylog::request_processor::RunStop *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_RunStop_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.RunStop");
    ::zippylog::request_processor::RunStop *m = (::zippylog::request_processor::RunStop *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_RunStop_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.RunStop");
    ::zippylog::request_processor::RunStop *m = (::zippylog::request_processor::RunStop *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_RunStop_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.RunStop");
    ::zippylog::request_processor::RunStop *m = (::zippylog::request_processor::RunStop *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_RunStop_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.RunStop");
    ::zippylog::request_processor::RunStop *m = (::zippylog::request_processor::RunStop *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg FailReceiveMessage_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_FailReceiveMessage_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_FailReceiveMessage_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg FailReceiveMessage_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_FailReceiveMessage_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_FailReceiveMessage_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_FailReceiveMessage_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_FailReceiveMessage_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_FailReceiveMessage_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_FailReceiveMessage_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_FailReceiveMessage_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_FailReceiveMessage_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.FailReceiveMessage");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, FailReceiveMessage_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.FailReceiveMessage", FailReceiveMessage_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_FailReceiveMessage_pushcopy(lua_State *L, const ::zippylog::request_processor::FailReceiveMessage &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::FailReceiveMessage(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.FailReceiveMessage");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_FailReceiveMessage_pushreference(lua_State *L, ::zippylog::request_processor::FailReceiveMessage *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.FailReceiveMessage");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_FailReceiveMessage_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::FailReceiveMessage();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.FailReceiveMessage");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_FailReceiveMessage_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::FailReceiveMessage * msg = new ::zippylog::request_processor::FailReceiveMessage();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.FailReceiveMessage");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_FailReceiveMessage_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.FailReceiveMessage");
    ::zippylog::request_processor::FailReceiveMessage *m = (::zippylog::request_processor::FailReceiveMessage *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_FailReceiveMessage_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.FailReceiveMessage");
    ::zippylog::request_processor::FailReceiveMessage *m = (::zippylog::request_processor::FailReceiveMessage *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_FailReceiveMessage_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.FailReceiveMessage");
    ::zippylog::request_processor::FailReceiveMessage *m = (::zippylog::request_processor::FailReceiveMessage *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_FailReceiveMessage_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.FailReceiveMessage");
    ::zippylog::request_processor::FailReceiveMessage *m = (::zippylog::request_processor::FailReceiveMessage *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_FailReceiveMessage_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.FailReceiveMessage");
    ::zippylog::request_processor::FailReceiveMessage *m = (::zippylog::request_processor::FailReceiveMessage *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_FailReceiveMessage_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.FailReceiveMessage");
    ::zippylog::request_processor::FailReceiveMessage *m = (::zippylog::request_processor::FailReceiveMessage *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_FailReceiveMessage_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.FailReceiveMessage");
    ::zippylog::request_processor::FailReceiveMessage *m = (::zippylog::request_processor::FailReceiveMessage *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg ReceiveEmptyMessage_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_ReceiveEmptyMessage_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_ReceiveEmptyMessage_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg ReceiveEmptyMessage_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_ReceiveEmptyMessage_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_ReceiveEmptyMessage_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_ReceiveEmptyMessage_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_ReceiveEmptyMessage_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_ReceiveEmptyMessage_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_ReceiveEmptyMessage_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_ReceiveEmptyMessage_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_ReceiveEmptyMessage_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.ReceiveEmptyMessage");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, ReceiveEmptyMessage_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.ReceiveEmptyMessage", ReceiveEmptyMessage_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_ReceiveEmptyMessage_pushcopy(lua_State *L, const ::zippylog::request_processor::ReceiveEmptyMessage &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::ReceiveEmptyMessage(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.ReceiveEmptyMessage");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_ReceiveEmptyMessage_pushreference(lua_State *L, ::zippylog::request_processor::ReceiveEmptyMessage *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.ReceiveEmptyMessage");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_ReceiveEmptyMessage_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::ReceiveEmptyMessage();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.ReceiveEmptyMessage");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_ReceiveEmptyMessage_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::ReceiveEmptyMessage * msg = new ::zippylog::request_processor::ReceiveEmptyMessage();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.ReceiveEmptyMessage");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_ReceiveEmptyMessage_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ReceiveEmptyMessage");
    ::zippylog::request_processor::ReceiveEmptyMessage *m = (::zippylog::request_processor::ReceiveEmptyMessage *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_ReceiveEmptyMessage_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ReceiveEmptyMessage");
    ::zippylog::request_processor::ReceiveEmptyMessage *m = (::zippylog::request_processor::ReceiveEmptyMessage *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_ReceiveEmptyMessage_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ReceiveEmptyMessage");
    ::zippylog::request_processor::ReceiveEmptyMessage *m = (::zippylog::request_processor::ReceiveEmptyMessage *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_ReceiveEmptyMessage_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ReceiveEmptyMessage");
    ::zippylog::request_processor::ReceiveEmptyMessage *m = (::zippylog::request_processor::ReceiveEmptyMessage *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_ReceiveEmptyMessage_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ReceiveEmptyMessage");
    ::zippylog::request_processor::ReceiveEmptyMessage *m = (::zippylog::request_processor::ReceiveEmptyMessage *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_ReceiveEmptyMessage_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ReceiveEmptyMessage");
    ::zippylog::request_processor::ReceiveEmptyMessage *m = (::zippylog::request_processor::ReceiveEmptyMessage *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_ReceiveEmptyMessage_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ReceiveEmptyMessage");
    ::zippylog::request_processor::ReceiveEmptyMessage *m = (::zippylog::request_processor::ReceiveEmptyMessage *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg UnknownMessageVersion_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_UnknownMessageVersion_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_UnknownMessageVersion_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg UnknownMessageVersion_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_UnknownMessageVersion_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_UnknownMessageVersion_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_UnknownMessageVersion_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_UnknownMessageVersion_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_UnknownMessageVersion_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_UnknownMessageVersion_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_UnknownMessageVersion_has_id},
    {"clear_version", lua_protobuf_zippylog_request_processor_UnknownMessageVersion_clear_version},
    {"get_version", lua_protobuf_zippylog_request_processor_UnknownMessageVersion_get_version},
    {"set_version", lua_protobuf_zippylog_request_processor_UnknownMessageVersion_set_version},
    {"has_version", lua_protobuf_zippylog_request_processor_UnknownMessageVersion_has_version},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_UnknownMessageVersion_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.UnknownMessageVersion");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, UnknownMessageVersion_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.UnknownMessageVersion", UnknownMessageVersion_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_UnknownMessageVersion_pushcopy(lua_State *L, const ::zippylog::request_processor::UnknownMessageVersion &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::UnknownMessageVersion(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.UnknownMessageVersion");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_UnknownMessageVersion_pushreference(lua_State *L, ::zippylog::request_processor::UnknownMessageVersion *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.UnknownMessageVersion");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_UnknownMessageVersion_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::UnknownMessageVersion();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.UnknownMessageVersion");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_UnknownMessageVersion_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::UnknownMessageVersion * msg = new ::zippylog::request_processor::UnknownMessageVersion();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.UnknownMessageVersion");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_UnknownMessageVersion_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.UnknownMessageVersion");
    ::zippylog::request_processor::UnknownMessageVersion *m = (::zippylog::request_processor::UnknownMessageVersion *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_UnknownMessageVersion_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.UnknownMessageVersion");
    ::zippylog::request_processor::UnknownMessageVersion *m = (::zippylog::request_processor::UnknownMessageVersion *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_UnknownMessageVersion_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.UnknownMessageVersion");
    ::zippylog::request_processor::UnknownMessageVersion *m = (::zippylog::request_processor::UnknownMessageVersion *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_UnknownMessageVersion_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.UnknownMessageVersion");
    ::zippylog::request_processor::UnknownMessageVersion *m = (::zippylog::request_processor::UnknownMessageVersion *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_UnknownMessageVersion_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.UnknownMessageVersion");
    ::zippylog::request_processor::UnknownMessageVersion *m = (::zippylog::request_processor::UnknownMessageVersion *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_UnknownMessageVersion_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.UnknownMessageVersion");
    ::zippylog::request_processor::UnknownMessageVersion *m = (::zippylog::request_processor::UnknownMessageVersion *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_UnknownMessageVersion_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.UnknownMessageVersion");
    ::zippylog::request_processor::UnknownMessageVersion *m = (::zippylog::request_processor::UnknownMessageVersion *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

int lua_protobuf_zippylog_request_processor_UnknownMessageVersion_clear_version(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.UnknownMessageVersion");
    ::zippylog::request_processor::UnknownMessageVersion *m = (::zippylog::request_processor::UnknownMessageVersion *)mud->msg;
    m->clear_version();
    return 0;
}

int lua_protobuf_zippylog_request_processor_UnknownMessageVersion_get_version(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.UnknownMessageVersion");
    ::zippylog::request_processor::UnknownMessageVersion *m = (::zippylog::request_processor::UnknownMessageVersion *)mud->msg;
    m->has_version() ? lua_pushinteger(L, m->version()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_UnknownMessageVersion_set_version(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.UnknownMessageVersion");
    ::zippylog::request_processor::UnknownMessageVersion *m = (::zippylog::request_processor::UnknownMessageVersion *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_version();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_version(v);
    return 0;
}

int lua_protobuf_zippylog_request_processor_UnknownMessageVersion_has_version(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.UnknownMessageVersion");
    ::zippylog::request_processor::UnknownMessageVersion *m = (::zippylog::request_processor::UnknownMessageVersion *)mud->msg;
    lua_pushboolean(L, m->has_version());
    return 1;
}

static const struct luaL_Reg UnknownRequestType_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_UnknownRequestType_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_UnknownRequestType_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg UnknownRequestType_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_UnknownRequestType_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_UnknownRequestType_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_UnknownRequestType_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_UnknownRequestType_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_UnknownRequestType_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_UnknownRequestType_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_UnknownRequestType_has_id},
    {"clear_enumeration", lua_protobuf_zippylog_request_processor_UnknownRequestType_clear_enumeration},
    {"get_enumeration", lua_protobuf_zippylog_request_processor_UnknownRequestType_get_enumeration},
    {"set_enumeration", lua_protobuf_zippylog_request_processor_UnknownRequestType_set_enumeration},
    {"has_enumeration", lua_protobuf_zippylog_request_processor_UnknownRequestType_has_enumeration},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_UnknownRequestType_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.UnknownRequestType");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, UnknownRequestType_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.UnknownRequestType", UnknownRequestType_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_UnknownRequestType_pushcopy(lua_State *L, const ::zippylog::request_processor::UnknownRequestType &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::UnknownRequestType(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.UnknownRequestType");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_UnknownRequestType_pushreference(lua_State *L, ::zippylog::request_processor::UnknownRequestType *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.UnknownRequestType");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_UnknownRequestType_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::UnknownRequestType();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.UnknownRequestType");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_UnknownRequestType_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::UnknownRequestType * msg = new ::zippylog::request_processor::UnknownRequestType();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.UnknownRequestType");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_UnknownRequestType_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.UnknownRequestType");
    ::zippylog::request_processor::UnknownRequestType *m = (::zippylog::request_processor::UnknownRequestType *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_UnknownRequestType_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.UnknownRequestType");
    ::zippylog::request_processor::UnknownRequestType *m = (::zippylog::request_processor::UnknownRequestType *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_UnknownRequestType_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.UnknownRequestType");
    ::zippylog::request_processor::UnknownRequestType *m = (::zippylog::request_processor::UnknownRequestType *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_UnknownRequestType_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.UnknownRequestType");
    ::zippylog::request_processor::UnknownRequestType *m = (::zippylog::request_processor::UnknownRequestType *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_UnknownRequestType_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.UnknownRequestType");
    ::zippylog::request_processor::UnknownRequestType *m = (::zippylog::request_processor::UnknownRequestType *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_UnknownRequestType_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.UnknownRequestType");
    ::zippylog::request_processor::UnknownRequestType *m = (::zippylog::request_processor::UnknownRequestType *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_UnknownRequestType_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.UnknownRequestType");
    ::zippylog::request_processor::UnknownRequestType *m = (::zippylog::request_processor::UnknownRequestType *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

int lua_protobuf_zippylog_request_processor_UnknownRequestType_clear_enumeration(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.UnknownRequestType");
    ::zippylog::request_processor::UnknownRequestType *m = (::zippylog::request_processor::UnknownRequestType *)mud->msg;
    m->clear_enumeration();
    return 0;
}

int lua_protobuf_zippylog_request_processor_UnknownRequestType_get_enumeration(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.UnknownRequestType");
    ::zippylog::request_processor::UnknownRequestType *m = (::zippylog::request_processor::UnknownRequestType *)mud->msg;
    m->has_enumeration() ? lua_pushinteger(L, m->enumeration()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_UnknownRequestType_set_enumeration(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.UnknownRequestType");
    ::zippylog::request_processor::UnknownRequestType *m = (::zippylog::request_processor::UnknownRequestType *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_enumeration();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_enumeration(v);
    return 0;
}

int lua_protobuf_zippylog_request_processor_UnknownRequestType_has_enumeration(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.UnknownRequestType");
    ::zippylog::request_processor::UnknownRequestType *m = (::zippylog::request_processor::UnknownRequestType *)mud->msg;
    lua_pushboolean(L, m->has_enumeration());
    return 1;
}

static const struct luaL_Reg EnvelopeParseFailure_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg EnvelopeParseFailure_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_has_id},
    {"clear_data", lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_clear_data},
    {"get_data", lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_get_data},
    {"set_data", lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_set_data},
    {"has_data", lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_has_data},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.EnvelopeParseFailure");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, EnvelopeParseFailure_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.EnvelopeParseFailure", EnvelopeParseFailure_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_pushcopy(lua_State *L, const ::zippylog::request_processor::EnvelopeParseFailure &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::EnvelopeParseFailure(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EnvelopeParseFailure");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_pushreference(lua_State *L, ::zippylog::request_processor::EnvelopeParseFailure *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EnvelopeParseFailure");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::EnvelopeParseFailure();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EnvelopeParseFailure");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::EnvelopeParseFailure * msg = new ::zippylog::request_processor::EnvelopeParseFailure();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EnvelopeParseFailure");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EnvelopeParseFailure");
    ::zippylog::request_processor::EnvelopeParseFailure *m = (::zippylog::request_processor::EnvelopeParseFailure *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EnvelopeParseFailure");
    ::zippylog::request_processor::EnvelopeParseFailure *m = (::zippylog::request_processor::EnvelopeParseFailure *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EnvelopeParseFailure");
    ::zippylog::request_processor::EnvelopeParseFailure *m = (::zippylog::request_processor::EnvelopeParseFailure *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EnvelopeParseFailure");
    ::zippylog::request_processor::EnvelopeParseFailure *m = (::zippylog::request_processor::EnvelopeParseFailure *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EnvelopeParseFailure");
    ::zippylog::request_processor::EnvelopeParseFailure *m = (::zippylog::request_processor::EnvelopeParseFailure *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EnvelopeParseFailure");
    ::zippylog::request_processor::EnvelopeParseFailure *m = (::zippylog::request_processor::EnvelopeParseFailure *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EnvelopeParseFailure");
    ::zippylog::request_processor::EnvelopeParseFailure *m = (::zippylog::request_processor::EnvelopeParseFailure *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

int lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_clear_data(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EnvelopeParseFailure");
    ::zippylog::request_processor::EnvelopeParseFailure *m = (::zippylog::request_processor::EnvelopeParseFailure *)mud->msg;
    m->clear_data();
    return 0;
}

int lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_get_data(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EnvelopeParseFailure");
    ::zippylog::request_processor::EnvelopeParseFailure *m = (::zippylog::request_processor::EnvelopeParseFailure *)mud->msg;
    string s = m->data();
    m->has_data() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_set_data(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EnvelopeParseFailure");
    ::zippylog::request_processor::EnvelopeParseFailure *m = (::zippylog::request_processor::EnvelopeParseFailure *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_data();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_data(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_EnvelopeParseFailure_has_data(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EnvelopeParseFailure");
    ::zippylog::request_processor::EnvelopeParseFailure *m = (::zippylog::request_processor::EnvelopeParseFailure *)mud->msg;
    lua_pushboolean(L, m->has_data());
    return 1;
}

static const struct luaL_Reg EmptyEnvelope_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_EmptyEnvelope_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_EmptyEnvelope_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg EmptyEnvelope_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_EmptyEnvelope_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_EmptyEnvelope_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_EmptyEnvelope_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_EmptyEnvelope_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_EmptyEnvelope_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_EmptyEnvelope_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_EmptyEnvelope_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_EmptyEnvelope_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.EmptyEnvelope");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, EmptyEnvelope_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.EmptyEnvelope", EmptyEnvelope_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_EmptyEnvelope_pushcopy(lua_State *L, const ::zippylog::request_processor::EmptyEnvelope &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::EmptyEnvelope(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EmptyEnvelope");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_EmptyEnvelope_pushreference(lua_State *L, ::zippylog::request_processor::EmptyEnvelope *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EmptyEnvelope");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_EmptyEnvelope_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::EmptyEnvelope();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EmptyEnvelope");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_EmptyEnvelope_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::EmptyEnvelope * msg = new ::zippylog::request_processor::EmptyEnvelope();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EmptyEnvelope");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_EmptyEnvelope_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EmptyEnvelope");
    ::zippylog::request_processor::EmptyEnvelope *m = (::zippylog::request_processor::EmptyEnvelope *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_EmptyEnvelope_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EmptyEnvelope");
    ::zippylog::request_processor::EmptyEnvelope *m = (::zippylog::request_processor::EmptyEnvelope *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_EmptyEnvelope_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EmptyEnvelope");
    ::zippylog::request_processor::EmptyEnvelope *m = (::zippylog::request_processor::EmptyEnvelope *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_EmptyEnvelope_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EmptyEnvelope");
    ::zippylog::request_processor::EmptyEnvelope *m = (::zippylog::request_processor::EmptyEnvelope *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_EmptyEnvelope_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EmptyEnvelope");
    ::zippylog::request_processor::EmptyEnvelope *m = (::zippylog::request_processor::EmptyEnvelope *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_EmptyEnvelope_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EmptyEnvelope");
    ::zippylog::request_processor::EmptyEnvelope *m = (::zippylog::request_processor::EmptyEnvelope *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_EmptyEnvelope_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EmptyEnvelope");
    ::zippylog::request_processor::EmptyEnvelope *m = (::zippylog::request_processor::EmptyEnvelope *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg InvalidMessageEnumeration_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_InvalidMessageEnumeration_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_InvalidMessageEnumeration_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg InvalidMessageEnumeration_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_InvalidMessageEnumeration_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_InvalidMessageEnumeration_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_InvalidMessageEnumeration_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_InvalidMessageEnumeration_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_InvalidMessageEnumeration_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_InvalidMessageEnumeration_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_InvalidMessageEnumeration_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_InvalidMessageEnumeration_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.InvalidMessageEnumeration");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, InvalidMessageEnumeration_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.InvalidMessageEnumeration", InvalidMessageEnumeration_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_InvalidMessageEnumeration_pushcopy(lua_State *L, const ::zippylog::request_processor::InvalidMessageEnumeration &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::InvalidMessageEnumeration(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.InvalidMessageEnumeration");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_InvalidMessageEnumeration_pushreference(lua_State *L, ::zippylog::request_processor::InvalidMessageEnumeration *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.InvalidMessageEnumeration");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_InvalidMessageEnumeration_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::InvalidMessageEnumeration();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.InvalidMessageEnumeration");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_InvalidMessageEnumeration_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::InvalidMessageEnumeration * msg = new ::zippylog::request_processor::InvalidMessageEnumeration();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.InvalidMessageEnumeration");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_InvalidMessageEnumeration_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.InvalidMessageEnumeration");
    ::zippylog::request_processor::InvalidMessageEnumeration *m = (::zippylog::request_processor::InvalidMessageEnumeration *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_InvalidMessageEnumeration_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.InvalidMessageEnumeration");
    ::zippylog::request_processor::InvalidMessageEnumeration *m = (::zippylog::request_processor::InvalidMessageEnumeration *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_InvalidMessageEnumeration_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.InvalidMessageEnumeration");
    ::zippylog::request_processor::InvalidMessageEnumeration *m = (::zippylog::request_processor::InvalidMessageEnumeration *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_InvalidMessageEnumeration_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.InvalidMessageEnumeration");
    ::zippylog::request_processor::InvalidMessageEnumeration *m = (::zippylog::request_processor::InvalidMessageEnumeration *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_InvalidMessageEnumeration_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.InvalidMessageEnumeration");
    ::zippylog::request_processor::InvalidMessageEnumeration *m = (::zippylog::request_processor::InvalidMessageEnumeration *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_InvalidMessageEnumeration_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.InvalidMessageEnumeration");
    ::zippylog::request_processor::InvalidMessageEnumeration *m = (::zippylog::request_processor::InvalidMessageEnumeration *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_InvalidMessageEnumeration_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.InvalidMessageEnumeration");
    ::zippylog::request_processor::InvalidMessageEnumeration *m = (::zippylog::request_processor::InvalidMessageEnumeration *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg EnvelopeEmbeddedMessageParseFailure_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_EnvelopeEmbeddedMessageParseFailure_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_EnvelopeEmbeddedMessageParseFailure_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg EnvelopeEmbeddedMessageParseFailure_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_EnvelopeEmbeddedMessageParseFailure_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_EnvelopeEmbeddedMessageParseFailure_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_EnvelopeEmbeddedMessageParseFailure_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_EnvelopeEmbeddedMessageParseFailure_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_EnvelopeEmbeddedMessageParseFailure_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_EnvelopeEmbeddedMessageParseFailure_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_EnvelopeEmbeddedMessageParseFailure_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_EnvelopeEmbeddedMessageParseFailure_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.EnvelopeEmbeddedMessageParseFailure");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, EnvelopeEmbeddedMessageParseFailure_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.EnvelopeEmbeddedMessageParseFailure", EnvelopeEmbeddedMessageParseFailure_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_EnvelopeEmbeddedMessageParseFailure_pushcopy(lua_State *L, const ::zippylog::request_processor::EnvelopeEmbeddedMessageParseFailure &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::EnvelopeEmbeddedMessageParseFailure(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EnvelopeEmbeddedMessageParseFailure");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_EnvelopeEmbeddedMessageParseFailure_pushreference(lua_State *L, ::zippylog::request_processor::EnvelopeEmbeddedMessageParseFailure *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EnvelopeEmbeddedMessageParseFailure");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_EnvelopeEmbeddedMessageParseFailure_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::EnvelopeEmbeddedMessageParseFailure();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EnvelopeEmbeddedMessageParseFailure");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_EnvelopeEmbeddedMessageParseFailure_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::EnvelopeEmbeddedMessageParseFailure * msg = new ::zippylog::request_processor::EnvelopeEmbeddedMessageParseFailure();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EnvelopeEmbeddedMessageParseFailure");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_EnvelopeEmbeddedMessageParseFailure_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EnvelopeEmbeddedMessageParseFailure");
    ::zippylog::request_processor::EnvelopeEmbeddedMessageParseFailure *m = (::zippylog::request_processor::EnvelopeEmbeddedMessageParseFailure *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_EnvelopeEmbeddedMessageParseFailure_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EnvelopeEmbeddedMessageParseFailure");
    ::zippylog::request_processor::EnvelopeEmbeddedMessageParseFailure *m = (::zippylog::request_processor::EnvelopeEmbeddedMessageParseFailure *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_EnvelopeEmbeddedMessageParseFailure_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EnvelopeEmbeddedMessageParseFailure");
    ::zippylog::request_processor::EnvelopeEmbeddedMessageParseFailure *m = (::zippylog::request_processor::EnvelopeEmbeddedMessageParseFailure *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_EnvelopeEmbeddedMessageParseFailure_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EnvelopeEmbeddedMessageParseFailure");
    ::zippylog::request_processor::EnvelopeEmbeddedMessageParseFailure *m = (::zippylog::request_processor::EnvelopeEmbeddedMessageParseFailure *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_EnvelopeEmbeddedMessageParseFailure_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EnvelopeEmbeddedMessageParseFailure");
    ::zippylog::request_processor::EnvelopeEmbeddedMessageParseFailure *m = (::zippylog::request_processor::EnvelopeEmbeddedMessageParseFailure *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_EnvelopeEmbeddedMessageParseFailure_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EnvelopeEmbeddedMessageParseFailure");
    ::zippylog::request_processor::EnvelopeEmbeddedMessageParseFailure *m = (::zippylog::request_processor::EnvelopeEmbeddedMessageParseFailure *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_EnvelopeEmbeddedMessageParseFailure_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EnvelopeEmbeddedMessageParseFailure");
    ::zippylog::request_processor::EnvelopeEmbeddedMessageParseFailure *m = (::zippylog::request_processor::EnvelopeEmbeddedMessageParseFailure *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg BeginProcessStoreInfo_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_BeginProcessStoreInfo_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_BeginProcessStoreInfo_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg BeginProcessStoreInfo_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_BeginProcessStoreInfo_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_BeginProcessStoreInfo_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_BeginProcessStoreInfo_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_BeginProcessStoreInfo_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_BeginProcessStoreInfo_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_BeginProcessStoreInfo_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_BeginProcessStoreInfo_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_BeginProcessStoreInfo_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessStoreInfo");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, BeginProcessStoreInfo_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.BeginProcessStoreInfo", BeginProcessStoreInfo_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_BeginProcessStoreInfo_pushcopy(lua_State *L, const ::zippylog::request_processor::BeginProcessStoreInfo &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::BeginProcessStoreInfo(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessStoreInfo");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_BeginProcessStoreInfo_pushreference(lua_State *L, ::zippylog::request_processor::BeginProcessStoreInfo *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessStoreInfo");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_BeginProcessStoreInfo_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::BeginProcessStoreInfo();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessStoreInfo");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_BeginProcessStoreInfo_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::BeginProcessStoreInfo * msg = new ::zippylog::request_processor::BeginProcessStoreInfo();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessStoreInfo");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_BeginProcessStoreInfo_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStoreInfo");
    ::zippylog::request_processor::BeginProcessStoreInfo *m = (::zippylog::request_processor::BeginProcessStoreInfo *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_BeginProcessStoreInfo_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStoreInfo");
    ::zippylog::request_processor::BeginProcessStoreInfo *m = (::zippylog::request_processor::BeginProcessStoreInfo *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_BeginProcessStoreInfo_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStoreInfo");
    ::zippylog::request_processor::BeginProcessStoreInfo *m = (::zippylog::request_processor::BeginProcessStoreInfo *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_BeginProcessStoreInfo_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStoreInfo");
    ::zippylog::request_processor::BeginProcessStoreInfo *m = (::zippylog::request_processor::BeginProcessStoreInfo *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_BeginProcessStoreInfo_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStoreInfo");
    ::zippylog::request_processor::BeginProcessStoreInfo *m = (::zippylog::request_processor::BeginProcessStoreInfo *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_BeginProcessStoreInfo_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStoreInfo");
    ::zippylog::request_processor::BeginProcessStoreInfo *m = (::zippylog::request_processor::BeginProcessStoreInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_BeginProcessStoreInfo_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStoreInfo");
    ::zippylog::request_processor::BeginProcessStoreInfo *m = (::zippylog::request_processor::BeginProcessStoreInfo *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg EndProcessStoreInfo_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_EndProcessStoreInfo_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_EndProcessStoreInfo_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg EndProcessStoreInfo_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_EndProcessStoreInfo_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_EndProcessStoreInfo_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_EndProcessStoreInfo_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_EndProcessStoreInfo_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_EndProcessStoreInfo_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_EndProcessStoreInfo_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_EndProcessStoreInfo_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_EndProcessStoreInfo_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.EndProcessStoreInfo");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, EndProcessStoreInfo_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.EndProcessStoreInfo", EndProcessStoreInfo_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_EndProcessStoreInfo_pushcopy(lua_State *L, const ::zippylog::request_processor::EndProcessStoreInfo &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::EndProcessStoreInfo(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessStoreInfo");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_EndProcessStoreInfo_pushreference(lua_State *L, ::zippylog::request_processor::EndProcessStoreInfo *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessStoreInfo");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_EndProcessStoreInfo_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::EndProcessStoreInfo();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessStoreInfo");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_EndProcessStoreInfo_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::EndProcessStoreInfo * msg = new ::zippylog::request_processor::EndProcessStoreInfo();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessStoreInfo");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_EndProcessStoreInfo_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStoreInfo");
    ::zippylog::request_processor::EndProcessStoreInfo *m = (::zippylog::request_processor::EndProcessStoreInfo *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_EndProcessStoreInfo_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStoreInfo");
    ::zippylog::request_processor::EndProcessStoreInfo *m = (::zippylog::request_processor::EndProcessStoreInfo *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_EndProcessStoreInfo_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStoreInfo");
    ::zippylog::request_processor::EndProcessStoreInfo *m = (::zippylog::request_processor::EndProcessStoreInfo *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_EndProcessStoreInfo_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStoreInfo");
    ::zippylog::request_processor::EndProcessStoreInfo *m = (::zippylog::request_processor::EndProcessStoreInfo *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_EndProcessStoreInfo_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStoreInfo");
    ::zippylog::request_processor::EndProcessStoreInfo *m = (::zippylog::request_processor::EndProcessStoreInfo *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_EndProcessStoreInfo_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStoreInfo");
    ::zippylog::request_processor::EndProcessStoreInfo *m = (::zippylog::request_processor::EndProcessStoreInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_EndProcessStoreInfo_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStoreInfo");
    ::zippylog::request_processor::EndProcessStoreInfo *m = (::zippylog::request_processor::EndProcessStoreInfo *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg ReceiveInvalidGet_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_ReceiveInvalidGet_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_ReceiveInvalidGet_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg ReceiveInvalidGet_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_ReceiveInvalidGet_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_ReceiveInvalidGet_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_ReceiveInvalidGet_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_ReceiveInvalidGet_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_ReceiveInvalidGet_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_ReceiveInvalidGet_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_ReceiveInvalidGet_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_ReceiveInvalidGet_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.ReceiveInvalidGet");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, ReceiveInvalidGet_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.ReceiveInvalidGet", ReceiveInvalidGet_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_ReceiveInvalidGet_pushcopy(lua_State *L, const ::zippylog::request_processor::ReceiveInvalidGet &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::ReceiveInvalidGet(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.ReceiveInvalidGet");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_ReceiveInvalidGet_pushreference(lua_State *L, ::zippylog::request_processor::ReceiveInvalidGet *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.ReceiveInvalidGet");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_ReceiveInvalidGet_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::ReceiveInvalidGet();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.ReceiveInvalidGet");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_ReceiveInvalidGet_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::ReceiveInvalidGet * msg = new ::zippylog::request_processor::ReceiveInvalidGet();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.ReceiveInvalidGet");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_ReceiveInvalidGet_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ReceiveInvalidGet");
    ::zippylog::request_processor::ReceiveInvalidGet *m = (::zippylog::request_processor::ReceiveInvalidGet *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_ReceiveInvalidGet_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ReceiveInvalidGet");
    ::zippylog::request_processor::ReceiveInvalidGet *m = (::zippylog::request_processor::ReceiveInvalidGet *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_ReceiveInvalidGet_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ReceiveInvalidGet");
    ::zippylog::request_processor::ReceiveInvalidGet *m = (::zippylog::request_processor::ReceiveInvalidGet *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_ReceiveInvalidGet_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ReceiveInvalidGet");
    ::zippylog::request_processor::ReceiveInvalidGet *m = (::zippylog::request_processor::ReceiveInvalidGet *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_ReceiveInvalidGet_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ReceiveInvalidGet");
    ::zippylog::request_processor::ReceiveInvalidGet *m = (::zippylog::request_processor::ReceiveInvalidGet *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_ReceiveInvalidGet_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ReceiveInvalidGet");
    ::zippylog::request_processor::ReceiveInvalidGet *m = (::zippylog::request_processor::ReceiveInvalidGet *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_ReceiveInvalidGet_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ReceiveInvalidGet");
    ::zippylog::request_processor::ReceiveInvalidGet *m = (::zippylog::request_processor::ReceiveInvalidGet *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg GetInvalidStream_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_GetInvalidStream_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_GetInvalidStream_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg GetInvalidStream_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_GetInvalidStream_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_GetInvalidStream_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_GetInvalidStream_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_GetInvalidStream_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_GetInvalidStream_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_GetInvalidStream_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_GetInvalidStream_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_GetInvalidStream_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.GetInvalidStream");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, GetInvalidStream_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.GetInvalidStream", GetInvalidStream_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_GetInvalidStream_pushcopy(lua_State *L, const ::zippylog::request_processor::GetInvalidStream &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::GetInvalidStream(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.GetInvalidStream");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_GetInvalidStream_pushreference(lua_State *L, ::zippylog::request_processor::GetInvalidStream *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.GetInvalidStream");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_GetInvalidStream_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::GetInvalidStream();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.GetInvalidStream");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_GetInvalidStream_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::GetInvalidStream * msg = new ::zippylog::request_processor::GetInvalidStream();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.GetInvalidStream");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_GetInvalidStream_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.GetInvalidStream");
    ::zippylog::request_processor::GetInvalidStream *m = (::zippylog::request_processor::GetInvalidStream *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_GetInvalidStream_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.GetInvalidStream");
    ::zippylog::request_processor::GetInvalidStream *m = (::zippylog::request_processor::GetInvalidStream *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_GetInvalidStream_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.GetInvalidStream");
    ::zippylog::request_processor::GetInvalidStream *m = (::zippylog::request_processor::GetInvalidStream *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_GetInvalidStream_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.GetInvalidStream");
    ::zippylog::request_processor::GetInvalidStream *m = (::zippylog::request_processor::GetInvalidStream *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_GetInvalidStream_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.GetInvalidStream");
    ::zippylog::request_processor::GetInvalidStream *m = (::zippylog::request_processor::GetInvalidStream *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_GetInvalidStream_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.GetInvalidStream");
    ::zippylog::request_processor::GetInvalidStream *m = (::zippylog::request_processor::GetInvalidStream *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_GetInvalidStream_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.GetInvalidStream");
    ::zippylog::request_processor::GetInvalidStream *m = (::zippylog::request_processor::GetInvalidStream *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg GetInvalidOffset_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_GetInvalidOffset_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_GetInvalidOffset_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg GetInvalidOffset_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_GetInvalidOffset_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_GetInvalidOffset_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_GetInvalidOffset_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_GetInvalidOffset_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_GetInvalidOffset_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_GetInvalidOffset_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_GetInvalidOffset_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_GetInvalidOffset_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.GetInvalidOffset");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, GetInvalidOffset_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.GetInvalidOffset", GetInvalidOffset_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_GetInvalidOffset_pushcopy(lua_State *L, const ::zippylog::request_processor::GetInvalidOffset &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::GetInvalidOffset(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.GetInvalidOffset");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_GetInvalidOffset_pushreference(lua_State *L, ::zippylog::request_processor::GetInvalidOffset *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.GetInvalidOffset");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_GetInvalidOffset_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::GetInvalidOffset();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.GetInvalidOffset");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_GetInvalidOffset_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::GetInvalidOffset * msg = new ::zippylog::request_processor::GetInvalidOffset();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.GetInvalidOffset");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_GetInvalidOffset_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.GetInvalidOffset");
    ::zippylog::request_processor::GetInvalidOffset *m = (::zippylog::request_processor::GetInvalidOffset *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_GetInvalidOffset_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.GetInvalidOffset");
    ::zippylog::request_processor::GetInvalidOffset *m = (::zippylog::request_processor::GetInvalidOffset *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_GetInvalidOffset_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.GetInvalidOffset");
    ::zippylog::request_processor::GetInvalidOffset *m = (::zippylog::request_processor::GetInvalidOffset *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_GetInvalidOffset_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.GetInvalidOffset");
    ::zippylog::request_processor::GetInvalidOffset *m = (::zippylog::request_processor::GetInvalidOffset *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_GetInvalidOffset_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.GetInvalidOffset");
    ::zippylog::request_processor::GetInvalidOffset *m = (::zippylog::request_processor::GetInvalidOffset *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_GetInvalidOffset_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.GetInvalidOffset");
    ::zippylog::request_processor::GetInvalidOffset *m = (::zippylog::request_processor::GetInvalidOffset *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_GetInvalidOffset_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.GetInvalidOffset");
    ::zippylog::request_processor::GetInvalidOffset *m = (::zippylog::request_processor::GetInvalidOffset *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg BeginProcessGetStream_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_BeginProcessGetStream_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_BeginProcessGetStream_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg BeginProcessGetStream_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_BeginProcessGetStream_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_BeginProcessGetStream_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_BeginProcessGetStream_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_BeginProcessGetStream_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_BeginProcessGetStream_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_BeginProcessGetStream_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_BeginProcessGetStream_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_BeginProcessGetStream_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessGetStream");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, BeginProcessGetStream_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.BeginProcessGetStream", BeginProcessGetStream_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_BeginProcessGetStream_pushcopy(lua_State *L, const ::zippylog::request_processor::BeginProcessGetStream &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::BeginProcessGetStream(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessGetStream");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_BeginProcessGetStream_pushreference(lua_State *L, ::zippylog::request_processor::BeginProcessGetStream *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessGetStream");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_BeginProcessGetStream_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::BeginProcessGetStream();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessGetStream");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_BeginProcessGetStream_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::BeginProcessGetStream * msg = new ::zippylog::request_processor::BeginProcessGetStream();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessGetStream");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_BeginProcessGetStream_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessGetStream");
    ::zippylog::request_processor::BeginProcessGetStream *m = (::zippylog::request_processor::BeginProcessGetStream *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_BeginProcessGetStream_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessGetStream");
    ::zippylog::request_processor::BeginProcessGetStream *m = (::zippylog::request_processor::BeginProcessGetStream *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_BeginProcessGetStream_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessGetStream");
    ::zippylog::request_processor::BeginProcessGetStream *m = (::zippylog::request_processor::BeginProcessGetStream *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_BeginProcessGetStream_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessGetStream");
    ::zippylog::request_processor::BeginProcessGetStream *m = (::zippylog::request_processor::BeginProcessGetStream *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_BeginProcessGetStream_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessGetStream");
    ::zippylog::request_processor::BeginProcessGetStream *m = (::zippylog::request_processor::BeginProcessGetStream *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_BeginProcessGetStream_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessGetStream");
    ::zippylog::request_processor::BeginProcessGetStream *m = (::zippylog::request_processor::BeginProcessGetStream *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_BeginProcessGetStream_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessGetStream");
    ::zippylog::request_processor::BeginProcessGetStream *m = (::zippylog::request_processor::BeginProcessGetStream *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg EndProcessGetStream_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_EndProcessGetStream_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_EndProcessGetStream_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg EndProcessGetStream_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_EndProcessGetStream_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_EndProcessGetStream_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_EndProcessGetStream_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_EndProcessGetStream_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_EndProcessGetStream_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_EndProcessGetStream_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_EndProcessGetStream_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_EndProcessGetStream_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.EndProcessGetStream");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, EndProcessGetStream_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.EndProcessGetStream", EndProcessGetStream_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_EndProcessGetStream_pushcopy(lua_State *L, const ::zippylog::request_processor::EndProcessGetStream &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::EndProcessGetStream(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessGetStream");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_EndProcessGetStream_pushreference(lua_State *L, ::zippylog::request_processor::EndProcessGetStream *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessGetStream");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_EndProcessGetStream_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::EndProcessGetStream();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessGetStream");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_EndProcessGetStream_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::EndProcessGetStream * msg = new ::zippylog::request_processor::EndProcessGetStream();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessGetStream");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_EndProcessGetStream_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessGetStream");
    ::zippylog::request_processor::EndProcessGetStream *m = (::zippylog::request_processor::EndProcessGetStream *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_EndProcessGetStream_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessGetStream");
    ::zippylog::request_processor::EndProcessGetStream *m = (::zippylog::request_processor::EndProcessGetStream *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_EndProcessGetStream_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessGetStream");
    ::zippylog::request_processor::EndProcessGetStream *m = (::zippylog::request_processor::EndProcessGetStream *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_EndProcessGetStream_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessGetStream");
    ::zippylog::request_processor::EndProcessGetStream *m = (::zippylog::request_processor::EndProcessGetStream *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_EndProcessGetStream_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessGetStream");
    ::zippylog::request_processor::EndProcessGetStream *m = (::zippylog::request_processor::EndProcessGetStream *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_EndProcessGetStream_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessGetStream");
    ::zippylog::request_processor::EndProcessGetStream *m = (::zippylog::request_processor::EndProcessGetStream *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_EndProcessGetStream_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessGetStream");
    ::zippylog::request_processor::EndProcessGetStream *m = (::zippylog::request_processor::EndProcessGetStream *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg SendErrorResponse_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_SendErrorResponse_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_SendErrorResponse_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg SendErrorResponse_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_SendErrorResponse_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_SendErrorResponse_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_SendErrorResponse_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_SendErrorResponse_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_SendErrorResponse_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_SendErrorResponse_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_SendErrorResponse_has_id},
    {"clear_message", lua_protobuf_zippylog_request_processor_SendErrorResponse_clear_message},
    {"get_message", lua_protobuf_zippylog_request_processor_SendErrorResponse_get_message},
    {"set_message", lua_protobuf_zippylog_request_processor_SendErrorResponse_set_message},
    {"has_message", lua_protobuf_zippylog_request_processor_SendErrorResponse_has_message},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_SendErrorResponse_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.SendErrorResponse");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, SendErrorResponse_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.SendErrorResponse", SendErrorResponse_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_SendErrorResponse_pushcopy(lua_State *L, const ::zippylog::request_processor::SendErrorResponse &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::SendErrorResponse(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.SendErrorResponse");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_SendErrorResponse_pushreference(lua_State *L, ::zippylog::request_processor::SendErrorResponse *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.SendErrorResponse");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_SendErrorResponse_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::SendErrorResponse();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.SendErrorResponse");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_SendErrorResponse_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::SendErrorResponse * msg = new ::zippylog::request_processor::SendErrorResponse();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.SendErrorResponse");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_SendErrorResponse_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.SendErrorResponse");
    ::zippylog::request_processor::SendErrorResponse *m = (::zippylog::request_processor::SendErrorResponse *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_SendErrorResponse_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.SendErrorResponse");
    ::zippylog::request_processor::SendErrorResponse *m = (::zippylog::request_processor::SendErrorResponse *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_SendErrorResponse_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.SendErrorResponse");
    ::zippylog::request_processor::SendErrorResponse *m = (::zippylog::request_processor::SendErrorResponse *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_SendErrorResponse_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.SendErrorResponse");
    ::zippylog::request_processor::SendErrorResponse *m = (::zippylog::request_processor::SendErrorResponse *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_SendErrorResponse_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.SendErrorResponse");
    ::zippylog::request_processor::SendErrorResponse *m = (::zippylog::request_processor::SendErrorResponse *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_SendErrorResponse_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.SendErrorResponse");
    ::zippylog::request_processor::SendErrorResponse *m = (::zippylog::request_processor::SendErrorResponse *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_SendErrorResponse_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.SendErrorResponse");
    ::zippylog::request_processor::SendErrorResponse *m = (::zippylog::request_processor::SendErrorResponse *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

int lua_protobuf_zippylog_request_processor_SendErrorResponse_clear_message(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.SendErrorResponse");
    ::zippylog::request_processor::SendErrorResponse *m = (::zippylog::request_processor::SendErrorResponse *)mud->msg;
    m->clear_message();
    return 0;
}

int lua_protobuf_zippylog_request_processor_SendErrorResponse_get_message(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.SendErrorResponse");
    ::zippylog::request_processor::SendErrorResponse *m = (::zippylog::request_processor::SendErrorResponse *)mud->msg;
    string s = m->message();
    m->has_message() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_SendErrorResponse_set_message(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.SendErrorResponse");
    ::zippylog::request_processor::SendErrorResponse *m = (::zippylog::request_processor::SendErrorResponse *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_message();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_message(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_SendErrorResponse_has_message(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.SendErrorResponse");
    ::zippylog::request_processor::SendErrorResponse *m = (::zippylog::request_processor::SendErrorResponse *)mud->msg;
    lua_pushboolean(L, m->has_message());
    return 1;
}

static const struct luaL_Reg ForwardSubscribeKeepalive_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg ForwardSubscribeKeepalive_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_has_id},
    {"clear_subscription", lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_clear_subscription},
    {"get_subscription", lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_get_subscription},
    {"set_subscription", lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_set_subscription},
    {"has_subscription", lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_has_subscription},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.ForwardSubscribeKeepalive");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, ForwardSubscribeKeepalive_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.ForwardSubscribeKeepalive", ForwardSubscribeKeepalive_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_pushcopy(lua_State *L, const ::zippylog::request_processor::ForwardSubscribeKeepalive &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::ForwardSubscribeKeepalive(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.ForwardSubscribeKeepalive");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_pushreference(lua_State *L, ::zippylog::request_processor::ForwardSubscribeKeepalive *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.ForwardSubscribeKeepalive");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::ForwardSubscribeKeepalive();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.ForwardSubscribeKeepalive");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::ForwardSubscribeKeepalive * msg = new ::zippylog::request_processor::ForwardSubscribeKeepalive();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.ForwardSubscribeKeepalive");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ForwardSubscribeKeepalive");
    ::zippylog::request_processor::ForwardSubscribeKeepalive *m = (::zippylog::request_processor::ForwardSubscribeKeepalive *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ForwardSubscribeKeepalive");
    ::zippylog::request_processor::ForwardSubscribeKeepalive *m = (::zippylog::request_processor::ForwardSubscribeKeepalive *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ForwardSubscribeKeepalive");
    ::zippylog::request_processor::ForwardSubscribeKeepalive *m = (::zippylog::request_processor::ForwardSubscribeKeepalive *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ForwardSubscribeKeepalive");
    ::zippylog::request_processor::ForwardSubscribeKeepalive *m = (::zippylog::request_processor::ForwardSubscribeKeepalive *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ForwardSubscribeKeepalive");
    ::zippylog::request_processor::ForwardSubscribeKeepalive *m = (::zippylog::request_processor::ForwardSubscribeKeepalive *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ForwardSubscribeKeepalive");
    ::zippylog::request_processor::ForwardSubscribeKeepalive *m = (::zippylog::request_processor::ForwardSubscribeKeepalive *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ForwardSubscribeKeepalive");
    ::zippylog::request_processor::ForwardSubscribeKeepalive *m = (::zippylog::request_processor::ForwardSubscribeKeepalive *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

int lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_clear_subscription(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ForwardSubscribeKeepalive");
    ::zippylog::request_processor::ForwardSubscribeKeepalive *m = (::zippylog::request_processor::ForwardSubscribeKeepalive *)mud->msg;
    m->clear_subscription();
    return 0;
}

int lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_get_subscription(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ForwardSubscribeKeepalive");
    ::zippylog::request_processor::ForwardSubscribeKeepalive *m = (::zippylog::request_processor::ForwardSubscribeKeepalive *)mud->msg;
    string s = m->subscription();
    m->has_subscription() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_set_subscription(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ForwardSubscribeKeepalive");
    ::zippylog::request_processor::ForwardSubscribeKeepalive *m = (::zippylog::request_processor::ForwardSubscribeKeepalive *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_subscription();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_subscription(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_ForwardSubscribeKeepalive_has_subscription(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.ForwardSubscribeKeepalive");
    ::zippylog::request_processor::ForwardSubscribeKeepalive *m = (::zippylog::request_processor::ForwardSubscribeKeepalive *)mud->msg;
    lua_pushboolean(L, m->has_subscription());
    return 1;
}

static const struct luaL_Reg BeginProcessBucketInfo_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg BeginProcessBucketInfo_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_has_id},
    {"clear_path", lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_clear_path},
    {"get_path", lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_get_path},
    {"set_path", lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_set_path},
    {"has_path", lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_has_path},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessBucketInfo");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, BeginProcessBucketInfo_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.BeginProcessBucketInfo", BeginProcessBucketInfo_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_pushcopy(lua_State *L, const ::zippylog::request_processor::BeginProcessBucketInfo &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::BeginProcessBucketInfo(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessBucketInfo");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_pushreference(lua_State *L, ::zippylog::request_processor::BeginProcessBucketInfo *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessBucketInfo");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::BeginProcessBucketInfo();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessBucketInfo");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::BeginProcessBucketInfo * msg = new ::zippylog::request_processor::BeginProcessBucketInfo();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessBucketInfo");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessBucketInfo");
    ::zippylog::request_processor::BeginProcessBucketInfo *m = (::zippylog::request_processor::BeginProcessBucketInfo *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessBucketInfo");
    ::zippylog::request_processor::BeginProcessBucketInfo *m = (::zippylog::request_processor::BeginProcessBucketInfo *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessBucketInfo");
    ::zippylog::request_processor::BeginProcessBucketInfo *m = (::zippylog::request_processor::BeginProcessBucketInfo *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessBucketInfo");
    ::zippylog::request_processor::BeginProcessBucketInfo *m = (::zippylog::request_processor::BeginProcessBucketInfo *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessBucketInfo");
    ::zippylog::request_processor::BeginProcessBucketInfo *m = (::zippylog::request_processor::BeginProcessBucketInfo *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessBucketInfo");
    ::zippylog::request_processor::BeginProcessBucketInfo *m = (::zippylog::request_processor::BeginProcessBucketInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessBucketInfo");
    ::zippylog::request_processor::BeginProcessBucketInfo *m = (::zippylog::request_processor::BeginProcessBucketInfo *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

int lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_clear_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessBucketInfo");
    ::zippylog::request_processor::BeginProcessBucketInfo *m = (::zippylog::request_processor::BeginProcessBucketInfo *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_get_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessBucketInfo");
    ::zippylog::request_processor::BeginProcessBucketInfo *m = (::zippylog::request_processor::BeginProcessBucketInfo *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_set_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessBucketInfo");
    ::zippylog::request_processor::BeginProcessBucketInfo *m = (::zippylog::request_processor::BeginProcessBucketInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_BeginProcessBucketInfo_has_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessBucketInfo");
    ::zippylog::request_processor::BeginProcessBucketInfo *m = (::zippylog::request_processor::BeginProcessBucketInfo *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

static const struct luaL_Reg EndProcessBucketInfo_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg EndProcessBucketInfo_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_has_id},
    {"clear_path", lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_clear_path},
    {"get_path", lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_get_path},
    {"set_path", lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_set_path},
    {"has_path", lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_has_path},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.EndProcessBucketInfo");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, EndProcessBucketInfo_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.EndProcessBucketInfo", EndProcessBucketInfo_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_pushcopy(lua_State *L, const ::zippylog::request_processor::EndProcessBucketInfo &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::EndProcessBucketInfo(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessBucketInfo");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_pushreference(lua_State *L, ::zippylog::request_processor::EndProcessBucketInfo *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessBucketInfo");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::EndProcessBucketInfo();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessBucketInfo");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::EndProcessBucketInfo * msg = new ::zippylog::request_processor::EndProcessBucketInfo();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessBucketInfo");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessBucketInfo");
    ::zippylog::request_processor::EndProcessBucketInfo *m = (::zippylog::request_processor::EndProcessBucketInfo *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessBucketInfo");
    ::zippylog::request_processor::EndProcessBucketInfo *m = (::zippylog::request_processor::EndProcessBucketInfo *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessBucketInfo");
    ::zippylog::request_processor::EndProcessBucketInfo *m = (::zippylog::request_processor::EndProcessBucketInfo *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessBucketInfo");
    ::zippylog::request_processor::EndProcessBucketInfo *m = (::zippylog::request_processor::EndProcessBucketInfo *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessBucketInfo");
    ::zippylog::request_processor::EndProcessBucketInfo *m = (::zippylog::request_processor::EndProcessBucketInfo *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessBucketInfo");
    ::zippylog::request_processor::EndProcessBucketInfo *m = (::zippylog::request_processor::EndProcessBucketInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessBucketInfo");
    ::zippylog::request_processor::EndProcessBucketInfo *m = (::zippylog::request_processor::EndProcessBucketInfo *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

int lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_clear_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessBucketInfo");
    ::zippylog::request_processor::EndProcessBucketInfo *m = (::zippylog::request_processor::EndProcessBucketInfo *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_get_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessBucketInfo");
    ::zippylog::request_processor::EndProcessBucketInfo *m = (::zippylog::request_processor::EndProcessBucketInfo *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_set_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessBucketInfo");
    ::zippylog::request_processor::EndProcessBucketInfo *m = (::zippylog::request_processor::EndProcessBucketInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_EndProcessBucketInfo_has_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessBucketInfo");
    ::zippylog::request_processor::EndProcessBucketInfo *m = (::zippylog::request_processor::EndProcessBucketInfo *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

static const struct luaL_Reg BeginProcessStreamSetInfo_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg BeginProcessStreamSetInfo_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_has_id},
    {"clear_path", lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_clear_path},
    {"get_path", lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_get_path},
    {"set_path", lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_set_path},
    {"has_path", lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_has_path},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessStreamSetInfo");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, BeginProcessStreamSetInfo_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.BeginProcessStreamSetInfo", BeginProcessStreamSetInfo_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_pushcopy(lua_State *L, const ::zippylog::request_processor::BeginProcessStreamSetInfo &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::BeginProcessStreamSetInfo(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessStreamSetInfo");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_pushreference(lua_State *L, ::zippylog::request_processor::BeginProcessStreamSetInfo *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessStreamSetInfo");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::BeginProcessStreamSetInfo();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessStreamSetInfo");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::BeginProcessStreamSetInfo * msg = new ::zippylog::request_processor::BeginProcessStreamSetInfo();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessStreamSetInfo");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStreamSetInfo");
    ::zippylog::request_processor::BeginProcessStreamSetInfo *m = (::zippylog::request_processor::BeginProcessStreamSetInfo *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStreamSetInfo");
    ::zippylog::request_processor::BeginProcessStreamSetInfo *m = (::zippylog::request_processor::BeginProcessStreamSetInfo *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStreamSetInfo");
    ::zippylog::request_processor::BeginProcessStreamSetInfo *m = (::zippylog::request_processor::BeginProcessStreamSetInfo *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStreamSetInfo");
    ::zippylog::request_processor::BeginProcessStreamSetInfo *m = (::zippylog::request_processor::BeginProcessStreamSetInfo *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStreamSetInfo");
    ::zippylog::request_processor::BeginProcessStreamSetInfo *m = (::zippylog::request_processor::BeginProcessStreamSetInfo *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStreamSetInfo");
    ::zippylog::request_processor::BeginProcessStreamSetInfo *m = (::zippylog::request_processor::BeginProcessStreamSetInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStreamSetInfo");
    ::zippylog::request_processor::BeginProcessStreamSetInfo *m = (::zippylog::request_processor::BeginProcessStreamSetInfo *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

int lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_clear_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStreamSetInfo");
    ::zippylog::request_processor::BeginProcessStreamSetInfo *m = (::zippylog::request_processor::BeginProcessStreamSetInfo *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_get_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStreamSetInfo");
    ::zippylog::request_processor::BeginProcessStreamSetInfo *m = (::zippylog::request_processor::BeginProcessStreamSetInfo *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_set_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStreamSetInfo");
    ::zippylog::request_processor::BeginProcessStreamSetInfo *m = (::zippylog::request_processor::BeginProcessStreamSetInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_BeginProcessStreamSetInfo_has_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStreamSetInfo");
    ::zippylog::request_processor::BeginProcessStreamSetInfo *m = (::zippylog::request_processor::BeginProcessStreamSetInfo *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

static const struct luaL_Reg EndProcessStreamSetInfo_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg EndProcessStreamSetInfo_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_has_id},
    {"clear_path", lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_clear_path},
    {"get_path", lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_get_path},
    {"set_path", lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_set_path},
    {"has_path", lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_has_path},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.EndProcessStreamSetInfo");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, EndProcessStreamSetInfo_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.EndProcessStreamSetInfo", EndProcessStreamSetInfo_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_pushcopy(lua_State *L, const ::zippylog::request_processor::EndProcessStreamSetInfo &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::EndProcessStreamSetInfo(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessStreamSetInfo");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_pushreference(lua_State *L, ::zippylog::request_processor::EndProcessStreamSetInfo *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessStreamSetInfo");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::EndProcessStreamSetInfo();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessStreamSetInfo");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::EndProcessStreamSetInfo * msg = new ::zippylog::request_processor::EndProcessStreamSetInfo();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessStreamSetInfo");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStreamSetInfo");
    ::zippylog::request_processor::EndProcessStreamSetInfo *m = (::zippylog::request_processor::EndProcessStreamSetInfo *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStreamSetInfo");
    ::zippylog::request_processor::EndProcessStreamSetInfo *m = (::zippylog::request_processor::EndProcessStreamSetInfo *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStreamSetInfo");
    ::zippylog::request_processor::EndProcessStreamSetInfo *m = (::zippylog::request_processor::EndProcessStreamSetInfo *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStreamSetInfo");
    ::zippylog::request_processor::EndProcessStreamSetInfo *m = (::zippylog::request_processor::EndProcessStreamSetInfo *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStreamSetInfo");
    ::zippylog::request_processor::EndProcessStreamSetInfo *m = (::zippylog::request_processor::EndProcessStreamSetInfo *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStreamSetInfo");
    ::zippylog::request_processor::EndProcessStreamSetInfo *m = (::zippylog::request_processor::EndProcessStreamSetInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStreamSetInfo");
    ::zippylog::request_processor::EndProcessStreamSetInfo *m = (::zippylog::request_processor::EndProcessStreamSetInfo *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

int lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_clear_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStreamSetInfo");
    ::zippylog::request_processor::EndProcessStreamSetInfo *m = (::zippylog::request_processor::EndProcessStreamSetInfo *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_get_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStreamSetInfo");
    ::zippylog::request_processor::EndProcessStreamSetInfo *m = (::zippylog::request_processor::EndProcessStreamSetInfo *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_set_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStreamSetInfo");
    ::zippylog::request_processor::EndProcessStreamSetInfo *m = (::zippylog::request_processor::EndProcessStreamSetInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_EndProcessStreamSetInfo_has_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStreamSetInfo");
    ::zippylog::request_processor::EndProcessStreamSetInfo *m = (::zippylog::request_processor::EndProcessStreamSetInfo *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

static const struct luaL_Reg BeginProcessStreamInfo_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg BeginProcessStreamInfo_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_has_id},
    {"clear_path", lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_clear_path},
    {"get_path", lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_get_path},
    {"set_path", lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_set_path},
    {"has_path", lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_has_path},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessStreamInfo");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, BeginProcessStreamInfo_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.BeginProcessStreamInfo", BeginProcessStreamInfo_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_pushcopy(lua_State *L, const ::zippylog::request_processor::BeginProcessStreamInfo &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::BeginProcessStreamInfo(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessStreamInfo");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_pushreference(lua_State *L, ::zippylog::request_processor::BeginProcessStreamInfo *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessStreamInfo");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::BeginProcessStreamInfo();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessStreamInfo");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::BeginProcessStreamInfo * msg = new ::zippylog::request_processor::BeginProcessStreamInfo();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessStreamInfo");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStreamInfo");
    ::zippylog::request_processor::BeginProcessStreamInfo *m = (::zippylog::request_processor::BeginProcessStreamInfo *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStreamInfo");
    ::zippylog::request_processor::BeginProcessStreamInfo *m = (::zippylog::request_processor::BeginProcessStreamInfo *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStreamInfo");
    ::zippylog::request_processor::BeginProcessStreamInfo *m = (::zippylog::request_processor::BeginProcessStreamInfo *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStreamInfo");
    ::zippylog::request_processor::BeginProcessStreamInfo *m = (::zippylog::request_processor::BeginProcessStreamInfo *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStreamInfo");
    ::zippylog::request_processor::BeginProcessStreamInfo *m = (::zippylog::request_processor::BeginProcessStreamInfo *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStreamInfo");
    ::zippylog::request_processor::BeginProcessStreamInfo *m = (::zippylog::request_processor::BeginProcessStreamInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStreamInfo");
    ::zippylog::request_processor::BeginProcessStreamInfo *m = (::zippylog::request_processor::BeginProcessStreamInfo *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

int lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_clear_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStreamInfo");
    ::zippylog::request_processor::BeginProcessStreamInfo *m = (::zippylog::request_processor::BeginProcessStreamInfo *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_get_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStreamInfo");
    ::zippylog::request_processor::BeginProcessStreamInfo *m = (::zippylog::request_processor::BeginProcessStreamInfo *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_set_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStreamInfo");
    ::zippylog::request_processor::BeginProcessStreamInfo *m = (::zippylog::request_processor::BeginProcessStreamInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_BeginProcessStreamInfo_has_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessStreamInfo");
    ::zippylog::request_processor::BeginProcessStreamInfo *m = (::zippylog::request_processor::BeginProcessStreamInfo *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

static const struct luaL_Reg EndProcessStreamInfo_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg EndProcessStreamInfo_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_has_id},
    {"clear_path", lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_clear_path},
    {"get_path", lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_get_path},
    {"set_path", lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_set_path},
    {"has_path", lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_has_path},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.EndProcessStreamInfo");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, EndProcessStreamInfo_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.EndProcessStreamInfo", EndProcessStreamInfo_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_pushcopy(lua_State *L, const ::zippylog::request_processor::EndProcessStreamInfo &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::EndProcessStreamInfo(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessStreamInfo");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_pushreference(lua_State *L, ::zippylog::request_processor::EndProcessStreamInfo *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessStreamInfo");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::EndProcessStreamInfo();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessStreamInfo");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::EndProcessStreamInfo * msg = new ::zippylog::request_processor::EndProcessStreamInfo();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessStreamInfo");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStreamInfo");
    ::zippylog::request_processor::EndProcessStreamInfo *m = (::zippylog::request_processor::EndProcessStreamInfo *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStreamInfo");
    ::zippylog::request_processor::EndProcessStreamInfo *m = (::zippylog::request_processor::EndProcessStreamInfo *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStreamInfo");
    ::zippylog::request_processor::EndProcessStreamInfo *m = (::zippylog::request_processor::EndProcessStreamInfo *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStreamInfo");
    ::zippylog::request_processor::EndProcessStreamInfo *m = (::zippylog::request_processor::EndProcessStreamInfo *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStreamInfo");
    ::zippylog::request_processor::EndProcessStreamInfo *m = (::zippylog::request_processor::EndProcessStreamInfo *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStreamInfo");
    ::zippylog::request_processor::EndProcessStreamInfo *m = (::zippylog::request_processor::EndProcessStreamInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStreamInfo");
    ::zippylog::request_processor::EndProcessStreamInfo *m = (::zippylog::request_processor::EndProcessStreamInfo *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

int lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_clear_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStreamInfo");
    ::zippylog::request_processor::EndProcessStreamInfo *m = (::zippylog::request_processor::EndProcessStreamInfo *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_get_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStreamInfo");
    ::zippylog::request_processor::EndProcessStreamInfo *m = (::zippylog::request_processor::EndProcessStreamInfo *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_set_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStreamInfo");
    ::zippylog::request_processor::EndProcessStreamInfo *m = (::zippylog::request_processor::EndProcessStreamInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_EndProcessStreamInfo_has_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessStreamInfo");
    ::zippylog::request_processor::EndProcessStreamInfo *m = (::zippylog::request_processor::EndProcessStreamInfo *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

static const struct luaL_Reg BeginProcessWriteEnvelope_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_BeginProcessWriteEnvelope_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_BeginProcessWriteEnvelope_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg BeginProcessWriteEnvelope_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_BeginProcessWriteEnvelope_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_BeginProcessWriteEnvelope_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_BeginProcessWriteEnvelope_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_BeginProcessWriteEnvelope_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_BeginProcessWriteEnvelope_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_BeginProcessWriteEnvelope_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_BeginProcessWriteEnvelope_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_BeginProcessWriteEnvelope_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessWriteEnvelope");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, BeginProcessWriteEnvelope_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.BeginProcessWriteEnvelope", BeginProcessWriteEnvelope_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_BeginProcessWriteEnvelope_pushcopy(lua_State *L, const ::zippylog::request_processor::BeginProcessWriteEnvelope &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::BeginProcessWriteEnvelope(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessWriteEnvelope");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_BeginProcessWriteEnvelope_pushreference(lua_State *L, ::zippylog::request_processor::BeginProcessWriteEnvelope *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessWriteEnvelope");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_BeginProcessWriteEnvelope_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::BeginProcessWriteEnvelope();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessWriteEnvelope");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_BeginProcessWriteEnvelope_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::BeginProcessWriteEnvelope * msg = new ::zippylog::request_processor::BeginProcessWriteEnvelope();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.BeginProcessWriteEnvelope");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_BeginProcessWriteEnvelope_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessWriteEnvelope");
    ::zippylog::request_processor::BeginProcessWriteEnvelope *m = (::zippylog::request_processor::BeginProcessWriteEnvelope *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_BeginProcessWriteEnvelope_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessWriteEnvelope");
    ::zippylog::request_processor::BeginProcessWriteEnvelope *m = (::zippylog::request_processor::BeginProcessWriteEnvelope *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_BeginProcessWriteEnvelope_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessWriteEnvelope");
    ::zippylog::request_processor::BeginProcessWriteEnvelope *m = (::zippylog::request_processor::BeginProcessWriteEnvelope *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_BeginProcessWriteEnvelope_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessWriteEnvelope");
    ::zippylog::request_processor::BeginProcessWriteEnvelope *m = (::zippylog::request_processor::BeginProcessWriteEnvelope *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_BeginProcessWriteEnvelope_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessWriteEnvelope");
    ::zippylog::request_processor::BeginProcessWriteEnvelope *m = (::zippylog::request_processor::BeginProcessWriteEnvelope *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_BeginProcessWriteEnvelope_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessWriteEnvelope");
    ::zippylog::request_processor::BeginProcessWriteEnvelope *m = (::zippylog::request_processor::BeginProcessWriteEnvelope *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_BeginProcessWriteEnvelope_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.BeginProcessWriteEnvelope");
    ::zippylog::request_processor::BeginProcessWriteEnvelope *m = (::zippylog::request_processor::BeginProcessWriteEnvelope *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg EndProcessWriteEnvelope_functions [] = {
    {"new", lua_protobuf_zippylog_request_processor_EndProcessWriteEnvelope_new},
    {"parsefromstring", lua_protobuf_zippylog_request_processor_EndProcessWriteEnvelope_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg EndProcessWriteEnvelope_methods [] = {
    {"serialized", lua_protobuf_zippylog_request_processor_EndProcessWriteEnvelope_serialized},
    {"clear", lua_protobuf_zippylog_request_processor_EndProcessWriteEnvelope_clear},
    {"__gc", lua_protobuf_zippylog_request_processor_EndProcessWriteEnvelope_gc},
    {"clear_id", lua_protobuf_zippylog_request_processor_EndProcessWriteEnvelope_clear_id},
    {"get_id", lua_protobuf_zippylog_request_processor_EndProcessWriteEnvelope_get_id},
    {"set_id", lua_protobuf_zippylog_request_processor_EndProcessWriteEnvelope_set_id},
    {"has_id", lua_protobuf_zippylog_request_processor_EndProcessWriteEnvelope_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_request_processor_EndProcessWriteEnvelope_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.request_processor.EndProcessWriteEnvelope");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, EndProcessWriteEnvelope_methods);
    luaL_register(L, "protobuf.zippylog.request_processor.EndProcessWriteEnvelope", EndProcessWriteEnvelope_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_request_processor_EndProcessWriteEnvelope_pushcopy(lua_State *L, const ::zippylog::request_processor::EndProcessWriteEnvelope &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::EndProcessWriteEnvelope(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessWriteEnvelope");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_request_processor_EndProcessWriteEnvelope_pushreference(lua_State *L, ::zippylog::request_processor::EndProcessWriteEnvelope *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessWriteEnvelope");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_request_processor_EndProcessWriteEnvelope_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::request_processor::EndProcessWriteEnvelope();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessWriteEnvelope");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_request_processor_EndProcessWriteEnvelope_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::request_processor::EndProcessWriteEnvelope * msg = new ::zippylog::request_processor::EndProcessWriteEnvelope();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.request_processor.EndProcessWriteEnvelope");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_request_processor_EndProcessWriteEnvelope_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessWriteEnvelope");
    ::zippylog::request_processor::EndProcessWriteEnvelope *m = (::zippylog::request_processor::EndProcessWriteEnvelope *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_request_processor_EndProcessWriteEnvelope_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessWriteEnvelope");
    ::zippylog::request_processor::EndProcessWriteEnvelope *m = (::zippylog::request_processor::EndProcessWriteEnvelope *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_request_processor_EndProcessWriteEnvelope_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessWriteEnvelope");
    ::zippylog::request_processor::EndProcessWriteEnvelope *m = (::zippylog::request_processor::EndProcessWriteEnvelope *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_request_processor_EndProcessWriteEnvelope_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessWriteEnvelope");
    ::zippylog::request_processor::EndProcessWriteEnvelope *m = (::zippylog::request_processor::EndProcessWriteEnvelope *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_request_processor_EndProcessWriteEnvelope_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessWriteEnvelope");
    ::zippylog::request_processor::EndProcessWriteEnvelope *m = (::zippylog::request_processor::EndProcessWriteEnvelope *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_request_processor_EndProcessWriteEnvelope_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessWriteEnvelope");
    ::zippylog::request_processor::EndProcessWriteEnvelope *m = (::zippylog::request_processor::EndProcessWriteEnvelope *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_request_processor_EndProcessWriteEnvelope_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.request_processor.EndProcessWriteEnvelope");
    ::zippylog::request_processor::EndProcessWriteEnvelope *m = (::zippylog::request_processor::EndProcessWriteEnvelope *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}
