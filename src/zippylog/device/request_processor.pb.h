// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zippylog/device/request_processor.proto

#ifndef PROTOBUF_zippylog_2fdevice_2frequest_5fprocessor_2eproto__INCLUDED
#define PROTOBUF_zippylog_2fdevice_2frequest_5fprocessor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <zippylog/envelope.hpp>
// @@protoc_insertion_point(includes)

namespace zippylog {
namespace device {
namespace request_processor {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
void protobuf_AssignDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
void protobuf_ShutdownFile_zippylog_2fdevice_2frequest_5fprocessor_2eproto();

class Create;
class Destroy;
class RunStart;
class RunStop;
class FailReceiveMessage;
class ReceiveEmptyMessage;
class UnknownMessageVersion;
class UnknownRequestType;
class EnvelopeParseFailure;
class EmptyEnvelope;
class InvalidMessageEnumeration;
class BeginProcessStoreInfo;
class EndProcessStoreInfo;
class ReceiveInvalidGet;
class GetInvalidStream;
class GetInvalidOffset;
class BeginProcessGet;
class EndProcessGet;
class SendErrorResponse;
class ForwardSubscribeKeepalive;

// ===================================================================

class Create : public ::google::protobuf::Message {
 public:
  Create();
  virtual ~Create();
  
  Create(const Create& from);
  
  inline Create& operator=(const Create& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Create& default_instance();
  
  void Swap(Create* other);
  
  // implements Message ----------------------------------------------
  
  Create* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Create& from);
  void MergeFrom(const Create& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 60;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.request_processor.Create)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Create* default_instance_;
};
// -------------------------------------------------------------------

class Destroy : public ::google::protobuf::Message {
 public:
  Destroy();
  virtual ~Destroy();
  
  Destroy(const Destroy& from);
  
  inline Destroy& operator=(const Destroy& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Destroy& default_instance();
  
  void Swap(Destroy* other);
  
  // implements Message ----------------------------------------------
  
  Destroy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Destroy& from);
  void MergeFrom(const Destroy& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 61;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.request_processor.Destroy)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Destroy* default_instance_;
};
// -------------------------------------------------------------------

class RunStart : public ::google::protobuf::Message {
 public:
  RunStart();
  virtual ~RunStart();
  
  RunStart(const RunStart& from);
  
  inline RunStart& operator=(const RunStart& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RunStart& default_instance();
  
  void Swap(RunStart* other);
  
  // implements Message ----------------------------------------------
  
  RunStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunStart& from);
  void MergeFrom(const RunStart& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 62;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.request_processor.RunStart)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RunStart* default_instance_;
};
// -------------------------------------------------------------------

class RunStop : public ::google::protobuf::Message {
 public:
  RunStop();
  virtual ~RunStop();
  
  RunStop(const RunStop& from);
  
  inline RunStop& operator=(const RunStop& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RunStop& default_instance();
  
  void Swap(RunStop* other);
  
  // implements Message ----------------------------------------------
  
  RunStop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunStop& from);
  void MergeFrom(const RunStop& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 63;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.request_processor.RunStop)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RunStop* default_instance_;
};
// -------------------------------------------------------------------

class FailReceiveMessage : public ::google::protobuf::Message {
 public:
  FailReceiveMessage();
  virtual ~FailReceiveMessage();
  
  FailReceiveMessage(const FailReceiveMessage& from);
  
  inline FailReceiveMessage& operator=(const FailReceiveMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FailReceiveMessage& default_instance();
  
  void Swap(FailReceiveMessage* other);
  
  // implements Message ----------------------------------------------
  
  FailReceiveMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FailReceiveMessage& from);
  void MergeFrom(const FailReceiveMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 64;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.request_processor.FailReceiveMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FailReceiveMessage* default_instance_;
};
// -------------------------------------------------------------------

class ReceiveEmptyMessage : public ::google::protobuf::Message {
 public:
  ReceiveEmptyMessage();
  virtual ~ReceiveEmptyMessage();
  
  ReceiveEmptyMessage(const ReceiveEmptyMessage& from);
  
  inline ReceiveEmptyMessage& operator=(const ReceiveEmptyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReceiveEmptyMessage& default_instance();
  
  void Swap(ReceiveEmptyMessage* other);
  
  // implements Message ----------------------------------------------
  
  ReceiveEmptyMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReceiveEmptyMessage& from);
  void MergeFrom(const ReceiveEmptyMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 65;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.request_processor.ReceiveEmptyMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ReceiveEmptyMessage* default_instance_;
};
// -------------------------------------------------------------------

class UnknownMessageVersion : public ::google::protobuf::Message {
 public:
  UnknownMessageVersion();
  virtual ~UnknownMessageVersion();
  
  UnknownMessageVersion(const UnknownMessageVersion& from);
  
  inline UnknownMessageVersion& operator=(const UnknownMessageVersion& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnknownMessageVersion& default_instance();
  
  void Swap(UnknownMessageVersion* other);
  
  // implements Message ----------------------------------------------
  
  UnknownMessageVersion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnknownMessageVersion& from);
  void MergeFrom(const UnknownMessageVersion& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  // optional uint32 version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 66;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.request_processor.UnknownMessageVersion)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UnknownMessageVersion* default_instance_;
};
// -------------------------------------------------------------------

class UnknownRequestType : public ::google::protobuf::Message {
 public:
  UnknownRequestType();
  virtual ~UnknownRequestType();
  
  UnknownRequestType(const UnknownRequestType& from);
  
  inline UnknownRequestType& operator=(const UnknownRequestType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnknownRequestType& default_instance();
  
  void Swap(UnknownRequestType* other);
  
  // implements Message ----------------------------------------------
  
  UnknownRequestType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnknownRequestType& from);
  void MergeFrom(const UnknownRequestType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  // optional uint32 enumeration = 2;
  inline bool has_enumeration() const;
  inline void clear_enumeration();
  static const int kEnumerationFieldNumber = 2;
  inline ::google::protobuf::uint32 enumeration() const;
  inline void set_enumeration(::google::protobuf::uint32 value);
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 67;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.request_processor.UnknownRequestType)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  ::google::protobuf::uint32 enumeration_;
  friend void  protobuf_AddDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UnknownRequestType* default_instance_;
};
// -------------------------------------------------------------------

class EnvelopeParseFailure : public ::google::protobuf::Message {
 public:
  EnvelopeParseFailure();
  virtual ~EnvelopeParseFailure();
  
  EnvelopeParseFailure(const EnvelopeParseFailure& from);
  
  inline EnvelopeParseFailure& operator=(const EnvelopeParseFailure& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnvelopeParseFailure& default_instance();
  
  void Swap(EnvelopeParseFailure* other);
  
  // implements Message ----------------------------------------------
  
  EnvelopeParseFailure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnvelopeParseFailure& from);
  void MergeFrom(const EnvelopeParseFailure& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  // optional bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 68;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.request_processor.EnvelopeParseFailure)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  ::std::string* data_;
  static const ::std::string _default_data_;
  friend void  protobuf_AddDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static EnvelopeParseFailure* default_instance_;
};
// -------------------------------------------------------------------

class EmptyEnvelope : public ::google::protobuf::Message {
 public:
  EmptyEnvelope();
  virtual ~EmptyEnvelope();
  
  EmptyEnvelope(const EmptyEnvelope& from);
  
  inline EmptyEnvelope& operator=(const EmptyEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmptyEnvelope& default_instance();
  
  void Swap(EmptyEnvelope* other);
  
  // implements Message ----------------------------------------------
  
  EmptyEnvelope* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmptyEnvelope& from);
  void MergeFrom(const EmptyEnvelope& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 69;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.request_processor.EmptyEnvelope)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static EmptyEnvelope* default_instance_;
};
// -------------------------------------------------------------------

class InvalidMessageEnumeration : public ::google::protobuf::Message {
 public:
  InvalidMessageEnumeration();
  virtual ~InvalidMessageEnumeration();
  
  InvalidMessageEnumeration(const InvalidMessageEnumeration& from);
  
  inline InvalidMessageEnumeration& operator=(const InvalidMessageEnumeration& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InvalidMessageEnumeration& default_instance();
  
  void Swap(InvalidMessageEnumeration* other);
  
  // implements Message ----------------------------------------------
  
  InvalidMessageEnumeration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InvalidMessageEnumeration& from);
  void MergeFrom(const InvalidMessageEnumeration& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 70;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.request_processor.InvalidMessageEnumeration)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static InvalidMessageEnumeration* default_instance_;
};
// -------------------------------------------------------------------

class BeginProcessStoreInfo : public ::google::protobuf::Message {
 public:
  BeginProcessStoreInfo();
  virtual ~BeginProcessStoreInfo();
  
  BeginProcessStoreInfo(const BeginProcessStoreInfo& from);
  
  inline BeginProcessStoreInfo& operator=(const BeginProcessStoreInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BeginProcessStoreInfo& default_instance();
  
  void Swap(BeginProcessStoreInfo* other);
  
  // implements Message ----------------------------------------------
  
  BeginProcessStoreInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeginProcessStoreInfo& from);
  void MergeFrom(const BeginProcessStoreInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 71;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.request_processor.BeginProcessStoreInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BeginProcessStoreInfo* default_instance_;
};
// -------------------------------------------------------------------

class EndProcessStoreInfo : public ::google::protobuf::Message {
 public:
  EndProcessStoreInfo();
  virtual ~EndProcessStoreInfo();
  
  EndProcessStoreInfo(const EndProcessStoreInfo& from);
  
  inline EndProcessStoreInfo& operator=(const EndProcessStoreInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EndProcessStoreInfo& default_instance();
  
  void Swap(EndProcessStoreInfo* other);
  
  // implements Message ----------------------------------------------
  
  EndProcessStoreInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EndProcessStoreInfo& from);
  void MergeFrom(const EndProcessStoreInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 72;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.request_processor.EndProcessStoreInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static EndProcessStoreInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReceiveInvalidGet : public ::google::protobuf::Message {
 public:
  ReceiveInvalidGet();
  virtual ~ReceiveInvalidGet();
  
  ReceiveInvalidGet(const ReceiveInvalidGet& from);
  
  inline ReceiveInvalidGet& operator=(const ReceiveInvalidGet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReceiveInvalidGet& default_instance();
  
  void Swap(ReceiveInvalidGet* other);
  
  // implements Message ----------------------------------------------
  
  ReceiveInvalidGet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReceiveInvalidGet& from);
  void MergeFrom(const ReceiveInvalidGet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 73;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.request_processor.ReceiveInvalidGet)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ReceiveInvalidGet* default_instance_;
};
// -------------------------------------------------------------------

class GetInvalidStream : public ::google::protobuf::Message {
 public:
  GetInvalidStream();
  virtual ~GetInvalidStream();
  
  GetInvalidStream(const GetInvalidStream& from);
  
  inline GetInvalidStream& operator=(const GetInvalidStream& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInvalidStream& default_instance();
  
  void Swap(GetInvalidStream* other);
  
  // implements Message ----------------------------------------------
  
  GetInvalidStream* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetInvalidStream& from);
  void MergeFrom(const GetInvalidStream& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 74;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.request_processor.GetInvalidStream)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetInvalidStream* default_instance_;
};
// -------------------------------------------------------------------

class GetInvalidOffset : public ::google::protobuf::Message {
 public:
  GetInvalidOffset();
  virtual ~GetInvalidOffset();
  
  GetInvalidOffset(const GetInvalidOffset& from);
  
  inline GetInvalidOffset& operator=(const GetInvalidOffset& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInvalidOffset& default_instance();
  
  void Swap(GetInvalidOffset* other);
  
  // implements Message ----------------------------------------------
  
  GetInvalidOffset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetInvalidOffset& from);
  void MergeFrom(const GetInvalidOffset& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 75;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.request_processor.GetInvalidOffset)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetInvalidOffset* default_instance_;
};
// -------------------------------------------------------------------

class BeginProcessGet : public ::google::protobuf::Message {
 public:
  BeginProcessGet();
  virtual ~BeginProcessGet();
  
  BeginProcessGet(const BeginProcessGet& from);
  
  inline BeginProcessGet& operator=(const BeginProcessGet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BeginProcessGet& default_instance();
  
  void Swap(BeginProcessGet* other);
  
  // implements Message ----------------------------------------------
  
  BeginProcessGet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeginProcessGet& from);
  void MergeFrom(const BeginProcessGet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 76;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.request_processor.BeginProcessGet)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BeginProcessGet* default_instance_;
};
// -------------------------------------------------------------------

class EndProcessGet : public ::google::protobuf::Message {
 public:
  EndProcessGet();
  virtual ~EndProcessGet();
  
  EndProcessGet(const EndProcessGet& from);
  
  inline EndProcessGet& operator=(const EndProcessGet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EndProcessGet& default_instance();
  
  void Swap(EndProcessGet* other);
  
  // implements Message ----------------------------------------------
  
  EndProcessGet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EndProcessGet& from);
  void MergeFrom(const EndProcessGet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 77;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.request_processor.EndProcessGet)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static EndProcessGet* default_instance_;
};
// -------------------------------------------------------------------

class SendErrorResponse : public ::google::protobuf::Message {
 public:
  SendErrorResponse();
  virtual ~SendErrorResponse();
  
  SendErrorResponse(const SendErrorResponse& from);
  
  inline SendErrorResponse& operator=(const SendErrorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendErrorResponse& default_instance();
  
  void Swap(SendErrorResponse* other);
  
  // implements Message ----------------------------------------------
  
  SendErrorResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendErrorResponse& from);
  void MergeFrom(const SendErrorResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 78;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.request_processor.SendErrorResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  ::std::string* message_;
  static const ::std::string _default_message_;
  friend void  protobuf_AddDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SendErrorResponse* default_instance_;
};
// -------------------------------------------------------------------

class ForwardSubscribeKeepalive : public ::google::protobuf::Message {
 public:
  ForwardSubscribeKeepalive();
  virtual ~ForwardSubscribeKeepalive();
  
  ForwardSubscribeKeepalive(const ForwardSubscribeKeepalive& from);
  
  inline ForwardSubscribeKeepalive& operator=(const ForwardSubscribeKeepalive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardSubscribeKeepalive& default_instance();
  
  void Swap(ForwardSubscribeKeepalive* other);
  
  // implements Message ----------------------------------------------
  
  ForwardSubscribeKeepalive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForwardSubscribeKeepalive& from);
  void MergeFrom(const ForwardSubscribeKeepalive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  // optional bytes subscription = 2;
  inline bool has_subscription() const;
  inline void clear_subscription();
  static const int kSubscriptionFieldNumber = 2;
  inline const ::std::string& subscription() const;
  inline void set_subscription(const ::std::string& value);
  inline void set_subscription(const char* value);
  inline void set_subscription(const void* value, size_t size);
  inline ::std::string* mutable_subscription();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 79;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.request_processor.ForwardSubscribeKeepalive)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  ::std::string* subscription_;
  static const ::std::string _default_subscription_;
  friend void  protobuf_AddDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2frequest_5fprocessor_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ForwardSubscribeKeepalive* default_instance_;
};
// ===================================================================


// ===================================================================

// Create

// optional bytes id = 1;
inline bool Create::has_id() const {
  return _has_bit(0);
}
inline void Create::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Create::id() const {
  return *id_;
}
inline void Create::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Create::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Create::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Create::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// Destroy

// optional bytes id = 1;
inline bool Destroy::has_id() const {
  return _has_bit(0);
}
inline void Destroy::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Destroy::id() const {
  return *id_;
}
inline void Destroy::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Destroy::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Destroy::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Destroy::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// RunStart

// optional bytes id = 1;
inline bool RunStart::has_id() const {
  return _has_bit(0);
}
inline void RunStart::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& RunStart::id() const {
  return *id_;
}
inline void RunStart::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RunStart::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RunStart::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RunStart::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// RunStop

// optional bytes id = 2;
inline bool RunStop::has_id() const {
  return _has_bit(0);
}
inline void RunStop::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& RunStop::id() const {
  return *id_;
}
inline void RunStop::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RunStop::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RunStop::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RunStop::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// FailReceiveMessage

// optional bytes id = 1;
inline bool FailReceiveMessage::has_id() const {
  return _has_bit(0);
}
inline void FailReceiveMessage::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& FailReceiveMessage::id() const {
  return *id_;
}
inline void FailReceiveMessage::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void FailReceiveMessage::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void FailReceiveMessage::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FailReceiveMessage::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// ReceiveEmptyMessage

// optional bytes id = 1;
inline bool ReceiveEmptyMessage::has_id() const {
  return _has_bit(0);
}
inline void ReceiveEmptyMessage::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ReceiveEmptyMessage::id() const {
  return *id_;
}
inline void ReceiveEmptyMessage::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ReceiveEmptyMessage::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ReceiveEmptyMessage::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReceiveEmptyMessage::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// UnknownMessageVersion

// optional bytes id = 1;
inline bool UnknownMessageVersion::has_id() const {
  return _has_bit(0);
}
inline void UnknownMessageVersion::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& UnknownMessageVersion::id() const {
  return *id_;
}
inline void UnknownMessageVersion::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void UnknownMessageVersion::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void UnknownMessageVersion::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnknownMessageVersion::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// optional uint32 version = 2;
inline bool UnknownMessageVersion::has_version() const {
  return _has_bit(1);
}
inline void UnknownMessageVersion::clear_version() {
  version_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 UnknownMessageVersion::version() const {
  return version_;
}
inline void UnknownMessageVersion::set_version(::google::protobuf::uint32 value) {
  _set_bit(1);
  version_ = value;
}

// -------------------------------------------------------------------

// UnknownRequestType

// optional bytes id = 1;
inline bool UnknownRequestType::has_id() const {
  return _has_bit(0);
}
inline void UnknownRequestType::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& UnknownRequestType::id() const {
  return *id_;
}
inline void UnknownRequestType::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void UnknownRequestType::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void UnknownRequestType::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnknownRequestType::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// optional uint32 enumeration = 2;
inline bool UnknownRequestType::has_enumeration() const {
  return _has_bit(1);
}
inline void UnknownRequestType::clear_enumeration() {
  enumeration_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 UnknownRequestType::enumeration() const {
  return enumeration_;
}
inline void UnknownRequestType::set_enumeration(::google::protobuf::uint32 value) {
  _set_bit(1);
  enumeration_ = value;
}

// -------------------------------------------------------------------

// EnvelopeParseFailure

// optional bytes id = 1;
inline bool EnvelopeParseFailure::has_id() const {
  return _has_bit(0);
}
inline void EnvelopeParseFailure::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& EnvelopeParseFailure::id() const {
  return *id_;
}
inline void EnvelopeParseFailure::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void EnvelopeParseFailure::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void EnvelopeParseFailure::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EnvelopeParseFailure::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// optional bytes data = 2;
inline bool EnvelopeParseFailure::has_data() const {
  return _has_bit(1);
}
inline void EnvelopeParseFailure::clear_data() {
  if (data_ != &_default_data_) {
    data_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& EnvelopeParseFailure::data() const {
  return *data_;
}
inline void EnvelopeParseFailure::set_data(const ::std::string& value) {
  _set_bit(1);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void EnvelopeParseFailure::set_data(const char* value) {
  _set_bit(1);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void EnvelopeParseFailure::set_data(const void* value, size_t size) {
  _set_bit(1);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EnvelopeParseFailure::mutable_data() {
  _set_bit(1);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  return data_;
}

// -------------------------------------------------------------------

// EmptyEnvelope

// optional bytes id = 1;
inline bool EmptyEnvelope::has_id() const {
  return _has_bit(0);
}
inline void EmptyEnvelope::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& EmptyEnvelope::id() const {
  return *id_;
}
inline void EmptyEnvelope::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void EmptyEnvelope::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void EmptyEnvelope::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EmptyEnvelope::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// InvalidMessageEnumeration

// optional bytes id = 1;
inline bool InvalidMessageEnumeration::has_id() const {
  return _has_bit(0);
}
inline void InvalidMessageEnumeration::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& InvalidMessageEnumeration::id() const {
  return *id_;
}
inline void InvalidMessageEnumeration::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void InvalidMessageEnumeration::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void InvalidMessageEnumeration::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvalidMessageEnumeration::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// BeginProcessStoreInfo

// optional bytes id = 1;
inline bool BeginProcessStoreInfo::has_id() const {
  return _has_bit(0);
}
inline void BeginProcessStoreInfo::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& BeginProcessStoreInfo::id() const {
  return *id_;
}
inline void BeginProcessStoreInfo::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BeginProcessStoreInfo::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BeginProcessStoreInfo::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BeginProcessStoreInfo::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// EndProcessStoreInfo

// optional bytes id = 1;
inline bool EndProcessStoreInfo::has_id() const {
  return _has_bit(0);
}
inline void EndProcessStoreInfo::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& EndProcessStoreInfo::id() const {
  return *id_;
}
inline void EndProcessStoreInfo::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void EndProcessStoreInfo::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void EndProcessStoreInfo::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EndProcessStoreInfo::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// ReceiveInvalidGet

// optional bytes id = 1;
inline bool ReceiveInvalidGet::has_id() const {
  return _has_bit(0);
}
inline void ReceiveInvalidGet::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ReceiveInvalidGet::id() const {
  return *id_;
}
inline void ReceiveInvalidGet::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ReceiveInvalidGet::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ReceiveInvalidGet::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReceiveInvalidGet::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// GetInvalidStream

// optional bytes id = 1;
inline bool GetInvalidStream::has_id() const {
  return _has_bit(0);
}
inline void GetInvalidStream::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GetInvalidStream::id() const {
  return *id_;
}
inline void GetInvalidStream::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void GetInvalidStream::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void GetInvalidStream::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetInvalidStream::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// GetInvalidOffset

// optional bytes id = 1;
inline bool GetInvalidOffset::has_id() const {
  return _has_bit(0);
}
inline void GetInvalidOffset::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GetInvalidOffset::id() const {
  return *id_;
}
inline void GetInvalidOffset::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void GetInvalidOffset::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void GetInvalidOffset::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetInvalidOffset::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// BeginProcessGet

// optional bytes id = 1;
inline bool BeginProcessGet::has_id() const {
  return _has_bit(0);
}
inline void BeginProcessGet::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& BeginProcessGet::id() const {
  return *id_;
}
inline void BeginProcessGet::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BeginProcessGet::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BeginProcessGet::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BeginProcessGet::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// EndProcessGet

// optional bytes id = 1;
inline bool EndProcessGet::has_id() const {
  return _has_bit(0);
}
inline void EndProcessGet::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& EndProcessGet::id() const {
  return *id_;
}
inline void EndProcessGet::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void EndProcessGet::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void EndProcessGet::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EndProcessGet::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// SendErrorResponse

// optional bytes id = 1;
inline bool SendErrorResponse::has_id() const {
  return _has_bit(0);
}
inline void SendErrorResponse::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SendErrorResponse::id() const {
  return *id_;
}
inline void SendErrorResponse::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SendErrorResponse::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SendErrorResponse::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendErrorResponse::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// optional string message = 2;
inline bool SendErrorResponse::has_message() const {
  return _has_bit(1);
}
inline void SendErrorResponse::clear_message() {
  if (message_ != &_default_message_) {
    message_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& SendErrorResponse::message() const {
  return *message_;
}
inline void SendErrorResponse::set_message(const ::std::string& value) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void SendErrorResponse::set_message(const char* value) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void SendErrorResponse::set_message(const char* value, size_t size) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendErrorResponse::mutable_message() {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  return message_;
}

// -------------------------------------------------------------------

// ForwardSubscribeKeepalive

// optional bytes id = 1;
inline bool ForwardSubscribeKeepalive::has_id() const {
  return _has_bit(0);
}
inline void ForwardSubscribeKeepalive::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ForwardSubscribeKeepalive::id() const {
  return *id_;
}
inline void ForwardSubscribeKeepalive::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ForwardSubscribeKeepalive::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ForwardSubscribeKeepalive::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForwardSubscribeKeepalive::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// optional bytes subscription = 2;
inline bool ForwardSubscribeKeepalive::has_subscription() const {
  return _has_bit(1);
}
inline void ForwardSubscribeKeepalive::clear_subscription() {
  if (subscription_ != &_default_subscription_) {
    subscription_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& ForwardSubscribeKeepalive::subscription() const {
  return *subscription_;
}
inline void ForwardSubscribeKeepalive::set_subscription(const ::std::string& value) {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void ForwardSubscribeKeepalive::set_subscription(const char* value) {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void ForwardSubscribeKeepalive::set_subscription(const void* value, size_t size) {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForwardSubscribeKeepalive::mutable_subscription() {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  return subscription_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace request_processor
}  // namespace device
}  // namespace zippylog

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zippylog_2fdevice_2frequest_5fprocessor_2eproto__INCLUDED
