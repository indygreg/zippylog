// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zippylog/device/server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zippylog {
namespace device {
namespace server {

namespace {

const ::google::protobuf::Descriptor* SubscriptionRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscriptionRecord_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SubscriptionType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_zippylog_2fdevice_2fserver_2eproto() {
  protobuf_AddDesc_zippylog_2fdevice_2fserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zippylog/device/server.proto");
  GOOGLE_CHECK(file != NULL);
  SubscriptionRecord_descriptor_ = file->message_type(0);
  static const int SubscriptionRecord_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRecord, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRecord, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRecord, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRecord, lua_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRecord, socket_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRecord, envelope_filter_namespace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRecord, envelope_filter_enumeration_namespace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRecord, envelope_filter_enumeration_type_),
  };
  SubscriptionRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscriptionRecord_descriptor_,
      SubscriptionRecord::default_instance_,
      SubscriptionRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscriptionRecord));
  SubscriptionType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zippylog_2fdevice_2fserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscriptionRecord_descriptor_, &SubscriptionRecord::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zippylog_2fdevice_2fserver_2eproto() {
  delete SubscriptionRecord::default_instance_;
  delete SubscriptionRecord_reflection_;
}

void protobuf_AddDesc_zippylog_2fdevice_2fserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034zippylog/device/server.proto\022\026zippylog"
    ".device.server\"\217\002\n\022SubscriptionRecord\022\n\n"
    "\002id\030\001 \002(\t\0226\n\004type\030\002 \002(\0162(.zippylog.devic"
    "e.server.SubscriptionType\022\014\n\004path\030\003 \003(\t\022"
    "\020\n\010lua_code\030\004 \001(\t\022\031\n\021socket_identifier\030\005"
    " \003(\t\022!\n\031envelope_filter_namespace\030\006 \003(\r\022"
    "-\n%envelope_filter_enumeration_namespace"
    "\030\007 \003(\r\022(\n envelope_filter_enumeration_ty"
    "pe\030\010 \003(\r*2\n\020SubscriptionType\022\014\n\010ENVELOPE"
    "\020\001\022\020\n\014STORE_CHANGE\020\002", 380);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zippylog/device/server.proto", &protobuf_RegisterTypes);
  SubscriptionRecord::default_instance_ = new SubscriptionRecord();
  SubscriptionRecord::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zippylog_2fdevice_2fserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zippylog_2fdevice_2fserver_2eproto {
  StaticDescriptorInitializer_zippylog_2fdevice_2fserver_2eproto() {
    protobuf_AddDesc_zippylog_2fdevice_2fserver_2eproto();
  }
} static_descriptor_initializer_zippylog_2fdevice_2fserver_2eproto_;

const ::google::protobuf::EnumDescriptor* SubscriptionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriptionType_descriptor_;
}
bool SubscriptionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SubscriptionRecord::kIdFieldNumber;
const int SubscriptionRecord::kTypeFieldNumber;
const int SubscriptionRecord::kPathFieldNumber;
const int SubscriptionRecord::kLuaCodeFieldNumber;
const int SubscriptionRecord::kSocketIdentifierFieldNumber;
const int SubscriptionRecord::kEnvelopeFilterNamespaceFieldNumber;
const int SubscriptionRecord::kEnvelopeFilterEnumerationNamespaceFieldNumber;
const int SubscriptionRecord::kEnvelopeFilterEnumerationTypeFieldNumber;
#endif  // !_MSC_VER

SubscriptionRecord::SubscriptionRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscriptionRecord::InitAsDefaultInstance() {
}

SubscriptionRecord::SubscriptionRecord(const SubscriptionRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscriptionRecord::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  lua_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscriptionRecord::~SubscriptionRecord() {
  SharedDtor();
}

void SubscriptionRecord::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (lua_code_ != &::google::protobuf::internal::kEmptyString) {
    delete lua_code_;
  }
  if (this != default_instance_) {
  }
}

void SubscriptionRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscriptionRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriptionRecord_descriptor_;
}

const SubscriptionRecord& SubscriptionRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fdevice_2fserver_2eproto();  return *default_instance_;
}

SubscriptionRecord* SubscriptionRecord::default_instance_ = NULL;

SubscriptionRecord* SubscriptionRecord::New() const {
  return new SubscriptionRecord;
}

void SubscriptionRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    type_ = 1;
    if (has_lua_code()) {
      if (lua_code_ != &::google::protobuf::internal::kEmptyString) {
        lua_code_->clear();
      }
    }
  }
  path_.Clear();
  socket_identifier_.Clear();
  envelope_filter_namespace_.Clear();
  envelope_filter_enumeration_namespace_.Clear();
  envelope_filter_enumeration_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscriptionRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required .zippylog.device.server.SubscriptionType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (zippylog::device::server::SubscriptionType_IsValid(value)) {
            set_type(static_cast< zippylog::device::server::SubscriptionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }
      
      // repeated string path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path(0).data(), this->path(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        if (input->ExpectTag(34)) goto parse_lua_code;
        break;
      }
      
      // optional string lua_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lua_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lua_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lua_code().data(), this->lua_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_socket_identifier;
        break;
      }
      
      // repeated string socket_identifier = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_socket_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_socket_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->socket_identifier(0).data(), this->socket_identifier(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_socket_identifier;
        if (input->ExpectTag(48)) goto parse_envelope_filter_namespace;
        break;
      }
      
      // repeated uint32 envelope_filter_namespace = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_envelope_filter_namespace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_envelope_filter_namespace())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_envelope_filter_namespace())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_envelope_filter_namespace;
        if (input->ExpectTag(56)) goto parse_envelope_filter_enumeration_namespace;
        break;
      }
      
      // repeated uint32 envelope_filter_enumeration_namespace = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_envelope_filter_enumeration_namespace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_envelope_filter_enumeration_namespace())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_envelope_filter_enumeration_namespace())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_envelope_filter_enumeration_namespace;
        if (input->ExpectTag(64)) goto parse_envelope_filter_enumeration_type;
        break;
      }
      
      // repeated uint32 envelope_filter_enumeration_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_envelope_filter_enumeration_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_envelope_filter_enumeration_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_envelope_filter_enumeration_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_envelope_filter_enumeration_type;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscriptionRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required .zippylog.device.server.SubscriptionType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // repeated string path = 3;
  for (int i = 0; i < this->path_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->path(i).data(), this->path(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->path(i), output);
  }
  
  // optional string lua_code = 4;
  if (has_lua_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lua_code().data(), this->lua_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->lua_code(), output);
  }
  
  // repeated string socket_identifier = 5;
  for (int i = 0; i < this->socket_identifier_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->socket_identifier(i).data(), this->socket_identifier(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->socket_identifier(i), output);
  }
  
  // repeated uint32 envelope_filter_namespace = 6;
  for (int i = 0; i < this->envelope_filter_namespace_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->envelope_filter_namespace(i), output);
  }
  
  // repeated uint32 envelope_filter_enumeration_namespace = 7;
  for (int i = 0; i < this->envelope_filter_enumeration_namespace_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->envelope_filter_enumeration_namespace(i), output);
  }
  
  // repeated uint32 envelope_filter_enumeration_type = 8;
  for (int i = 0; i < this->envelope_filter_enumeration_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->envelope_filter_enumeration_type(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscriptionRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required .zippylog.device.server.SubscriptionType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // repeated string path = 3;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path(i).data(), this->path(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->path(i), target);
  }
  
  // optional string lua_code = 4;
  if (has_lua_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lua_code().data(), this->lua_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lua_code(), target);
  }
  
  // repeated string socket_identifier = 5;
  for (int i = 0; i < this->socket_identifier_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->socket_identifier(i).data(), this->socket_identifier(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->socket_identifier(i), target);
  }
  
  // repeated uint32 envelope_filter_namespace = 6;
  for (int i = 0; i < this->envelope_filter_namespace_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->envelope_filter_namespace(i), target);
  }
  
  // repeated uint32 envelope_filter_enumeration_namespace = 7;
  for (int i = 0; i < this->envelope_filter_enumeration_namespace_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->envelope_filter_enumeration_namespace(i), target);
  }
  
  // repeated uint32 envelope_filter_enumeration_type = 8;
  for (int i = 0; i < this->envelope_filter_enumeration_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->envelope_filter_enumeration_type(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscriptionRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required .zippylog.device.server.SubscriptionType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string lua_code = 4;
    if (has_lua_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lua_code());
    }
    
  }
  // repeated string path = 3;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->path(i));
  }
  
  // repeated string socket_identifier = 5;
  total_size += 1 * this->socket_identifier_size();
  for (int i = 0; i < this->socket_identifier_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->socket_identifier(i));
  }
  
  // repeated uint32 envelope_filter_namespace = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->envelope_filter_namespace_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->envelope_filter_namespace(i));
    }
    total_size += 1 * this->envelope_filter_namespace_size() + data_size;
  }
  
  // repeated uint32 envelope_filter_enumeration_namespace = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->envelope_filter_enumeration_namespace_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->envelope_filter_enumeration_namespace(i));
    }
    total_size += 1 * this->envelope_filter_enumeration_namespace_size() + data_size;
  }
  
  // repeated uint32 envelope_filter_enumeration_type = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->envelope_filter_enumeration_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->envelope_filter_enumeration_type(i));
    }
    total_size += 1 * this->envelope_filter_enumeration_type_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscriptionRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscriptionRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscriptionRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscriptionRecord::MergeFrom(const SubscriptionRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  socket_identifier_.MergeFrom(from.socket_identifier_);
  envelope_filter_namespace_.MergeFrom(from.envelope_filter_namespace_);
  envelope_filter_enumeration_namespace_.MergeFrom(from.envelope_filter_enumeration_namespace_);
  envelope_filter_enumeration_type_.MergeFrom(from.envelope_filter_enumeration_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_lua_code()) {
      set_lua_code(from.lua_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscriptionRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionRecord::CopyFrom(const SubscriptionRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SubscriptionRecord::Swap(SubscriptionRecord* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    path_.Swap(&other->path_);
    std::swap(lua_code_, other->lua_code_);
    socket_identifier_.Swap(&other->socket_identifier_);
    envelope_filter_namespace_.Swap(&other->envelope_filter_namespace_);
    envelope_filter_enumeration_namespace_.Swap(&other->envelope_filter_enumeration_namespace_);
    envelope_filter_enumeration_type_.Swap(&other->envelope_filter_enumeration_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscriptionRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscriptionRecord_descriptor_;
  metadata.reflection = SubscriptionRecord_reflection_;
  return metadata;
}



bool SubscriptionRecord::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool SubscriptionRecord::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}
// @@protoc_insertion_point(namespace_scope)

}  // namespace server
}  // namespace device
}  // namespace zippylog

// @@protoc_insertion_point(global_scope)
