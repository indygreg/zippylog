// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zippylog/device/streamer.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zippylog {
namespace device {
namespace streamer {

namespace {

const ::google::protobuf::Descriptor* Create_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Create_reflection_ = NULL;
const ::google::protobuf::Descriptor* Destroy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Destroy_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscriptionExpired_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscriptionExpired_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiveKeepalive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiveKeepalive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscriptionRenewedFromKeepalive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscriptionRenewedFromKeepalive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RejectKeepaliveUnknownSubscription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RejectKeepaliveUnknownSubscription_reflection_ = NULL;
const ::google::protobuf::Descriptor* ErrorRenewingSubscription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrorRenewingSubscription_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_zippylog_2fdevice_2fstreamer_2eproto() {
  protobuf_AddDesc_zippylog_2fdevice_2fstreamer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zippylog/device/streamer.proto");
  GOOGLE_CHECK(file != NULL);
  Create_descriptor_ = file->message_type(0);
  static const int Create_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Create, id_),
  };
  Create_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Create_descriptor_,
      Create::default_instance_,
      Create_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Create, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Create, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Create));
  Destroy_descriptor_ = file->message_type(1);
  static const int Destroy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destroy, id_),
  };
  Destroy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Destroy_descriptor_,
      Destroy::default_instance_,
      Destroy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destroy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destroy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Destroy));
  SubscriptionExpired_descriptor_ = file->message_type(2);
  static const int SubscriptionExpired_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionExpired, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionExpired, subscription_),
  };
  SubscriptionExpired_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscriptionExpired_descriptor_,
      SubscriptionExpired::default_instance_,
      SubscriptionExpired_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionExpired, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionExpired, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscriptionExpired));
  ReceiveKeepalive_descriptor_ = file->message_type(3);
  static const int ReceiveKeepalive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveKeepalive, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveKeepalive, subscription_),
  };
  ReceiveKeepalive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiveKeepalive_descriptor_,
      ReceiveKeepalive::default_instance_,
      ReceiveKeepalive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveKeepalive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveKeepalive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiveKeepalive));
  SubscriptionRenewedFromKeepalive_descriptor_ = file->message_type(4);
  static const int SubscriptionRenewedFromKeepalive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRenewedFromKeepalive, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRenewedFromKeepalive, subscription_),
  };
  SubscriptionRenewedFromKeepalive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscriptionRenewedFromKeepalive_descriptor_,
      SubscriptionRenewedFromKeepalive::default_instance_,
      SubscriptionRenewedFromKeepalive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRenewedFromKeepalive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRenewedFromKeepalive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscriptionRenewedFromKeepalive));
  RejectKeepaliveUnknownSubscription_descriptor_ = file->message_type(5);
  static const int RejectKeepaliveUnknownSubscription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectKeepaliveUnknownSubscription, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectKeepaliveUnknownSubscription, subscription_),
  };
  RejectKeepaliveUnknownSubscription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RejectKeepaliveUnknownSubscription_descriptor_,
      RejectKeepaliveUnknownSubscription::default_instance_,
      RejectKeepaliveUnknownSubscription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectKeepaliveUnknownSubscription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectKeepaliveUnknownSubscription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RejectKeepaliveUnknownSubscription));
  ErrorRenewingSubscription_descriptor_ = file->message_type(6);
  static const int ErrorRenewingSubscription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorRenewingSubscription, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorRenewingSubscription, subscription_),
  };
  ErrorRenewingSubscription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ErrorRenewingSubscription_descriptor_,
      ErrorRenewingSubscription::default_instance_,
      ErrorRenewingSubscription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorRenewingSubscription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorRenewingSubscription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ErrorRenewingSubscription));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zippylog_2fdevice_2fstreamer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Create_descriptor_, &Create::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Destroy_descriptor_, &Destroy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscriptionExpired_descriptor_, &SubscriptionExpired::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiveKeepalive_descriptor_, &ReceiveKeepalive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscriptionRenewedFromKeepalive_descriptor_, &SubscriptionRenewedFromKeepalive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RejectKeepaliveUnknownSubscription_descriptor_, &RejectKeepaliveUnknownSubscription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ErrorRenewingSubscription_descriptor_, &ErrorRenewingSubscription::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zippylog_2fdevice_2fstreamer_2eproto() {
  delete Create::default_instance_;
  delete Create_reflection_;
  delete Destroy::default_instance_;
  delete Destroy_reflection_;
  delete SubscriptionExpired::default_instance_;
  delete SubscriptionExpired_reflection_;
  delete ReceiveKeepalive::default_instance_;
  delete ReceiveKeepalive_reflection_;
  delete SubscriptionRenewedFromKeepalive::default_instance_;
  delete SubscriptionRenewedFromKeepalive_reflection_;
  delete RejectKeepaliveUnknownSubscription::default_instance_;
  delete RejectKeepaliveUnknownSubscription_reflection_;
  delete ErrorRenewingSubscription::default_instance_;
  delete ErrorRenewingSubscription_reflection_;
}

void protobuf_AddDesc_zippylog_2fdevice_2fstreamer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036zippylog/device/streamer.proto\022\030zippyl"
    "og.device.streamer\"\024\n\006Create\022\n\n\002id\030\001 \001(\014"
    "\"\025\n\007Destroy\022\n\n\002id\030\001 \001(\014\"7\n\023SubscriptionE"
    "xpired\022\n\n\002id\030\001 \001(\014\022\024\n\014subscription\030\002 \001(\014"
    "\"4\n\020ReceiveKeepalive\022\n\n\002id\030\001 \001(\014\022\024\n\014subs"
    "cription\030\002 \001(\014\"D\n SubscriptionRenewedFro"
    "mKeepalive\022\n\n\002id\030\001 \001(\014\022\024\n\014subscription\030\002"
    " \001(\014\"F\n\"RejectKeepaliveUnknownSubscripti"
    "on\022\n\n\002id\030\001 \001(\014\022\024\n\014subscription\030\002 \001(\014\"=\n\031"
    "ErrorRenewingSubscription\022\n\n\002id\030\001 \001(\014\022\024\n"
    "\014subscription\030\002 \001(\014", 419);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zippylog/device/streamer.proto", &protobuf_RegisterTypes);
  Create::default_instance_ = new Create();
  Destroy::default_instance_ = new Destroy();
  SubscriptionExpired::default_instance_ = new SubscriptionExpired();
  ReceiveKeepalive::default_instance_ = new ReceiveKeepalive();
  SubscriptionRenewedFromKeepalive::default_instance_ = new SubscriptionRenewedFromKeepalive();
  RejectKeepaliveUnknownSubscription::default_instance_ = new RejectKeepaliveUnknownSubscription();
  ErrorRenewingSubscription::default_instance_ = new ErrorRenewingSubscription();
  Create::default_instance_->InitAsDefaultInstance();
  Destroy::default_instance_->InitAsDefaultInstance();
  SubscriptionExpired::default_instance_->InitAsDefaultInstance();
  ReceiveKeepalive::default_instance_->InitAsDefaultInstance();
  SubscriptionRenewedFromKeepalive::default_instance_->InitAsDefaultInstance();
  RejectKeepaliveUnknownSubscription::default_instance_->InitAsDefaultInstance();
  ErrorRenewingSubscription::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zippylog_2fdevice_2fstreamer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zippylog_2fdevice_2fstreamer_2eproto {
  StaticDescriptorInitializer_zippylog_2fdevice_2fstreamer_2eproto() {
    protobuf_AddDesc_zippylog_2fdevice_2fstreamer_2eproto();
  }
} static_descriptor_initializer_zippylog_2fdevice_2fstreamer_2eproto_;


// ===================================================================

const ::std::string Create::_default_id_;
#ifndef _MSC_VER
const int Create::kIdFieldNumber;
#endif  // !_MSC_VER

Create::Create()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Create::InitAsDefaultInstance() {
}

Create::Create(const Create& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Create::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Create::~Create() {
  SharedDtor();
}

void Create::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void Create::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Create::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Create_descriptor_;
}

const Create& Create::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fdevice_2fstreamer_2eproto();  return *default_instance_;
}

Create* Create::default_instance_ = NULL;

Create* Create::New() const {
  return new Create;
}

void Create::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Create::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Create::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Create::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Create* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Create*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Create::MergeFrom(const Create& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Create::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Create::CopyFrom(const Create& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Create::IsInitialized() const {
  
  return true;
}

void Create::Swap(Create* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Create::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Create_descriptor_;
  metadata.reflection = Create_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Destroy::_default_id_;
#ifndef _MSC_VER
const int Destroy::kIdFieldNumber;
#endif  // !_MSC_VER

Destroy::Destroy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Destroy::InitAsDefaultInstance() {
}

Destroy::Destroy(const Destroy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Destroy::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Destroy::~Destroy() {
  SharedDtor();
}

void Destroy::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void Destroy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Destroy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Destroy_descriptor_;
}

const Destroy& Destroy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fdevice_2fstreamer_2eproto();  return *default_instance_;
}

Destroy* Destroy::default_instance_ = NULL;

Destroy* Destroy::New() const {
  return new Destroy;
}

void Destroy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Destroy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Destroy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Destroy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Destroy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Destroy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Destroy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Destroy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Destroy::MergeFrom(const Destroy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Destroy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Destroy::CopyFrom(const Destroy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Destroy::IsInitialized() const {
  
  return true;
}

void Destroy::Swap(Destroy* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Destroy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Destroy_descriptor_;
  metadata.reflection = Destroy_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SubscriptionExpired::_default_id_;
const ::std::string SubscriptionExpired::_default_subscription_;
#ifndef _MSC_VER
const int SubscriptionExpired::kIdFieldNumber;
const int SubscriptionExpired::kSubscriptionFieldNumber;
#endif  // !_MSC_VER

SubscriptionExpired::SubscriptionExpired()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscriptionExpired::InitAsDefaultInstance() {
}

SubscriptionExpired::SubscriptionExpired(const SubscriptionExpired& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscriptionExpired::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  subscription_ = const_cast< ::std::string*>(&_default_subscription_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscriptionExpired::~SubscriptionExpired() {
  SharedDtor();
}

void SubscriptionExpired::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (subscription_ != &_default_subscription_) {
    delete subscription_;
  }
  if (this != default_instance_) {
  }
}

void SubscriptionExpired::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscriptionExpired::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriptionExpired_descriptor_;
}

const SubscriptionExpired& SubscriptionExpired::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fdevice_2fstreamer_2eproto();  return *default_instance_;
}

SubscriptionExpired* SubscriptionExpired::default_instance_ = NULL;

SubscriptionExpired* SubscriptionExpired::New() const {
  return new SubscriptionExpired;
}

void SubscriptionExpired::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (subscription_ != &_default_subscription_) {
        subscription_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscriptionExpired::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscription;
        break;
      }
      
      // optional bytes subscription = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_subscription()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscriptionExpired::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  // optional bytes subscription = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->subscription(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscriptionExpired::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  // optional bytes subscription = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->subscription(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscriptionExpired::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
    // optional bytes subscription = 2;
    if (has_subscription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->subscription());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscriptionExpired::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscriptionExpired* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscriptionExpired*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscriptionExpired::MergeFrom(const SubscriptionExpired& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_subscription(from.subscription());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscriptionExpired::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionExpired::CopyFrom(const SubscriptionExpired& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionExpired::IsInitialized() const {
  
  return true;
}

void SubscriptionExpired::Swap(SubscriptionExpired* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(subscription_, other->subscription_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscriptionExpired::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscriptionExpired_descriptor_;
  metadata.reflection = SubscriptionExpired_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ReceiveKeepalive::_default_id_;
const ::std::string ReceiveKeepalive::_default_subscription_;
#ifndef _MSC_VER
const int ReceiveKeepalive::kIdFieldNumber;
const int ReceiveKeepalive::kSubscriptionFieldNumber;
#endif  // !_MSC_VER

ReceiveKeepalive::ReceiveKeepalive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiveKeepalive::InitAsDefaultInstance() {
}

ReceiveKeepalive::ReceiveKeepalive(const ReceiveKeepalive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiveKeepalive::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  subscription_ = const_cast< ::std::string*>(&_default_subscription_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiveKeepalive::~ReceiveKeepalive() {
  SharedDtor();
}

void ReceiveKeepalive::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (subscription_ != &_default_subscription_) {
    delete subscription_;
  }
  if (this != default_instance_) {
  }
}

void ReceiveKeepalive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiveKeepalive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiveKeepalive_descriptor_;
}

const ReceiveKeepalive& ReceiveKeepalive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fdevice_2fstreamer_2eproto();  return *default_instance_;
}

ReceiveKeepalive* ReceiveKeepalive::default_instance_ = NULL;

ReceiveKeepalive* ReceiveKeepalive::New() const {
  return new ReceiveKeepalive;
}

void ReceiveKeepalive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (subscription_ != &_default_subscription_) {
        subscription_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiveKeepalive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscription;
        break;
      }
      
      // optional bytes subscription = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_subscription()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiveKeepalive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  // optional bytes subscription = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->subscription(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiveKeepalive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  // optional bytes subscription = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->subscription(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiveKeepalive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
    // optional bytes subscription = 2;
    if (has_subscription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->subscription());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveKeepalive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiveKeepalive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiveKeepalive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiveKeepalive::MergeFrom(const ReceiveKeepalive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_subscription(from.subscription());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiveKeepalive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveKeepalive::CopyFrom(const ReceiveKeepalive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveKeepalive::IsInitialized() const {
  
  return true;
}

void ReceiveKeepalive::Swap(ReceiveKeepalive* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(subscription_, other->subscription_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiveKeepalive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiveKeepalive_descriptor_;
  metadata.reflection = ReceiveKeepalive_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SubscriptionRenewedFromKeepalive::_default_id_;
const ::std::string SubscriptionRenewedFromKeepalive::_default_subscription_;
#ifndef _MSC_VER
const int SubscriptionRenewedFromKeepalive::kIdFieldNumber;
const int SubscriptionRenewedFromKeepalive::kSubscriptionFieldNumber;
#endif  // !_MSC_VER

SubscriptionRenewedFromKeepalive::SubscriptionRenewedFromKeepalive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscriptionRenewedFromKeepalive::InitAsDefaultInstance() {
}

SubscriptionRenewedFromKeepalive::SubscriptionRenewedFromKeepalive(const SubscriptionRenewedFromKeepalive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscriptionRenewedFromKeepalive::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  subscription_ = const_cast< ::std::string*>(&_default_subscription_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscriptionRenewedFromKeepalive::~SubscriptionRenewedFromKeepalive() {
  SharedDtor();
}

void SubscriptionRenewedFromKeepalive::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (subscription_ != &_default_subscription_) {
    delete subscription_;
  }
  if (this != default_instance_) {
  }
}

void SubscriptionRenewedFromKeepalive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscriptionRenewedFromKeepalive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriptionRenewedFromKeepalive_descriptor_;
}

const SubscriptionRenewedFromKeepalive& SubscriptionRenewedFromKeepalive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fdevice_2fstreamer_2eproto();  return *default_instance_;
}

SubscriptionRenewedFromKeepalive* SubscriptionRenewedFromKeepalive::default_instance_ = NULL;

SubscriptionRenewedFromKeepalive* SubscriptionRenewedFromKeepalive::New() const {
  return new SubscriptionRenewedFromKeepalive;
}

void SubscriptionRenewedFromKeepalive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (subscription_ != &_default_subscription_) {
        subscription_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscriptionRenewedFromKeepalive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscription;
        break;
      }
      
      // optional bytes subscription = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_subscription()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscriptionRenewedFromKeepalive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  // optional bytes subscription = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->subscription(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscriptionRenewedFromKeepalive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  // optional bytes subscription = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->subscription(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscriptionRenewedFromKeepalive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
    // optional bytes subscription = 2;
    if (has_subscription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->subscription());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscriptionRenewedFromKeepalive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscriptionRenewedFromKeepalive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscriptionRenewedFromKeepalive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscriptionRenewedFromKeepalive::MergeFrom(const SubscriptionRenewedFromKeepalive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_subscription(from.subscription());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscriptionRenewedFromKeepalive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionRenewedFromKeepalive::CopyFrom(const SubscriptionRenewedFromKeepalive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionRenewedFromKeepalive::IsInitialized() const {
  
  return true;
}

void SubscriptionRenewedFromKeepalive::Swap(SubscriptionRenewedFromKeepalive* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(subscription_, other->subscription_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscriptionRenewedFromKeepalive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscriptionRenewedFromKeepalive_descriptor_;
  metadata.reflection = SubscriptionRenewedFromKeepalive_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RejectKeepaliveUnknownSubscription::_default_id_;
const ::std::string RejectKeepaliveUnknownSubscription::_default_subscription_;
#ifndef _MSC_VER
const int RejectKeepaliveUnknownSubscription::kIdFieldNumber;
const int RejectKeepaliveUnknownSubscription::kSubscriptionFieldNumber;
#endif  // !_MSC_VER

RejectKeepaliveUnknownSubscription::RejectKeepaliveUnknownSubscription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RejectKeepaliveUnknownSubscription::InitAsDefaultInstance() {
}

RejectKeepaliveUnknownSubscription::RejectKeepaliveUnknownSubscription(const RejectKeepaliveUnknownSubscription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RejectKeepaliveUnknownSubscription::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  subscription_ = const_cast< ::std::string*>(&_default_subscription_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RejectKeepaliveUnknownSubscription::~RejectKeepaliveUnknownSubscription() {
  SharedDtor();
}

void RejectKeepaliveUnknownSubscription::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (subscription_ != &_default_subscription_) {
    delete subscription_;
  }
  if (this != default_instance_) {
  }
}

void RejectKeepaliveUnknownSubscription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RejectKeepaliveUnknownSubscription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RejectKeepaliveUnknownSubscription_descriptor_;
}

const RejectKeepaliveUnknownSubscription& RejectKeepaliveUnknownSubscription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fdevice_2fstreamer_2eproto();  return *default_instance_;
}

RejectKeepaliveUnknownSubscription* RejectKeepaliveUnknownSubscription::default_instance_ = NULL;

RejectKeepaliveUnknownSubscription* RejectKeepaliveUnknownSubscription::New() const {
  return new RejectKeepaliveUnknownSubscription;
}

void RejectKeepaliveUnknownSubscription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (subscription_ != &_default_subscription_) {
        subscription_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RejectKeepaliveUnknownSubscription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscription;
        break;
      }
      
      // optional bytes subscription = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_subscription()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RejectKeepaliveUnknownSubscription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  // optional bytes subscription = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->subscription(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RejectKeepaliveUnknownSubscription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  // optional bytes subscription = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->subscription(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RejectKeepaliveUnknownSubscription::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
    // optional bytes subscription = 2;
    if (has_subscription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->subscription());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RejectKeepaliveUnknownSubscription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RejectKeepaliveUnknownSubscription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RejectKeepaliveUnknownSubscription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RejectKeepaliveUnknownSubscription::MergeFrom(const RejectKeepaliveUnknownSubscription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_subscription(from.subscription());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RejectKeepaliveUnknownSubscription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RejectKeepaliveUnknownSubscription::CopyFrom(const RejectKeepaliveUnknownSubscription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejectKeepaliveUnknownSubscription::IsInitialized() const {
  
  return true;
}

void RejectKeepaliveUnknownSubscription::Swap(RejectKeepaliveUnknownSubscription* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(subscription_, other->subscription_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RejectKeepaliveUnknownSubscription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RejectKeepaliveUnknownSubscription_descriptor_;
  metadata.reflection = RejectKeepaliveUnknownSubscription_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ErrorRenewingSubscription::_default_id_;
const ::std::string ErrorRenewingSubscription::_default_subscription_;
#ifndef _MSC_VER
const int ErrorRenewingSubscription::kIdFieldNumber;
const int ErrorRenewingSubscription::kSubscriptionFieldNumber;
#endif  // !_MSC_VER

ErrorRenewingSubscription::ErrorRenewingSubscription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ErrorRenewingSubscription::InitAsDefaultInstance() {
}

ErrorRenewingSubscription::ErrorRenewingSubscription(const ErrorRenewingSubscription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ErrorRenewingSubscription::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  subscription_ = const_cast< ::std::string*>(&_default_subscription_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrorRenewingSubscription::~ErrorRenewingSubscription() {
  SharedDtor();
}

void ErrorRenewingSubscription::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (subscription_ != &_default_subscription_) {
    delete subscription_;
  }
  if (this != default_instance_) {
  }
}

void ErrorRenewingSubscription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorRenewingSubscription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorRenewingSubscription_descriptor_;
}

const ErrorRenewingSubscription& ErrorRenewingSubscription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fdevice_2fstreamer_2eproto();  return *default_instance_;
}

ErrorRenewingSubscription* ErrorRenewingSubscription::default_instance_ = NULL;

ErrorRenewingSubscription* ErrorRenewingSubscription::New() const {
  return new ErrorRenewingSubscription;
}

void ErrorRenewingSubscription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (subscription_ != &_default_subscription_) {
        subscription_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ErrorRenewingSubscription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscription;
        break;
      }
      
      // optional bytes subscription = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_subscription()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ErrorRenewingSubscription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  // optional bytes subscription = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->subscription(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ErrorRenewingSubscription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  // optional bytes subscription = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->subscription(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ErrorRenewingSubscription::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
    // optional bytes subscription = 2;
    if (has_subscription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->subscription());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorRenewingSubscription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ErrorRenewingSubscription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ErrorRenewingSubscription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ErrorRenewingSubscription::MergeFrom(const ErrorRenewingSubscription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_subscription(from.subscription());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ErrorRenewingSubscription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorRenewingSubscription::CopyFrom(const ErrorRenewingSubscription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorRenewingSubscription::IsInitialized() const {
  
  return true;
}

void ErrorRenewingSubscription::Swap(ErrorRenewingSubscription* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(subscription_, other->subscription_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ErrorRenewingSubscription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrorRenewingSubscription_descriptor_;
  metadata.reflection = ErrorRenewingSubscription_reflection_;
  return metadata;
}



bool Create::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool Create::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool Destroy::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool Destroy::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool SubscriptionExpired::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool SubscriptionExpired::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool ReceiveKeepalive::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool ReceiveKeepalive::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool SubscriptionRenewedFromKeepalive::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool SubscriptionRenewedFromKeepalive::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool RejectKeepaliveUnknownSubscription::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool RejectKeepaliveUnknownSubscription::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool ErrorRenewingSubscription::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool ErrorRenewingSubscription::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}
// @@protoc_insertion_point(namespace_scope)

}  // namespace streamer
}  // namespace device
}  // namespace zippylog

// @@protoc_insertion_point(global_scope)
