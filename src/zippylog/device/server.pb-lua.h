// Generated by the lua-protobuf compiler.
// You shouldn't be editing this file manually
//
// source proto file: zippylog/device/server.proto

#ifndef LUA_PROTOBUF_zippylog_device_server_H
#define LUA_PROTOBUF_zippylog_device_server_H

#include "lua-protobuf.h"
#include <zippylog/device/server.pb.h>

#ifdef __cplusplus
extern "C" {
#endif

#include <lua.h>

// register all messages in this package to a Lua state
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_open(lua_State *L);

// Message SubscriptionRecord
// registers the message type with Lua
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_open(lua_State *L);


// push a copy of the message to the Lua stack
// caller is free to use original message however she wants, but changes will not
// be reflected in Lua and vice-verse
LUA_PROTOBUF_EXPORT bool lua_protobuf_zippylog_device_server_SubscriptionRecord_pushcopy(lua_State *L, const ::zippylog::device::server::SubscriptionRecord &msg);

// push a reference of the message to the Lua stack
// the 3rd and 4th arguments define a callback that can be invoked just before Lua
// garbage collects the message. If the 3rd argument is NULL, Lua will *NOT* free
// memory. If the second argument points to a function, that function is called when
// Lua garbage collects the object. The function is sent a pointer to the message being
// collected and the 4th argument to this function. If the function returns true,
// Lua will free the memory. If false (0), Lua will not free the memory.
LUA_PROTOBUF_EXPORT bool lua_protobuf_zippylog_device_server_SubscriptionRecord_pushreference(lua_State *L, ::zippylog::device::server::SubscriptionRecord *msg, lua_protobuf_gc_callback callback, void *data);


// The following functions are called by Lua. Many people will not need them,
// but they are exported for those that do.


// constructor called from Lua
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_new(lua_State *L);

// obtain instance from a serialized string
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_parsefromstring(lua_State *L);

// garbage collects message instance in Lua
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_gc(lua_State *L);

// obtain serialized representation of instance
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_serialized(lua_State *L);

// clear all fields in the message
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_clear(lua_State *L);

// required string id = 1
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_id(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_get_id(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_set_id(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_has_id(lua_State *L);

// required enum type = 2
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_type(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_get_type(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_set_type(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_has_type(lua_State *L);

// repeated string path = 3
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_path(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_get_path(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_set_path(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_size_path(lua_State *L);

// optional string lua_code = 4
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_lua_code(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_get_lua_code(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_set_lua_code(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_has_lua_code(lua_State *L);

// repeated string socket_identifier = 5
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_socket_identifier(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_get_socket_identifier(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_set_socket_identifier(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_size_socket_identifier(lua_State *L);

// repeated uint32 envelope_filter_namespace = 6
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_envelope_filter_namespace(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_get_envelope_filter_namespace(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_set_envelope_filter_namespace(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_size_envelope_filter_namespace(lua_State *L);

// repeated uint32 envelope_filter_enumeration_namespace = 7
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_envelope_filter_enumeration_namespace(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_get_envelope_filter_enumeration_namespace(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_set_envelope_filter_enumeration_namespace(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_size_envelope_filter_enumeration_namespace(lua_State *L);

// repeated uint32 envelope_filter_enumeration_type = 8
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_envelope_filter_enumeration_type(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_get_envelope_filter_enumeration_type(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_set_envelope_filter_enumeration_type(lua_State *L);
LUA_PROTOBUF_EXPORT int lua_protobuf_zippylog_device_server_SubscriptionRecord_size_envelope_filter_enumeration_type(lua_State *L);

// end of message SubscriptionRecord

#ifdef __cplusplus
}
#endif

#endif