// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zippylog/device/server.proto

#ifndef PROTOBUF_zippylog_2fdevice_2fserver_2eproto__INCLUDED
#define PROTOBUF_zippylog_2fdevice_2fserver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <zippylog/envelope.hpp>
// @@protoc_insertion_point(includes)

namespace zippylog {
namespace device {
namespace server {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_zippylog_2fdevice_2fserver_2eproto();
void protobuf_AssignDesc_zippylog_2fdevice_2fserver_2eproto();
void protobuf_ShutdownFile_zippylog_2fdevice_2fserver_2eproto();

class SubscriptionRecord;
class Create;
class Destroy;
class RunStart;
class RunFinish;

enum SubscriptionType {
  ENVELOPE = 1,
  STORE_CHANGE = 2
};
bool SubscriptionType_IsValid(int value);
const SubscriptionType SubscriptionType_MIN = ENVELOPE;
const SubscriptionType SubscriptionType_MAX = STORE_CHANGE;
const int SubscriptionType_ARRAYSIZE = SubscriptionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SubscriptionType_descriptor();
inline const ::std::string& SubscriptionType_Name(SubscriptionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SubscriptionType_descriptor(), value);
}
inline bool SubscriptionType_Parse(
    const ::std::string& name, SubscriptionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SubscriptionType>(
    SubscriptionType_descriptor(), name, value);
}
// ===================================================================

class SubscriptionRecord : public ::google::protobuf::Message {
 public:
  SubscriptionRecord();
  virtual ~SubscriptionRecord();
  
  SubscriptionRecord(const SubscriptionRecord& from);
  
  inline SubscriptionRecord& operator=(const SubscriptionRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscriptionRecord& default_instance();
  
  void Swap(SubscriptionRecord* other);
  
  // implements Message ----------------------------------------------
  
  SubscriptionRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscriptionRecord& from);
  void MergeFrom(const SubscriptionRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // required .zippylog.device.server.SubscriptionType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline zippylog::device::server::SubscriptionType type() const;
  inline void set_type(zippylog::device::server::SubscriptionType value);
  
  // repeated string path = 3;
  inline int path_size() const;
  inline void clear_path();
  static const int kPathFieldNumber = 3;
  inline const ::std::string& path(int index) const;
  inline ::std::string* mutable_path(int index);
  inline void set_path(int index, const ::std::string& value);
  inline void set_path(int index, const char* value);
  inline void set_path(int index, const char* value, size_t size);
  inline ::std::string* add_path();
  inline void add_path(const ::std::string& value);
  inline void add_path(const char* value);
  inline void add_path(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& path() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_path();
  
  // optional string lua_code = 4;
  inline bool has_lua_code() const;
  inline void clear_lua_code();
  static const int kLuaCodeFieldNumber = 4;
  inline const ::std::string& lua_code() const;
  inline void set_lua_code(const ::std::string& value);
  inline void set_lua_code(const char* value);
  inline void set_lua_code(const char* value, size_t size);
  inline ::std::string* mutable_lua_code();
  inline ::std::string* release_lua_code();
  
  // repeated string socket_identifier = 5;
  inline int socket_identifier_size() const;
  inline void clear_socket_identifier();
  static const int kSocketIdentifierFieldNumber = 5;
  inline const ::std::string& socket_identifier(int index) const;
  inline ::std::string* mutable_socket_identifier(int index);
  inline void set_socket_identifier(int index, const ::std::string& value);
  inline void set_socket_identifier(int index, const char* value);
  inline void set_socket_identifier(int index, const char* value, size_t size);
  inline ::std::string* add_socket_identifier();
  inline void add_socket_identifier(const ::std::string& value);
  inline void add_socket_identifier(const char* value);
  inline void add_socket_identifier(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& socket_identifier() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_socket_identifier();
  
  // repeated uint32 envelope_filter_namespace = 6;
  inline int envelope_filter_namespace_size() const;
  inline void clear_envelope_filter_namespace();
  static const int kEnvelopeFilterNamespaceFieldNumber = 6;
  inline ::google::protobuf::uint32 envelope_filter_namespace(int index) const;
  inline void set_envelope_filter_namespace(int index, ::google::protobuf::uint32 value);
  inline void add_envelope_filter_namespace(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      envelope_filter_namespace() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_envelope_filter_namespace();
  
  // repeated uint32 envelope_filter_enumeration_namespace = 7;
  inline int envelope_filter_enumeration_namespace_size() const;
  inline void clear_envelope_filter_enumeration_namespace();
  static const int kEnvelopeFilterEnumerationNamespaceFieldNumber = 7;
  inline ::google::protobuf::uint32 envelope_filter_enumeration_namespace(int index) const;
  inline void set_envelope_filter_enumeration_namespace(int index, ::google::protobuf::uint32 value);
  inline void add_envelope_filter_enumeration_namespace(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      envelope_filter_enumeration_namespace() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_envelope_filter_enumeration_namespace();
  
  // repeated uint32 envelope_filter_enumeration_type = 8;
  inline int envelope_filter_enumeration_type_size() const;
  inline void clear_envelope_filter_enumeration_type();
  static const int kEnvelopeFilterEnumerationTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 envelope_filter_enumeration_type(int index) const;
  inline void set_envelope_filter_enumeration_type(int index, ::google::protobuf::uint32 value);
  inline void add_envelope_filter_enumeration_type(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      envelope_filter_enumeration_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_envelope_filter_enumeration_type();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 119;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.server.SubscriptionRecord)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_lua_code();
  inline void clear_has_lua_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> path_;
  ::std::string* lua_code_;
  ::google::protobuf::RepeatedPtrField< ::std::string> socket_identifier_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > envelope_filter_namespace_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > envelope_filter_enumeration_namespace_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > envelope_filter_enumeration_type_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fdevice_2fserver_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2fserver_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2fserver_2eproto();
  
  void InitAsDefaultInstance();
  static SubscriptionRecord* default_instance_;
};
// -------------------------------------------------------------------

class Create : public ::google::protobuf::Message {
 public:
  Create();
  virtual ~Create();
  
  Create(const Create& from);
  
  inline Create& operator=(const Create& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Create& default_instance();
  
  void Swap(Create* other);
  
  // implements Message ----------------------------------------------
  
  Create* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Create& from);
  void MergeFrom(const Create& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // optional string store_path = 2;
  inline bool has_store_path() const;
  inline void clear_store_path();
  static const int kStorePathFieldNumber = 2;
  inline const ::std::string& store_path() const;
  inline void set_store_path(const ::std::string& value);
  inline void set_store_path(const char* value);
  inline void set_store_path(const char* value, size_t size);
  inline ::std::string* mutable_store_path();
  inline ::std::string* release_store_path();
  
  // repeated string listen_endpoint = 3;
  inline int listen_endpoint_size() const;
  inline void clear_listen_endpoint();
  static const int kListenEndpointFieldNumber = 3;
  inline const ::std::string& listen_endpoint(int index) const;
  inline ::std::string* mutable_listen_endpoint(int index);
  inline void set_listen_endpoint(int index, const ::std::string& value);
  inline void set_listen_endpoint(int index, const char* value);
  inline void set_listen_endpoint(int index, const char* value, size_t size);
  inline ::std::string* add_listen_endpoint();
  inline void add_listen_endpoint(const ::std::string& value);
  inline void add_listen_endpoint(const char* value);
  inline void add_listen_endpoint(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& listen_endpoint() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_listen_endpoint();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 120;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.server.Create)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_store_path();
  inline void clear_has_store_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::std::string* store_path_;
  ::google::protobuf::RepeatedPtrField< ::std::string> listen_endpoint_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fdevice_2fserver_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2fserver_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2fserver_2eproto();
  
  void InitAsDefaultInstance();
  static Create* default_instance_;
};
// -------------------------------------------------------------------

class Destroy : public ::google::protobuf::Message {
 public:
  Destroy();
  virtual ~Destroy();
  
  Destroy(const Destroy& from);
  
  inline Destroy& operator=(const Destroy& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Destroy& default_instance();
  
  void Swap(Destroy* other);
  
  // implements Message ----------------------------------------------
  
  Destroy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Destroy& from);
  void MergeFrom(const Destroy& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 121;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.server.Destroy)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fdevice_2fserver_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2fserver_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2fserver_2eproto();
  
  void InitAsDefaultInstance();
  static Destroy* default_instance_;
};
// -------------------------------------------------------------------

class RunStart : public ::google::protobuf::Message {
 public:
  RunStart();
  virtual ~RunStart();
  
  RunStart(const RunStart& from);
  
  inline RunStart& operator=(const RunStart& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RunStart& default_instance();
  
  void Swap(RunStart* other);
  
  // implements Message ----------------------------------------------
  
  RunStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunStart& from);
  void MergeFrom(const RunStart& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 122;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.server.RunStart)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fdevice_2fserver_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2fserver_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2fserver_2eproto();
  
  void InitAsDefaultInstance();
  static RunStart* default_instance_;
};
// -------------------------------------------------------------------

class RunFinish : public ::google::protobuf::Message {
 public:
  RunFinish();
  virtual ~RunFinish();
  
  RunFinish(const RunFinish& from);
  
  inline RunFinish& operator=(const RunFinish& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RunFinish& default_instance();
  
  void Swap(RunFinish* other);
  
  // implements Message ----------------------------------------------
  
  RunFinish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunFinish& from);
  void MergeFrom(const RunFinish& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 123;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.server.RunFinish)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fdevice_2fserver_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2fserver_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2fserver_2eproto();
  
  void InitAsDefaultInstance();
  static RunFinish* default_instance_;
};
// ===================================================================


// ===================================================================

// SubscriptionRecord

// required string id = 1;
inline bool SubscriptionRecord::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscriptionRecord::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscriptionRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscriptionRecord::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SubscriptionRecord::id() const {
  return *id_;
}
inline void SubscriptionRecord::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SubscriptionRecord::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SubscriptionRecord::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubscriptionRecord::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SubscriptionRecord::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .zippylog.device.server.SubscriptionType type = 2;
inline bool SubscriptionRecord::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubscriptionRecord::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubscriptionRecord::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubscriptionRecord::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline zippylog::device::server::SubscriptionType SubscriptionRecord::type() const {
  return static_cast< zippylog::device::server::SubscriptionType >(type_);
}
inline void SubscriptionRecord::set_type(zippylog::device::server::SubscriptionType value) {
  GOOGLE_DCHECK(zippylog::device::server::SubscriptionType_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated string path = 3;
inline int SubscriptionRecord::path_size() const {
  return path_.size();
}
inline void SubscriptionRecord::clear_path() {
  path_.Clear();
}
inline const ::std::string& SubscriptionRecord::path(int index) const {
  return path_.Get(index);
}
inline ::std::string* SubscriptionRecord::mutable_path(int index) {
  return path_.Mutable(index);
}
inline void SubscriptionRecord::set_path(int index, const ::std::string& value) {
  path_.Mutable(index)->assign(value);
}
inline void SubscriptionRecord::set_path(int index, const char* value) {
  path_.Mutable(index)->assign(value);
}
inline void SubscriptionRecord::set_path(int index, const char* value, size_t size) {
  path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubscriptionRecord::add_path() {
  return path_.Add();
}
inline void SubscriptionRecord::add_path(const ::std::string& value) {
  path_.Add()->assign(value);
}
inline void SubscriptionRecord::add_path(const char* value) {
  path_.Add()->assign(value);
}
inline void SubscriptionRecord::add_path(const char* value, size_t size) {
  path_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SubscriptionRecord::path() const {
  return path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SubscriptionRecord::mutable_path() {
  return &path_;
}

// optional string lua_code = 4;
inline bool SubscriptionRecord::has_lua_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SubscriptionRecord::set_has_lua_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SubscriptionRecord::clear_has_lua_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SubscriptionRecord::clear_lua_code() {
  if (lua_code_ != &::google::protobuf::internal::kEmptyString) {
    lua_code_->clear();
  }
  clear_has_lua_code();
}
inline const ::std::string& SubscriptionRecord::lua_code() const {
  return *lua_code_;
}
inline void SubscriptionRecord::set_lua_code(const ::std::string& value) {
  set_has_lua_code();
  if (lua_code_ == &::google::protobuf::internal::kEmptyString) {
    lua_code_ = new ::std::string;
  }
  lua_code_->assign(value);
}
inline void SubscriptionRecord::set_lua_code(const char* value) {
  set_has_lua_code();
  if (lua_code_ == &::google::protobuf::internal::kEmptyString) {
    lua_code_ = new ::std::string;
  }
  lua_code_->assign(value);
}
inline void SubscriptionRecord::set_lua_code(const char* value, size_t size) {
  set_has_lua_code();
  if (lua_code_ == &::google::protobuf::internal::kEmptyString) {
    lua_code_ = new ::std::string;
  }
  lua_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubscriptionRecord::mutable_lua_code() {
  set_has_lua_code();
  if (lua_code_ == &::google::protobuf::internal::kEmptyString) {
    lua_code_ = new ::std::string;
  }
  return lua_code_;
}
inline ::std::string* SubscriptionRecord::release_lua_code() {
  clear_has_lua_code();
  if (lua_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lua_code_;
    lua_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string socket_identifier = 5;
inline int SubscriptionRecord::socket_identifier_size() const {
  return socket_identifier_.size();
}
inline void SubscriptionRecord::clear_socket_identifier() {
  socket_identifier_.Clear();
}
inline const ::std::string& SubscriptionRecord::socket_identifier(int index) const {
  return socket_identifier_.Get(index);
}
inline ::std::string* SubscriptionRecord::mutable_socket_identifier(int index) {
  return socket_identifier_.Mutable(index);
}
inline void SubscriptionRecord::set_socket_identifier(int index, const ::std::string& value) {
  socket_identifier_.Mutable(index)->assign(value);
}
inline void SubscriptionRecord::set_socket_identifier(int index, const char* value) {
  socket_identifier_.Mutable(index)->assign(value);
}
inline void SubscriptionRecord::set_socket_identifier(int index, const char* value, size_t size) {
  socket_identifier_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubscriptionRecord::add_socket_identifier() {
  return socket_identifier_.Add();
}
inline void SubscriptionRecord::add_socket_identifier(const ::std::string& value) {
  socket_identifier_.Add()->assign(value);
}
inline void SubscriptionRecord::add_socket_identifier(const char* value) {
  socket_identifier_.Add()->assign(value);
}
inline void SubscriptionRecord::add_socket_identifier(const char* value, size_t size) {
  socket_identifier_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SubscriptionRecord::socket_identifier() const {
  return socket_identifier_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SubscriptionRecord::mutable_socket_identifier() {
  return &socket_identifier_;
}

// repeated uint32 envelope_filter_namespace = 6;
inline int SubscriptionRecord::envelope_filter_namespace_size() const {
  return envelope_filter_namespace_.size();
}
inline void SubscriptionRecord::clear_envelope_filter_namespace() {
  envelope_filter_namespace_.Clear();
}
inline ::google::protobuf::uint32 SubscriptionRecord::envelope_filter_namespace(int index) const {
  return envelope_filter_namespace_.Get(index);
}
inline void SubscriptionRecord::set_envelope_filter_namespace(int index, ::google::protobuf::uint32 value) {
  envelope_filter_namespace_.Set(index, value);
}
inline void SubscriptionRecord::add_envelope_filter_namespace(::google::protobuf::uint32 value) {
  envelope_filter_namespace_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SubscriptionRecord::envelope_filter_namespace() const {
  return envelope_filter_namespace_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SubscriptionRecord::mutable_envelope_filter_namespace() {
  return &envelope_filter_namespace_;
}

// repeated uint32 envelope_filter_enumeration_namespace = 7;
inline int SubscriptionRecord::envelope_filter_enumeration_namespace_size() const {
  return envelope_filter_enumeration_namespace_.size();
}
inline void SubscriptionRecord::clear_envelope_filter_enumeration_namespace() {
  envelope_filter_enumeration_namespace_.Clear();
}
inline ::google::protobuf::uint32 SubscriptionRecord::envelope_filter_enumeration_namespace(int index) const {
  return envelope_filter_enumeration_namespace_.Get(index);
}
inline void SubscriptionRecord::set_envelope_filter_enumeration_namespace(int index, ::google::protobuf::uint32 value) {
  envelope_filter_enumeration_namespace_.Set(index, value);
}
inline void SubscriptionRecord::add_envelope_filter_enumeration_namespace(::google::protobuf::uint32 value) {
  envelope_filter_enumeration_namespace_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SubscriptionRecord::envelope_filter_enumeration_namespace() const {
  return envelope_filter_enumeration_namespace_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SubscriptionRecord::mutable_envelope_filter_enumeration_namespace() {
  return &envelope_filter_enumeration_namespace_;
}

// repeated uint32 envelope_filter_enumeration_type = 8;
inline int SubscriptionRecord::envelope_filter_enumeration_type_size() const {
  return envelope_filter_enumeration_type_.size();
}
inline void SubscriptionRecord::clear_envelope_filter_enumeration_type() {
  envelope_filter_enumeration_type_.Clear();
}
inline ::google::protobuf::uint32 SubscriptionRecord::envelope_filter_enumeration_type(int index) const {
  return envelope_filter_enumeration_type_.Get(index);
}
inline void SubscriptionRecord::set_envelope_filter_enumeration_type(int index, ::google::protobuf::uint32 value) {
  envelope_filter_enumeration_type_.Set(index, value);
}
inline void SubscriptionRecord::add_envelope_filter_enumeration_type(::google::protobuf::uint32 value) {
  envelope_filter_enumeration_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SubscriptionRecord::envelope_filter_enumeration_type() const {
  return envelope_filter_enumeration_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SubscriptionRecord::mutable_envelope_filter_enumeration_type() {
  return &envelope_filter_enumeration_type_;
}

// -------------------------------------------------------------------

// Create

// required string id = 1;
inline bool Create::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Create::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Create::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Create::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Create::id() const {
  return *id_;
}
inline void Create::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Create::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Create::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Create::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Create::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string store_path = 2;
inline bool Create::has_store_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Create::set_has_store_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Create::clear_has_store_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Create::clear_store_path() {
  if (store_path_ != &::google::protobuf::internal::kEmptyString) {
    store_path_->clear();
  }
  clear_has_store_path();
}
inline const ::std::string& Create::store_path() const {
  return *store_path_;
}
inline void Create::set_store_path(const ::std::string& value) {
  set_has_store_path();
  if (store_path_ == &::google::protobuf::internal::kEmptyString) {
    store_path_ = new ::std::string;
  }
  store_path_->assign(value);
}
inline void Create::set_store_path(const char* value) {
  set_has_store_path();
  if (store_path_ == &::google::protobuf::internal::kEmptyString) {
    store_path_ = new ::std::string;
  }
  store_path_->assign(value);
}
inline void Create::set_store_path(const char* value, size_t size) {
  set_has_store_path();
  if (store_path_ == &::google::protobuf::internal::kEmptyString) {
    store_path_ = new ::std::string;
  }
  store_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Create::mutable_store_path() {
  set_has_store_path();
  if (store_path_ == &::google::protobuf::internal::kEmptyString) {
    store_path_ = new ::std::string;
  }
  return store_path_;
}
inline ::std::string* Create::release_store_path() {
  clear_has_store_path();
  if (store_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = store_path_;
    store_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string listen_endpoint = 3;
inline int Create::listen_endpoint_size() const {
  return listen_endpoint_.size();
}
inline void Create::clear_listen_endpoint() {
  listen_endpoint_.Clear();
}
inline const ::std::string& Create::listen_endpoint(int index) const {
  return listen_endpoint_.Get(index);
}
inline ::std::string* Create::mutable_listen_endpoint(int index) {
  return listen_endpoint_.Mutable(index);
}
inline void Create::set_listen_endpoint(int index, const ::std::string& value) {
  listen_endpoint_.Mutable(index)->assign(value);
}
inline void Create::set_listen_endpoint(int index, const char* value) {
  listen_endpoint_.Mutable(index)->assign(value);
}
inline void Create::set_listen_endpoint(int index, const char* value, size_t size) {
  listen_endpoint_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Create::add_listen_endpoint() {
  return listen_endpoint_.Add();
}
inline void Create::add_listen_endpoint(const ::std::string& value) {
  listen_endpoint_.Add()->assign(value);
}
inline void Create::add_listen_endpoint(const char* value) {
  listen_endpoint_.Add()->assign(value);
}
inline void Create::add_listen_endpoint(const char* value, size_t size) {
  listen_endpoint_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Create::listen_endpoint() const {
  return listen_endpoint_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Create::mutable_listen_endpoint() {
  return &listen_endpoint_;
}

// -------------------------------------------------------------------

// Destroy

// required string id = 1;
inline bool Destroy::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Destroy::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Destroy::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Destroy::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Destroy::id() const {
  return *id_;
}
inline void Destroy::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Destroy::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Destroy::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Destroy::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Destroy::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RunStart

// required string id = 1;
inline bool RunStart::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RunStart::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RunStart::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RunStart::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& RunStart::id() const {
  return *id_;
}
inline void RunStart::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RunStart::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RunStart::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RunStart::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* RunStart::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RunFinish

// required string id = 1;
inline bool RunFinish::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RunFinish::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RunFinish::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RunFinish::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& RunFinish::id() const {
  return *id_;
}
inline void RunFinish::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RunFinish::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RunFinish::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RunFinish::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* RunFinish::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace server
}  // namespace device
}  // namespace zippylog

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< zippylog::device::server::SubscriptionType>() {
  return zippylog::device::server::SubscriptionType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zippylog_2fdevice_2fserver_2eproto__INCLUDED
