// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zippylog/device/streamer.proto

#ifndef PROTOBUF_zippylog_2fdevice_2fstreamer_2eproto__INCLUDED
#define PROTOBUF_zippylog_2fdevice_2fstreamer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <zippylog/envelope.hpp>
// @@protoc_insertion_point(includes)

namespace zippylog {
namespace device {
namespace streamer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_zippylog_2fdevice_2fstreamer_2eproto();
void protobuf_AssignDesc_zippylog_2fdevice_2fstreamer_2eproto();
void protobuf_ShutdownFile_zippylog_2fdevice_2fstreamer_2eproto();

class Create;
class Destroy;
class SubscriptionExpired;
class ReceiveKeepalive;
class SubscriptionRenewedFromKeepalive;
class RejectKeepaliveUnknownSubscription;
class ErrorRenewingSubscription;

// ===================================================================

class Create : public ::google::protobuf::Message {
 public:
  Create();
  virtual ~Create();
  
  Create(const Create& from);
  
  inline Create& operator=(const Create& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Create& default_instance();
  
  void Swap(Create* other);
  
  // implements Message ----------------------------------------------
  
  Create* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Create& from);
  void MergeFrom(const Create& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 84;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.streamer.Create)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fdevice_2fstreamer_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2fstreamer_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2fstreamer_2eproto();
  
  void InitAsDefaultInstance();
  static Create* default_instance_;
};
// -------------------------------------------------------------------

class Destroy : public ::google::protobuf::Message {
 public:
  Destroy();
  virtual ~Destroy();
  
  Destroy(const Destroy& from);
  
  inline Destroy& operator=(const Destroy& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Destroy& default_instance();
  
  void Swap(Destroy* other);
  
  // implements Message ----------------------------------------------
  
  Destroy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Destroy& from);
  void MergeFrom(const Destroy& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 85;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.streamer.Destroy)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fdevice_2fstreamer_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2fstreamer_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2fstreamer_2eproto();
  
  void InitAsDefaultInstance();
  static Destroy* default_instance_;
};
// -------------------------------------------------------------------

class SubscriptionExpired : public ::google::protobuf::Message {
 public:
  SubscriptionExpired();
  virtual ~SubscriptionExpired();
  
  SubscriptionExpired(const SubscriptionExpired& from);
  
  inline SubscriptionExpired& operator=(const SubscriptionExpired& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscriptionExpired& default_instance();
  
  void Swap(SubscriptionExpired* other);
  
  // implements Message ----------------------------------------------
  
  SubscriptionExpired* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscriptionExpired& from);
  void MergeFrom(const SubscriptionExpired& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // optional bytes subscription = 2;
  inline bool has_subscription() const;
  inline void clear_subscription();
  static const int kSubscriptionFieldNumber = 2;
  inline const ::std::string& subscription() const;
  inline void set_subscription(const ::std::string& value);
  inline void set_subscription(const char* value);
  inline void set_subscription(const void* value, size_t size);
  inline ::std::string* mutable_subscription();
  inline ::std::string* release_subscription();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 86;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.streamer.SubscriptionExpired)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_subscription();
  inline void clear_has_subscription();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::std::string* subscription_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fdevice_2fstreamer_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2fstreamer_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2fstreamer_2eproto();
  
  void InitAsDefaultInstance();
  static SubscriptionExpired* default_instance_;
};
// -------------------------------------------------------------------

class ReceiveKeepalive : public ::google::protobuf::Message {
 public:
  ReceiveKeepalive();
  virtual ~ReceiveKeepalive();
  
  ReceiveKeepalive(const ReceiveKeepalive& from);
  
  inline ReceiveKeepalive& operator=(const ReceiveKeepalive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReceiveKeepalive& default_instance();
  
  void Swap(ReceiveKeepalive* other);
  
  // implements Message ----------------------------------------------
  
  ReceiveKeepalive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReceiveKeepalive& from);
  void MergeFrom(const ReceiveKeepalive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // optional bytes subscription = 2;
  inline bool has_subscription() const;
  inline void clear_subscription();
  static const int kSubscriptionFieldNumber = 2;
  inline const ::std::string& subscription() const;
  inline void set_subscription(const ::std::string& value);
  inline void set_subscription(const char* value);
  inline void set_subscription(const void* value, size_t size);
  inline ::std::string* mutable_subscription();
  inline ::std::string* release_subscription();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 87;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.streamer.ReceiveKeepalive)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_subscription();
  inline void clear_has_subscription();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::std::string* subscription_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fdevice_2fstreamer_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2fstreamer_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2fstreamer_2eproto();
  
  void InitAsDefaultInstance();
  static ReceiveKeepalive* default_instance_;
};
// -------------------------------------------------------------------

class SubscriptionRenewedFromKeepalive : public ::google::protobuf::Message {
 public:
  SubscriptionRenewedFromKeepalive();
  virtual ~SubscriptionRenewedFromKeepalive();
  
  SubscriptionRenewedFromKeepalive(const SubscriptionRenewedFromKeepalive& from);
  
  inline SubscriptionRenewedFromKeepalive& operator=(const SubscriptionRenewedFromKeepalive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscriptionRenewedFromKeepalive& default_instance();
  
  void Swap(SubscriptionRenewedFromKeepalive* other);
  
  // implements Message ----------------------------------------------
  
  SubscriptionRenewedFromKeepalive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscriptionRenewedFromKeepalive& from);
  void MergeFrom(const SubscriptionRenewedFromKeepalive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // optional bytes subscription = 2;
  inline bool has_subscription() const;
  inline void clear_subscription();
  static const int kSubscriptionFieldNumber = 2;
  inline const ::std::string& subscription() const;
  inline void set_subscription(const ::std::string& value);
  inline void set_subscription(const char* value);
  inline void set_subscription(const void* value, size_t size);
  inline ::std::string* mutable_subscription();
  inline ::std::string* release_subscription();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 88;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.streamer.SubscriptionRenewedFromKeepalive)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_subscription();
  inline void clear_has_subscription();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::std::string* subscription_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fdevice_2fstreamer_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2fstreamer_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2fstreamer_2eproto();
  
  void InitAsDefaultInstance();
  static SubscriptionRenewedFromKeepalive* default_instance_;
};
// -------------------------------------------------------------------

class RejectKeepaliveUnknownSubscription : public ::google::protobuf::Message {
 public:
  RejectKeepaliveUnknownSubscription();
  virtual ~RejectKeepaliveUnknownSubscription();
  
  RejectKeepaliveUnknownSubscription(const RejectKeepaliveUnknownSubscription& from);
  
  inline RejectKeepaliveUnknownSubscription& operator=(const RejectKeepaliveUnknownSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RejectKeepaliveUnknownSubscription& default_instance();
  
  void Swap(RejectKeepaliveUnknownSubscription* other);
  
  // implements Message ----------------------------------------------
  
  RejectKeepaliveUnknownSubscription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RejectKeepaliveUnknownSubscription& from);
  void MergeFrom(const RejectKeepaliveUnknownSubscription& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // optional bytes subscription = 2;
  inline bool has_subscription() const;
  inline void clear_subscription();
  static const int kSubscriptionFieldNumber = 2;
  inline const ::std::string& subscription() const;
  inline void set_subscription(const ::std::string& value);
  inline void set_subscription(const char* value);
  inline void set_subscription(const void* value, size_t size);
  inline ::std::string* mutable_subscription();
  inline ::std::string* release_subscription();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 89;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.streamer.RejectKeepaliveUnknownSubscription)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_subscription();
  inline void clear_has_subscription();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::std::string* subscription_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fdevice_2fstreamer_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2fstreamer_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2fstreamer_2eproto();
  
  void InitAsDefaultInstance();
  static RejectKeepaliveUnknownSubscription* default_instance_;
};
// -------------------------------------------------------------------

class ErrorRenewingSubscription : public ::google::protobuf::Message {
 public:
  ErrorRenewingSubscription();
  virtual ~ErrorRenewingSubscription();
  
  ErrorRenewingSubscription(const ErrorRenewingSubscription& from);
  
  inline ErrorRenewingSubscription& operator=(const ErrorRenewingSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorRenewingSubscription& default_instance();
  
  void Swap(ErrorRenewingSubscription* other);
  
  // implements Message ----------------------------------------------
  
  ErrorRenewingSubscription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ErrorRenewingSubscription& from);
  void MergeFrom(const ErrorRenewingSubscription& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // optional bytes subscription = 2;
  inline bool has_subscription() const;
  inline void clear_subscription();
  static const int kSubscriptionFieldNumber = 2;
  inline const ::std::string& subscription() const;
  inline void set_subscription(const ::std::string& value);
  inline void set_subscription(const char* value);
  inline void set_subscription(const void* value, size_t size);
  inline ::std::string* mutable_subscription();
  inline ::std::string* release_subscription();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 90;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.device.streamer.ErrorRenewingSubscription)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_subscription();
  inline void clear_has_subscription();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::std::string* subscription_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fdevice_2fstreamer_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fdevice_2fstreamer_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fdevice_2fstreamer_2eproto();
  
  void InitAsDefaultInstance();
  static ErrorRenewingSubscription* default_instance_;
};
// ===================================================================


// ===================================================================

// Create

// optional bytes id = 1;
inline bool Create::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Create::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Create::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Create::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Create::id() const {
  return *id_;
}
inline void Create::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Create::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Create::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Create::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Create::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Destroy

// optional bytes id = 1;
inline bool Destroy::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Destroy::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Destroy::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Destroy::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Destroy::id() const {
  return *id_;
}
inline void Destroy::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Destroy::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Destroy::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Destroy::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Destroy::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SubscriptionExpired

// optional bytes id = 1;
inline bool SubscriptionExpired::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscriptionExpired::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscriptionExpired::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscriptionExpired::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SubscriptionExpired::id() const {
  return *id_;
}
inline void SubscriptionExpired::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SubscriptionExpired::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SubscriptionExpired::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubscriptionExpired::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SubscriptionExpired::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes subscription = 2;
inline bool SubscriptionExpired::has_subscription() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubscriptionExpired::set_has_subscription() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubscriptionExpired::clear_has_subscription() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubscriptionExpired::clear_subscription() {
  if (subscription_ != &::google::protobuf::internal::kEmptyString) {
    subscription_->clear();
  }
  clear_has_subscription();
}
inline const ::std::string& SubscriptionExpired::subscription() const {
  return *subscription_;
}
inline void SubscriptionExpired::set_subscription(const ::std::string& value) {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void SubscriptionExpired::set_subscription(const char* value) {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void SubscriptionExpired::set_subscription(const void* value, size_t size) {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubscriptionExpired::mutable_subscription() {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  return subscription_;
}
inline ::std::string* SubscriptionExpired::release_subscription() {
  clear_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subscription_;
    subscription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ReceiveKeepalive

// optional bytes id = 1;
inline bool ReceiveKeepalive::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReceiveKeepalive::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReceiveKeepalive::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReceiveKeepalive::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& ReceiveKeepalive::id() const {
  return *id_;
}
inline void ReceiveKeepalive::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ReceiveKeepalive::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ReceiveKeepalive::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReceiveKeepalive::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* ReceiveKeepalive::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes subscription = 2;
inline bool ReceiveKeepalive::has_subscription() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReceiveKeepalive::set_has_subscription() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReceiveKeepalive::clear_has_subscription() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReceiveKeepalive::clear_subscription() {
  if (subscription_ != &::google::protobuf::internal::kEmptyString) {
    subscription_->clear();
  }
  clear_has_subscription();
}
inline const ::std::string& ReceiveKeepalive::subscription() const {
  return *subscription_;
}
inline void ReceiveKeepalive::set_subscription(const ::std::string& value) {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void ReceiveKeepalive::set_subscription(const char* value) {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void ReceiveKeepalive::set_subscription(const void* value, size_t size) {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReceiveKeepalive::mutable_subscription() {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  return subscription_;
}
inline ::std::string* ReceiveKeepalive::release_subscription() {
  clear_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subscription_;
    subscription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SubscriptionRenewedFromKeepalive

// optional bytes id = 1;
inline bool SubscriptionRenewedFromKeepalive::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscriptionRenewedFromKeepalive::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscriptionRenewedFromKeepalive::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscriptionRenewedFromKeepalive::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SubscriptionRenewedFromKeepalive::id() const {
  return *id_;
}
inline void SubscriptionRenewedFromKeepalive::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SubscriptionRenewedFromKeepalive::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SubscriptionRenewedFromKeepalive::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubscriptionRenewedFromKeepalive::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SubscriptionRenewedFromKeepalive::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes subscription = 2;
inline bool SubscriptionRenewedFromKeepalive::has_subscription() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubscriptionRenewedFromKeepalive::set_has_subscription() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubscriptionRenewedFromKeepalive::clear_has_subscription() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubscriptionRenewedFromKeepalive::clear_subscription() {
  if (subscription_ != &::google::protobuf::internal::kEmptyString) {
    subscription_->clear();
  }
  clear_has_subscription();
}
inline const ::std::string& SubscriptionRenewedFromKeepalive::subscription() const {
  return *subscription_;
}
inline void SubscriptionRenewedFromKeepalive::set_subscription(const ::std::string& value) {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void SubscriptionRenewedFromKeepalive::set_subscription(const char* value) {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void SubscriptionRenewedFromKeepalive::set_subscription(const void* value, size_t size) {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubscriptionRenewedFromKeepalive::mutable_subscription() {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  return subscription_;
}
inline ::std::string* SubscriptionRenewedFromKeepalive::release_subscription() {
  clear_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subscription_;
    subscription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RejectKeepaliveUnknownSubscription

// optional bytes id = 1;
inline bool RejectKeepaliveUnknownSubscription::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RejectKeepaliveUnknownSubscription::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RejectKeepaliveUnknownSubscription::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RejectKeepaliveUnknownSubscription::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& RejectKeepaliveUnknownSubscription::id() const {
  return *id_;
}
inline void RejectKeepaliveUnknownSubscription::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RejectKeepaliveUnknownSubscription::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RejectKeepaliveUnknownSubscription::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RejectKeepaliveUnknownSubscription::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* RejectKeepaliveUnknownSubscription::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes subscription = 2;
inline bool RejectKeepaliveUnknownSubscription::has_subscription() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RejectKeepaliveUnknownSubscription::set_has_subscription() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RejectKeepaliveUnknownSubscription::clear_has_subscription() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RejectKeepaliveUnknownSubscription::clear_subscription() {
  if (subscription_ != &::google::protobuf::internal::kEmptyString) {
    subscription_->clear();
  }
  clear_has_subscription();
}
inline const ::std::string& RejectKeepaliveUnknownSubscription::subscription() const {
  return *subscription_;
}
inline void RejectKeepaliveUnknownSubscription::set_subscription(const ::std::string& value) {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void RejectKeepaliveUnknownSubscription::set_subscription(const char* value) {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void RejectKeepaliveUnknownSubscription::set_subscription(const void* value, size_t size) {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RejectKeepaliveUnknownSubscription::mutable_subscription() {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  return subscription_;
}
inline ::std::string* RejectKeepaliveUnknownSubscription::release_subscription() {
  clear_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subscription_;
    subscription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ErrorRenewingSubscription

// optional bytes id = 1;
inline bool ErrorRenewingSubscription::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ErrorRenewingSubscription::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ErrorRenewingSubscription::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ErrorRenewingSubscription::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& ErrorRenewingSubscription::id() const {
  return *id_;
}
inline void ErrorRenewingSubscription::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ErrorRenewingSubscription::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ErrorRenewingSubscription::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ErrorRenewingSubscription::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* ErrorRenewingSubscription::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes subscription = 2;
inline bool ErrorRenewingSubscription::has_subscription() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ErrorRenewingSubscription::set_has_subscription() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ErrorRenewingSubscription::clear_has_subscription() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ErrorRenewingSubscription::clear_subscription() {
  if (subscription_ != &::google::protobuf::internal::kEmptyString) {
    subscription_->clear();
  }
  clear_has_subscription();
}
inline const ::std::string& ErrorRenewingSubscription::subscription() const {
  return *subscription_;
}
inline void ErrorRenewingSubscription::set_subscription(const ::std::string& value) {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void ErrorRenewingSubscription::set_subscription(const char* value) {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void ErrorRenewingSubscription::set_subscription(const void* value, size_t size) {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ErrorRenewingSubscription::mutable_subscription() {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  return subscription_;
}
inline ::std::string* ErrorRenewingSubscription::release_subscription() {
  clear_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subscription_;
    subscription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace streamer
}  // namespace device
}  // namespace zippylog

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zippylog_2fdevice_2fstreamer_2eproto__INCLUDED
