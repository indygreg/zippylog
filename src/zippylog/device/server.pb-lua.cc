// Generated by the lua-protobuf compiler
// You shouldn't edit this file manually
//
// source proto file: zippylog/device/server.proto

#include "zippylog/device/server.pb-lua.h"

#ifdef __cplusplus
extern "C" { // make sure functions treated with C naming
#endif

#include <lauxlib.h>

#ifdef __cplusplus
}
#endif

#include <string>

// this represents Lua udata for a protocol buffer message
// we record where a message came from so we can GC it properly
typedef struct msg_udata { // confuse over-simplified pretty-printer
    ::google::protobuf::Message * msg;
    bool lua_owns;
    lua_protobuf_gc_callback gc_callback;
    void * callback_data;
} msg_udata;

using ::std::string;

int lua_protobuf_zippylog_device_server_open(lua_State *L)
{
    const char *table = luaL_findtable(L, LUA_GLOBALSINDEX, "protobuf.zippylog.device.server", 1);
    if (table) {
        return luaL_error(L, "could not create parent Lua tables");
    }
    if (!lua_istable(L, -1)) {
        lua_newtable(L);
        lua_setfield(L, -2, "zippylog.device.server");
    }
    // SubscriptionType enum
    lua_newtable(L); // proxy table
    lua_newtable(L); // main table
    lua_pushnumber(L, 1);
    lua_setfield(L, -2, "ENVELOPE");
    lua_pushnumber(L, 2);
    lua_setfield(L, -2, "STORE_CHANGE");
    // define metatable on main table
    lua_newtable(L);
    lua_pushcfunction(L, lua_protobuf_enum_index);
    lua_setfield(L, -2, "__index");
    lua_setmetatable(L, -2);
    
    // define metatable on proxy table
    lua_newtable(L);
    lua_pushvalue(L, -2);
    lua_setfield(L, -2, "__index");
    lua_pushcfunction(L, lua_protobuf_enum_newindex);
    lua_setfield(L, -2, "__newindex");
    lua_remove(L, -2);
    lua_setmetatable(L, -2);
    lua_setfield(L, -2, "SubscriptionType");
    // end SubscriptionType enum
    lua_pop(L, 1);
    luaL_Reg funcs [] = { { NULL, NULL } };
    luaL_register(L, "protobuf.zippylog.device.server", funcs);
    lua_protobuf_zippylog_device_server_SubscriptionRecord_open(L);
    lua_protobuf_zippylog_device_server_Create_open(L);
    lua_protobuf_zippylog_device_server_Destroy_open(L);
    lua_protobuf_zippylog_device_server_RunStart_open(L);
    lua_protobuf_zippylog_device_server_RunFinish_open(L);
    lua_protobuf_zippylog_device_server_FlushOutputStreams_open(L);
    lua_protobuf_zippylog_device_server_ReceiveClientMessage_open(L);
    lua_protobuf_zippylog_device_server_SendClientMessage_open(L);
    return 1;
}


static const struct luaL_Reg SubscriptionRecord_functions [] = {
    {"new", lua_protobuf_zippylog_device_server_SubscriptionRecord_new},
    {"parsefromstring", lua_protobuf_zippylog_device_server_SubscriptionRecord_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg SubscriptionRecord_methods [] = {
    {"serialized", lua_protobuf_zippylog_device_server_SubscriptionRecord_serialized},
    {"clear", lua_protobuf_zippylog_device_server_SubscriptionRecord_clear},
    {"__gc", lua_protobuf_zippylog_device_server_SubscriptionRecord_gc},
    {"clear_id", lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_id},
    {"get_id", lua_protobuf_zippylog_device_server_SubscriptionRecord_get_id},
    {"set_id", lua_protobuf_zippylog_device_server_SubscriptionRecord_set_id},
    {"has_id", lua_protobuf_zippylog_device_server_SubscriptionRecord_has_id},
    {"clear_type", lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_type},
    {"get_type", lua_protobuf_zippylog_device_server_SubscriptionRecord_get_type},
    {"set_type", lua_protobuf_zippylog_device_server_SubscriptionRecord_set_type},
    {"has_type", lua_protobuf_zippylog_device_server_SubscriptionRecord_has_type},
    {"clear_path", lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_path},
    {"get_path", lua_protobuf_zippylog_device_server_SubscriptionRecord_get_path},
    {"set_path", lua_protobuf_zippylog_device_server_SubscriptionRecord_set_path},
    {"size_path", lua_protobuf_zippylog_device_server_SubscriptionRecord_size_path},
    {"clear_lua_code", lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_lua_code},
    {"get_lua_code", lua_protobuf_zippylog_device_server_SubscriptionRecord_get_lua_code},
    {"set_lua_code", lua_protobuf_zippylog_device_server_SubscriptionRecord_set_lua_code},
    {"has_lua_code", lua_protobuf_zippylog_device_server_SubscriptionRecord_has_lua_code},
    {"clear_socket_identifier", lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_socket_identifier},
    {"get_socket_identifier", lua_protobuf_zippylog_device_server_SubscriptionRecord_get_socket_identifier},
    {"set_socket_identifier", lua_protobuf_zippylog_device_server_SubscriptionRecord_set_socket_identifier},
    {"size_socket_identifier", lua_protobuf_zippylog_device_server_SubscriptionRecord_size_socket_identifier},
    {"clear_envelope_filter_namespace", lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_envelope_filter_namespace},
    {"get_envelope_filter_namespace", lua_protobuf_zippylog_device_server_SubscriptionRecord_get_envelope_filter_namespace},
    {"set_envelope_filter_namespace", lua_protobuf_zippylog_device_server_SubscriptionRecord_set_envelope_filter_namespace},
    {"size_envelope_filter_namespace", lua_protobuf_zippylog_device_server_SubscriptionRecord_size_envelope_filter_namespace},
    {"clear_envelope_filter_enumeration_namespace", lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_envelope_filter_enumeration_namespace},
    {"get_envelope_filter_enumeration_namespace", lua_protobuf_zippylog_device_server_SubscriptionRecord_get_envelope_filter_enumeration_namespace},
    {"set_envelope_filter_enumeration_namespace", lua_protobuf_zippylog_device_server_SubscriptionRecord_set_envelope_filter_enumeration_namespace},
    {"size_envelope_filter_enumeration_namespace", lua_protobuf_zippylog_device_server_SubscriptionRecord_size_envelope_filter_enumeration_namespace},
    {"clear_envelope_filter_enumeration_type", lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_envelope_filter_enumeration_type},
    {"get_envelope_filter_enumeration_type", lua_protobuf_zippylog_device_server_SubscriptionRecord_get_envelope_filter_enumeration_type},
    {"set_envelope_filter_enumeration_type", lua_protobuf_zippylog_device_server_SubscriptionRecord_set_envelope_filter_enumeration_type},
    {"size_envelope_filter_enumeration_type", lua_protobuf_zippylog_device_server_SubscriptionRecord_size_envelope_filter_enumeration_type},
    {NULL, NULL},
};

int lua_protobuf_zippylog_device_server_SubscriptionRecord_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.device.server.SubscriptionRecord");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, SubscriptionRecord_methods);
    luaL_register(L, "protobuf.zippylog.device.server.SubscriptionRecord", SubscriptionRecord_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_device_server_SubscriptionRecord_pushcopy(lua_State *L, const ::zippylog::device::server::SubscriptionRecord &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::device::server::SubscriptionRecord(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.SubscriptionRecord");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_device_server_SubscriptionRecord_pushreference(lua_State *L, ::zippylog::device::server::SubscriptionRecord *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.SubscriptionRecord");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_device_server_SubscriptionRecord_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::device::server::SubscriptionRecord();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.SubscriptionRecord");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::device::server::SubscriptionRecord * msg = new ::zippylog::device::server::SubscriptionRecord();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.SubscriptionRecord");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_device_server_SubscriptionRecord_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_device_server_SubscriptionRecord_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_device_server_SubscriptionRecord_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_type(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    m->clear_type();
    return 0;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_get_type(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    m->has_type() ? lua_pushinteger(L, m->type()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_set_type(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_type();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_type((::zippylog::device::server::SubscriptionType)i);
    return 0;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_has_type(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    lua_pushboolean(L, m->has_type());
    return 1;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_get_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->path_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->path_size());
    }
    string s = m->path(index - 1);
    lua_pushlstring(L, s.c_str(), s.size());
    return 1;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_set_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->path_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    size_t length = 0;
    const char *s = luaL_checklstring(L, 3, &length);
    if (index == current_size + 1) {
        m->add_path(s, length);
    }
    else {
        m->set_path(index-1, s, length);
    }
    return 0;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_size_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    int size = m->path_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_lua_code(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    m->clear_lua_code();
    return 0;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_get_lua_code(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    string s = m->lua_code();
    m->has_lua_code() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_set_lua_code(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_lua_code();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_lua_code(s, len);
    return 0;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_has_lua_code(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    lua_pushboolean(L, m->has_lua_code());
    return 1;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_socket_identifier(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    m->clear_socket_identifier();
    return 0;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_get_socket_identifier(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->socket_identifier_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->socket_identifier_size());
    }
    string s = m->socket_identifier(index - 1);
    lua_pushlstring(L, s.c_str(), s.size());
    return 1;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_set_socket_identifier(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->socket_identifier_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    size_t length = 0;
    const char *s = luaL_checklstring(L, 3, &length);
    if (index == current_size + 1) {
        m->add_socket_identifier(s, length);
    }
    else {
        m->set_socket_identifier(index-1, s, length);
    }
    return 0;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_size_socket_identifier(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    int size = m->socket_identifier_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_envelope_filter_namespace(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    m->clear_envelope_filter_namespace();
    return 0;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_get_envelope_filter_namespace(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->envelope_filter_namespace_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->envelope_filter_namespace_size());
    }
    lua_pushinteger(L, m->envelope_filter_namespace(index-1));
    return 1;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_set_envelope_filter_namespace(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->envelope_filter_namespace_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    lua_Integer i = lua_tointeger(L, 3);
    if (index == current_size + 1) {
        m->add_envelope_filter_namespace(i);
    }
    else {
        m->set_envelope_filter_namespace(index-1, i);
    }
    return 0;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_size_envelope_filter_namespace(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    int size = m->envelope_filter_namespace_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_envelope_filter_enumeration_namespace(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    m->clear_envelope_filter_enumeration_namespace();
    return 0;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_get_envelope_filter_enumeration_namespace(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->envelope_filter_enumeration_namespace_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->envelope_filter_enumeration_namespace_size());
    }
    lua_pushinteger(L, m->envelope_filter_enumeration_namespace(index-1));
    return 1;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_set_envelope_filter_enumeration_namespace(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->envelope_filter_enumeration_namespace_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    lua_Integer i = lua_tointeger(L, 3);
    if (index == current_size + 1) {
        m->add_envelope_filter_enumeration_namespace(i);
    }
    else {
        m->set_envelope_filter_enumeration_namespace(index-1, i);
    }
    return 0;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_size_envelope_filter_enumeration_namespace(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    int size = m->envelope_filter_enumeration_namespace_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_clear_envelope_filter_enumeration_type(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    m->clear_envelope_filter_enumeration_type();
    return 0;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_get_envelope_filter_enumeration_type(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->envelope_filter_enumeration_type_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->envelope_filter_enumeration_type_size());
    }
    lua_pushinteger(L, m->envelope_filter_enumeration_type(index-1));
    return 1;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_set_envelope_filter_enumeration_type(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->envelope_filter_enumeration_type_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    lua_Integer i = lua_tointeger(L, 3);
    if (index == current_size + 1) {
        m->add_envelope_filter_enumeration_type(i);
    }
    else {
        m->set_envelope_filter_enumeration_type(index-1, i);
    }
    return 0;
}

int lua_protobuf_zippylog_device_server_SubscriptionRecord_size_envelope_filter_enumeration_type(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SubscriptionRecord");
    ::zippylog::device::server::SubscriptionRecord *m = (::zippylog::device::server::SubscriptionRecord *)mud->msg;
    int size = m->envelope_filter_enumeration_type_size();
    lua_pushinteger(L, size);
    return 1;
}

static const struct luaL_Reg Create_functions [] = {
    {"new", lua_protobuf_zippylog_device_server_Create_new},
    {"parsefromstring", lua_protobuf_zippylog_device_server_Create_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg Create_methods [] = {
    {"serialized", lua_protobuf_zippylog_device_server_Create_serialized},
    {"clear", lua_protobuf_zippylog_device_server_Create_clear},
    {"__gc", lua_protobuf_zippylog_device_server_Create_gc},
    {"clear_id", lua_protobuf_zippylog_device_server_Create_clear_id},
    {"get_id", lua_protobuf_zippylog_device_server_Create_get_id},
    {"set_id", lua_protobuf_zippylog_device_server_Create_set_id},
    {"has_id", lua_protobuf_zippylog_device_server_Create_has_id},
    {"clear_store_path", lua_protobuf_zippylog_device_server_Create_clear_store_path},
    {"get_store_path", lua_protobuf_zippylog_device_server_Create_get_store_path},
    {"set_store_path", lua_protobuf_zippylog_device_server_Create_set_store_path},
    {"has_store_path", lua_protobuf_zippylog_device_server_Create_has_store_path},
    {"clear_listen_endpoint", lua_protobuf_zippylog_device_server_Create_clear_listen_endpoint},
    {"get_listen_endpoint", lua_protobuf_zippylog_device_server_Create_get_listen_endpoint},
    {"set_listen_endpoint", lua_protobuf_zippylog_device_server_Create_set_listen_endpoint},
    {"size_listen_endpoint", lua_protobuf_zippylog_device_server_Create_size_listen_endpoint},
    {NULL, NULL},
};

int lua_protobuf_zippylog_device_server_Create_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.device.server.Create");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, Create_methods);
    luaL_register(L, "protobuf.zippylog.device.server.Create", Create_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_device_server_Create_pushcopy(lua_State *L, const ::zippylog::device::server::Create &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::device::server::Create(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.Create");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_device_server_Create_pushreference(lua_State *L, ::zippylog::device::server::Create *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.Create");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_device_server_Create_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::device::server::Create();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.Create");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_device_server_Create_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::device::server::Create * msg = new ::zippylog::device::server::Create();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.Create");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_device_server_Create_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.Create");
    ::zippylog::device::server::Create *m = (::zippylog::device::server::Create *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_device_server_Create_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.Create");
    ::zippylog::device::server::Create *m = (::zippylog::device::server::Create *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_device_server_Create_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.Create");
    ::zippylog::device::server::Create *m = (::zippylog::device::server::Create *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_device_server_Create_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.Create");
    ::zippylog::device::server::Create *m = (::zippylog::device::server::Create *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_device_server_Create_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.Create");
    ::zippylog::device::server::Create *m = (::zippylog::device::server::Create *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_device_server_Create_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.Create");
    ::zippylog::device::server::Create *m = (::zippylog::device::server::Create *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_device_server_Create_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.Create");
    ::zippylog::device::server::Create *m = (::zippylog::device::server::Create *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

int lua_protobuf_zippylog_device_server_Create_clear_store_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.Create");
    ::zippylog::device::server::Create *m = (::zippylog::device::server::Create *)mud->msg;
    m->clear_store_path();
    return 0;
}

int lua_protobuf_zippylog_device_server_Create_get_store_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.Create");
    ::zippylog::device::server::Create *m = (::zippylog::device::server::Create *)mud->msg;
    string s = m->store_path();
    m->has_store_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_device_server_Create_set_store_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.Create");
    ::zippylog::device::server::Create *m = (::zippylog::device::server::Create *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_store_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_store_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_device_server_Create_has_store_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.Create");
    ::zippylog::device::server::Create *m = (::zippylog::device::server::Create *)mud->msg;
    lua_pushboolean(L, m->has_store_path());
    return 1;
}

int lua_protobuf_zippylog_device_server_Create_clear_listen_endpoint(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.Create");
    ::zippylog::device::server::Create *m = (::zippylog::device::server::Create *)mud->msg;
    m->clear_listen_endpoint();
    return 0;
}

int lua_protobuf_zippylog_device_server_Create_get_listen_endpoint(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.Create");
    ::zippylog::device::server::Create *m = (::zippylog::device::server::Create *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->listen_endpoint_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->listen_endpoint_size());
    }
    string s = m->listen_endpoint(index - 1);
    lua_pushlstring(L, s.c_str(), s.size());
    return 1;
}

int lua_protobuf_zippylog_device_server_Create_set_listen_endpoint(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.Create");
    ::zippylog::device::server::Create *m = (::zippylog::device::server::Create *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->listen_endpoint_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    size_t length = 0;
    const char *s = luaL_checklstring(L, 3, &length);
    if (index == current_size + 1) {
        m->add_listen_endpoint(s, length);
    }
    else {
        m->set_listen_endpoint(index-1, s, length);
    }
    return 0;
}

int lua_protobuf_zippylog_device_server_Create_size_listen_endpoint(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.Create");
    ::zippylog::device::server::Create *m = (::zippylog::device::server::Create *)mud->msg;
    int size = m->listen_endpoint_size();
    lua_pushinteger(L, size);
    return 1;
}

static const struct luaL_Reg Destroy_functions [] = {
    {"new", lua_protobuf_zippylog_device_server_Destroy_new},
    {"parsefromstring", lua_protobuf_zippylog_device_server_Destroy_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg Destroy_methods [] = {
    {"serialized", lua_protobuf_zippylog_device_server_Destroy_serialized},
    {"clear", lua_protobuf_zippylog_device_server_Destroy_clear},
    {"__gc", lua_protobuf_zippylog_device_server_Destroy_gc},
    {"clear_id", lua_protobuf_zippylog_device_server_Destroy_clear_id},
    {"get_id", lua_protobuf_zippylog_device_server_Destroy_get_id},
    {"set_id", lua_protobuf_zippylog_device_server_Destroy_set_id},
    {"has_id", lua_protobuf_zippylog_device_server_Destroy_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_device_server_Destroy_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.device.server.Destroy");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, Destroy_methods);
    luaL_register(L, "protobuf.zippylog.device.server.Destroy", Destroy_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_device_server_Destroy_pushcopy(lua_State *L, const ::zippylog::device::server::Destroy &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::device::server::Destroy(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.Destroy");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_device_server_Destroy_pushreference(lua_State *L, ::zippylog::device::server::Destroy *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.Destroy");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_device_server_Destroy_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::device::server::Destroy();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.Destroy");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_device_server_Destroy_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::device::server::Destroy * msg = new ::zippylog::device::server::Destroy();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.Destroy");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_device_server_Destroy_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.Destroy");
    ::zippylog::device::server::Destroy *m = (::zippylog::device::server::Destroy *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_device_server_Destroy_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.Destroy");
    ::zippylog::device::server::Destroy *m = (::zippylog::device::server::Destroy *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_device_server_Destroy_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.Destroy");
    ::zippylog::device::server::Destroy *m = (::zippylog::device::server::Destroy *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_device_server_Destroy_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.Destroy");
    ::zippylog::device::server::Destroy *m = (::zippylog::device::server::Destroy *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_device_server_Destroy_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.Destroy");
    ::zippylog::device::server::Destroy *m = (::zippylog::device::server::Destroy *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_device_server_Destroy_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.Destroy");
    ::zippylog::device::server::Destroy *m = (::zippylog::device::server::Destroy *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_device_server_Destroy_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.Destroy");
    ::zippylog::device::server::Destroy *m = (::zippylog::device::server::Destroy *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg RunStart_functions [] = {
    {"new", lua_protobuf_zippylog_device_server_RunStart_new},
    {"parsefromstring", lua_protobuf_zippylog_device_server_RunStart_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg RunStart_methods [] = {
    {"serialized", lua_protobuf_zippylog_device_server_RunStart_serialized},
    {"clear", lua_protobuf_zippylog_device_server_RunStart_clear},
    {"__gc", lua_protobuf_zippylog_device_server_RunStart_gc},
    {"clear_id", lua_protobuf_zippylog_device_server_RunStart_clear_id},
    {"get_id", lua_protobuf_zippylog_device_server_RunStart_get_id},
    {"set_id", lua_protobuf_zippylog_device_server_RunStart_set_id},
    {"has_id", lua_protobuf_zippylog_device_server_RunStart_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_device_server_RunStart_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.device.server.RunStart");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, RunStart_methods);
    luaL_register(L, "protobuf.zippylog.device.server.RunStart", RunStart_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_device_server_RunStart_pushcopy(lua_State *L, const ::zippylog::device::server::RunStart &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::device::server::RunStart(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.RunStart");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_device_server_RunStart_pushreference(lua_State *L, ::zippylog::device::server::RunStart *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.RunStart");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_device_server_RunStart_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::device::server::RunStart();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.RunStart");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_device_server_RunStart_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::device::server::RunStart * msg = new ::zippylog::device::server::RunStart();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.RunStart");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_device_server_RunStart_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.RunStart");
    ::zippylog::device::server::RunStart *m = (::zippylog::device::server::RunStart *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_device_server_RunStart_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.RunStart");
    ::zippylog::device::server::RunStart *m = (::zippylog::device::server::RunStart *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_device_server_RunStart_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.RunStart");
    ::zippylog::device::server::RunStart *m = (::zippylog::device::server::RunStart *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_device_server_RunStart_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.RunStart");
    ::zippylog::device::server::RunStart *m = (::zippylog::device::server::RunStart *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_device_server_RunStart_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.RunStart");
    ::zippylog::device::server::RunStart *m = (::zippylog::device::server::RunStart *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_device_server_RunStart_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.RunStart");
    ::zippylog::device::server::RunStart *m = (::zippylog::device::server::RunStart *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_device_server_RunStart_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.RunStart");
    ::zippylog::device::server::RunStart *m = (::zippylog::device::server::RunStart *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg RunFinish_functions [] = {
    {"new", lua_protobuf_zippylog_device_server_RunFinish_new},
    {"parsefromstring", lua_protobuf_zippylog_device_server_RunFinish_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg RunFinish_methods [] = {
    {"serialized", lua_protobuf_zippylog_device_server_RunFinish_serialized},
    {"clear", lua_protobuf_zippylog_device_server_RunFinish_clear},
    {"__gc", lua_protobuf_zippylog_device_server_RunFinish_gc},
    {"clear_id", lua_protobuf_zippylog_device_server_RunFinish_clear_id},
    {"get_id", lua_protobuf_zippylog_device_server_RunFinish_get_id},
    {"set_id", lua_protobuf_zippylog_device_server_RunFinish_set_id},
    {"has_id", lua_protobuf_zippylog_device_server_RunFinish_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_device_server_RunFinish_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.device.server.RunFinish");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, RunFinish_methods);
    luaL_register(L, "protobuf.zippylog.device.server.RunFinish", RunFinish_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_device_server_RunFinish_pushcopy(lua_State *L, const ::zippylog::device::server::RunFinish &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::device::server::RunFinish(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.RunFinish");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_device_server_RunFinish_pushreference(lua_State *L, ::zippylog::device::server::RunFinish *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.RunFinish");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_device_server_RunFinish_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::device::server::RunFinish();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.RunFinish");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_device_server_RunFinish_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::device::server::RunFinish * msg = new ::zippylog::device::server::RunFinish();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.RunFinish");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_device_server_RunFinish_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.RunFinish");
    ::zippylog::device::server::RunFinish *m = (::zippylog::device::server::RunFinish *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_device_server_RunFinish_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.RunFinish");
    ::zippylog::device::server::RunFinish *m = (::zippylog::device::server::RunFinish *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_device_server_RunFinish_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.RunFinish");
    ::zippylog::device::server::RunFinish *m = (::zippylog::device::server::RunFinish *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_device_server_RunFinish_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.RunFinish");
    ::zippylog::device::server::RunFinish *m = (::zippylog::device::server::RunFinish *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_device_server_RunFinish_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.RunFinish");
    ::zippylog::device::server::RunFinish *m = (::zippylog::device::server::RunFinish *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_device_server_RunFinish_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.RunFinish");
    ::zippylog::device::server::RunFinish *m = (::zippylog::device::server::RunFinish *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_device_server_RunFinish_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.RunFinish");
    ::zippylog::device::server::RunFinish *m = (::zippylog::device::server::RunFinish *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg FlushOutputStreams_functions [] = {
    {"new", lua_protobuf_zippylog_device_server_FlushOutputStreams_new},
    {"parsefromstring", lua_protobuf_zippylog_device_server_FlushOutputStreams_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg FlushOutputStreams_methods [] = {
    {"serialized", lua_protobuf_zippylog_device_server_FlushOutputStreams_serialized},
    {"clear", lua_protobuf_zippylog_device_server_FlushOutputStreams_clear},
    {"__gc", lua_protobuf_zippylog_device_server_FlushOutputStreams_gc},
    {"clear_id", lua_protobuf_zippylog_device_server_FlushOutputStreams_clear_id},
    {"get_id", lua_protobuf_zippylog_device_server_FlushOutputStreams_get_id},
    {"set_id", lua_protobuf_zippylog_device_server_FlushOutputStreams_set_id},
    {"has_id", lua_protobuf_zippylog_device_server_FlushOutputStreams_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_device_server_FlushOutputStreams_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.device.server.FlushOutputStreams");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, FlushOutputStreams_methods);
    luaL_register(L, "protobuf.zippylog.device.server.FlushOutputStreams", FlushOutputStreams_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_device_server_FlushOutputStreams_pushcopy(lua_State *L, const ::zippylog::device::server::FlushOutputStreams &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::device::server::FlushOutputStreams(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.FlushOutputStreams");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_device_server_FlushOutputStreams_pushreference(lua_State *L, ::zippylog::device::server::FlushOutputStreams *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.FlushOutputStreams");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_device_server_FlushOutputStreams_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::device::server::FlushOutputStreams();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.FlushOutputStreams");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_device_server_FlushOutputStreams_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::device::server::FlushOutputStreams * msg = new ::zippylog::device::server::FlushOutputStreams();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.FlushOutputStreams");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_device_server_FlushOutputStreams_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.FlushOutputStreams");
    ::zippylog::device::server::FlushOutputStreams *m = (::zippylog::device::server::FlushOutputStreams *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_device_server_FlushOutputStreams_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.FlushOutputStreams");
    ::zippylog::device::server::FlushOutputStreams *m = (::zippylog::device::server::FlushOutputStreams *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_device_server_FlushOutputStreams_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.FlushOutputStreams");
    ::zippylog::device::server::FlushOutputStreams *m = (::zippylog::device::server::FlushOutputStreams *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_device_server_FlushOutputStreams_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.FlushOutputStreams");
    ::zippylog::device::server::FlushOutputStreams *m = (::zippylog::device::server::FlushOutputStreams *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_device_server_FlushOutputStreams_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.FlushOutputStreams");
    ::zippylog::device::server::FlushOutputStreams *m = (::zippylog::device::server::FlushOutputStreams *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_device_server_FlushOutputStreams_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.FlushOutputStreams");
    ::zippylog::device::server::FlushOutputStreams *m = (::zippylog::device::server::FlushOutputStreams *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_device_server_FlushOutputStreams_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.FlushOutputStreams");
    ::zippylog::device::server::FlushOutputStreams *m = (::zippylog::device::server::FlushOutputStreams *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg ReceiveClientMessage_functions [] = {
    {"new", lua_protobuf_zippylog_device_server_ReceiveClientMessage_new},
    {"parsefromstring", lua_protobuf_zippylog_device_server_ReceiveClientMessage_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg ReceiveClientMessage_methods [] = {
    {"serialized", lua_protobuf_zippylog_device_server_ReceiveClientMessage_serialized},
    {"clear", lua_protobuf_zippylog_device_server_ReceiveClientMessage_clear},
    {"__gc", lua_protobuf_zippylog_device_server_ReceiveClientMessage_gc},
    {"clear_id", lua_protobuf_zippylog_device_server_ReceiveClientMessage_clear_id},
    {"get_id", lua_protobuf_zippylog_device_server_ReceiveClientMessage_get_id},
    {"set_id", lua_protobuf_zippylog_device_server_ReceiveClientMessage_set_id},
    {"has_id", lua_protobuf_zippylog_device_server_ReceiveClientMessage_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_device_server_ReceiveClientMessage_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.device.server.ReceiveClientMessage");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, ReceiveClientMessage_methods);
    luaL_register(L, "protobuf.zippylog.device.server.ReceiveClientMessage", ReceiveClientMessage_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_device_server_ReceiveClientMessage_pushcopy(lua_State *L, const ::zippylog::device::server::ReceiveClientMessage &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::device::server::ReceiveClientMessage(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.ReceiveClientMessage");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_device_server_ReceiveClientMessage_pushreference(lua_State *L, ::zippylog::device::server::ReceiveClientMessage *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.ReceiveClientMessage");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_device_server_ReceiveClientMessage_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::device::server::ReceiveClientMessage();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.ReceiveClientMessage");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_device_server_ReceiveClientMessage_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::device::server::ReceiveClientMessage * msg = new ::zippylog::device::server::ReceiveClientMessage();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.ReceiveClientMessage");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_device_server_ReceiveClientMessage_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.ReceiveClientMessage");
    ::zippylog::device::server::ReceiveClientMessage *m = (::zippylog::device::server::ReceiveClientMessage *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_device_server_ReceiveClientMessage_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.ReceiveClientMessage");
    ::zippylog::device::server::ReceiveClientMessage *m = (::zippylog::device::server::ReceiveClientMessage *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_device_server_ReceiveClientMessage_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.ReceiveClientMessage");
    ::zippylog::device::server::ReceiveClientMessage *m = (::zippylog::device::server::ReceiveClientMessage *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_device_server_ReceiveClientMessage_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.ReceiveClientMessage");
    ::zippylog::device::server::ReceiveClientMessage *m = (::zippylog::device::server::ReceiveClientMessage *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_device_server_ReceiveClientMessage_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.ReceiveClientMessage");
    ::zippylog::device::server::ReceiveClientMessage *m = (::zippylog::device::server::ReceiveClientMessage *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_device_server_ReceiveClientMessage_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.ReceiveClientMessage");
    ::zippylog::device::server::ReceiveClientMessage *m = (::zippylog::device::server::ReceiveClientMessage *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_device_server_ReceiveClientMessage_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.ReceiveClientMessage");
    ::zippylog::device::server::ReceiveClientMessage *m = (::zippylog::device::server::ReceiveClientMessage *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg SendClientMessage_functions [] = {
    {"new", lua_protobuf_zippylog_device_server_SendClientMessage_new},
    {"parsefromstring", lua_protobuf_zippylog_device_server_SendClientMessage_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg SendClientMessage_methods [] = {
    {"serialized", lua_protobuf_zippylog_device_server_SendClientMessage_serialized},
    {"clear", lua_protobuf_zippylog_device_server_SendClientMessage_clear},
    {"__gc", lua_protobuf_zippylog_device_server_SendClientMessage_gc},
    {"clear_id", lua_protobuf_zippylog_device_server_SendClientMessage_clear_id},
    {"get_id", lua_protobuf_zippylog_device_server_SendClientMessage_get_id},
    {"set_id", lua_protobuf_zippylog_device_server_SendClientMessage_set_id},
    {"has_id", lua_protobuf_zippylog_device_server_SendClientMessage_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_device_server_SendClientMessage_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.device.server.SendClientMessage");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, SendClientMessage_methods);
    luaL_register(L, "protobuf.zippylog.device.server.SendClientMessage", SendClientMessage_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_device_server_SendClientMessage_pushcopy(lua_State *L, const ::zippylog::device::server::SendClientMessage &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::device::server::SendClientMessage(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.SendClientMessage");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_device_server_SendClientMessage_pushreference(lua_State *L, ::zippylog::device::server::SendClientMessage *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.SendClientMessage");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_device_server_SendClientMessage_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::device::server::SendClientMessage();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.SendClientMessage");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_device_server_SendClientMessage_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::device::server::SendClientMessage * msg = new ::zippylog::device::server::SendClientMessage();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.device.server.SendClientMessage");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_device_server_SendClientMessage_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SendClientMessage");
    ::zippylog::device::server::SendClientMessage *m = (::zippylog::device::server::SendClientMessage *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_device_server_SendClientMessage_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SendClientMessage");
    ::zippylog::device::server::SendClientMessage *m = (::zippylog::device::server::SendClientMessage *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_device_server_SendClientMessage_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SendClientMessage");
    ::zippylog::device::server::SendClientMessage *m = (::zippylog::device::server::SendClientMessage *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_device_server_SendClientMessage_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SendClientMessage");
    ::zippylog::device::server::SendClientMessage *m = (::zippylog::device::server::SendClientMessage *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_device_server_SendClientMessage_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SendClientMessage");
    ::zippylog::device::server::SendClientMessage *m = (::zippylog::device::server::SendClientMessage *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_device_server_SendClientMessage_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SendClientMessage");
    ::zippylog::device::server::SendClientMessage *m = (::zippylog::device::server::SendClientMessage *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_device_server_SendClientMessage_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.device.server.SendClientMessage");
    ::zippylog::device::server::SendClientMessage *m = (::zippylog::device::server::SendClientMessage *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}
