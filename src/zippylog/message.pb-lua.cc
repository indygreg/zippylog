// Generated by the lua-protobuf compiler
// You shouldn't edit this file manually
//
// source proto file: zippylog/message.proto

#include "zippylog/message.pb-lua.h"

#ifdef __cplusplus
extern "C" { // make sure functions treated with C naming
#endif

#include <lauxlib.h>

#ifdef __cplusplus
}
#endif

#include <string>

// this represents Lua udata for a protocol buffer message
// we record where a message came from so we can GC it properly
typedef struct msg_udata { // confuse over-simplified pretty-printer
    ::google::protobuf::Message * msg;
    bool lua_owns;
    lua_protobuf_gc_callback gc_callback;
    void * callback_data;
} msg_udata;

using ::std::string;

int lua_protobuf_zippylog_message_open(lua_State *L)
{
    const char *table = luaL_findtable(L, LUA_GLOBALSINDEX, "protobuf.zippylog.message", 1);
    if (table) {
        return luaL_error(L, "could not create parent Lua tables");
    }
    if (!lua_istable(L, -1)) {
        lua_newtable(L);
        lua_setfield(L, -2, "zippylog.message");
    }
    lua_pop(L, 1);
    luaL_Reg funcs [] = { { NULL, NULL } };
    luaL_register(L, "protobuf.zippylog.message", funcs);
    lua_protobuf_zippylog_message_Envelope_open(L);
    lua_protobuf_zippylog_message_ActorInfo_open(L);
    return 1;
}


static const struct luaL_Reg Envelope_functions [] = {
    {"new", lua_protobuf_zippylog_message_Envelope_new},
    {"parsefromstring", lua_protobuf_zippylog_message_Envelope_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg Envelope_methods [] = {
    {"serialized", lua_protobuf_zippylog_message_Envelope_serialized},
    {"clear", lua_protobuf_zippylog_message_Envelope_clear},
    {"__gc", lua_protobuf_zippylog_message_Envelope_gc},
    {"clear_version", lua_protobuf_zippylog_message_Envelope_clear_version},
    {"get_version", lua_protobuf_zippylog_message_Envelope_get_version},
    {"set_version", lua_protobuf_zippylog_message_Envelope_set_version},
    {"has_version", lua_protobuf_zippylog_message_Envelope_has_version},
    {"clear_message", lua_protobuf_zippylog_message_Envelope_clear_message},
    {"get_message", lua_protobuf_zippylog_message_Envelope_get_message},
    {"set_message", lua_protobuf_zippylog_message_Envelope_set_message},
    {"size_message", lua_protobuf_zippylog_message_Envelope_size_message},
    {"clear_message_namespace", lua_protobuf_zippylog_message_Envelope_clear_message_namespace},
    {"get_message_namespace", lua_protobuf_zippylog_message_Envelope_get_message_namespace},
    {"set_message_namespace", lua_protobuf_zippylog_message_Envelope_set_message_namespace},
    {"size_message_namespace", lua_protobuf_zippylog_message_Envelope_size_message_namespace},
    {"clear_message_type", lua_protobuf_zippylog_message_Envelope_clear_message_type},
    {"get_message_type", lua_protobuf_zippylog_message_Envelope_get_message_type},
    {"set_message_type", lua_protobuf_zippylog_message_Envelope_set_message_type},
    {"size_message_type", lua_protobuf_zippylog_message_Envelope_size_message_type},
    {"clear_create_time", lua_protobuf_zippylog_message_Envelope_clear_create_time},
    {"get_create_time", lua_protobuf_zippylog_message_Envelope_get_create_time},
    {"set_create_time", lua_protobuf_zippylog_message_Envelope_set_create_time},
    {"has_create_time", lua_protobuf_zippylog_message_Envelope_has_create_time},
    {"clear_tag", lua_protobuf_zippylog_message_Envelope_clear_tag},
    {"get_tag", lua_protobuf_zippylog_message_Envelope_get_tag},
    {"set_tag", lua_protobuf_zippylog_message_Envelope_set_tag},
    {"size_tag", lua_protobuf_zippylog_message_Envelope_size_tag},
    {"clear_actor", lua_protobuf_zippylog_message_Envelope_clear_actor},
    {"get_actor", lua_protobuf_zippylog_message_Envelope_get_actor},
    {"set_actor", lua_protobuf_zippylog_message_Envelope_set_actor},
    {"size_actor", lua_protobuf_zippylog_message_Envelope_size_actor},
    {"add_actor", lua_protobuf_zippylog_message_Envelope_add_actor},
    {"clear_numeric_value", lua_protobuf_zippylog_message_Envelope_clear_numeric_value},
    {"get_numeric_value", lua_protobuf_zippylog_message_Envelope_get_numeric_value},
    {"set_numeric_value", lua_protobuf_zippylog_message_Envelope_set_numeric_value},
    {"has_numeric_value", lua_protobuf_zippylog_message_Envelope_has_numeric_value},
    {"clear_string_value", lua_protobuf_zippylog_message_Envelope_clear_string_value},
    {"get_string_value", lua_protobuf_zippylog_message_Envelope_get_string_value},
    {"set_string_value", lua_protobuf_zippylog_message_Envelope_set_string_value},
    {"has_string_value", lua_protobuf_zippylog_message_Envelope_has_string_value},
    {NULL, NULL},
};

int lua_protobuf_zippylog_message_Envelope_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.message.Envelope");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, Envelope_methods);
    luaL_register(L, "protobuf.zippylog.message.Envelope", Envelope_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_message_Envelope_pushcopy(lua_State *L, const ::zippylog::message::Envelope &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::message::Envelope(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.message.Envelope");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_message_Envelope_pushreference(lua_State *L, ::zippylog::message::Envelope *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.message.Envelope");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_message_Envelope_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::message::Envelope();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.message.Envelope");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_message_Envelope_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::message::Envelope * msg = new ::zippylog::message::Envelope();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.message.Envelope");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_message_Envelope_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_message_Envelope_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_message_Envelope_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_message_Envelope_clear_version(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    m->clear_version();
    return 0;
}

int lua_protobuf_zippylog_message_Envelope_get_version(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    m->has_version() ? lua_pushinteger(L, m->version()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_message_Envelope_set_version(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_version();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_version(v);
    return 0;
}

int lua_protobuf_zippylog_message_Envelope_has_version(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    lua_pushboolean(L, m->has_version());
    return 1;
}

int lua_protobuf_zippylog_message_Envelope_clear_message(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    m->clear_message();
    return 0;
}

int lua_protobuf_zippylog_message_Envelope_get_message(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->message_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->message_size());
    }
    string s = m->message(index - 1);
    lua_pushlstring(L, s.c_str(), s.size());
    return 1;
}

int lua_protobuf_zippylog_message_Envelope_set_message(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->message_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    size_t length = 0;
    const char *s = luaL_checklstring(L, 3, &length);
    if (index == current_size + 1) {
        m->add_message(s, length);
    }
    else {
        m->set_message(index-1, s, length);
    }
    return 0;
}

int lua_protobuf_zippylog_message_Envelope_size_message(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    int size = m->message_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_message_Envelope_clear_message_namespace(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    m->clear_message_namespace();
    return 0;
}

int lua_protobuf_zippylog_message_Envelope_get_message_namespace(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->message_namespace_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->message_namespace_size());
    }
    lua_pushinteger(L, m->message_namespace(index-1));
    return 1;
}

int lua_protobuf_zippylog_message_Envelope_set_message_namespace(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->message_namespace_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    lua_Integer i = lua_tointeger(L, 3);
    if (index == current_size + 1) {
        m->add_message_namespace(i);
    }
    else {
        m->set_message_namespace(index-1, i);
    }
    return 0;
}

int lua_protobuf_zippylog_message_Envelope_size_message_namespace(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    int size = m->message_namespace_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_message_Envelope_clear_message_type(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    m->clear_message_type();
    return 0;
}

int lua_protobuf_zippylog_message_Envelope_get_message_type(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->message_type_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->message_type_size());
    }
    lua_pushinteger(L, m->message_type(index-1));
    return 1;
}

int lua_protobuf_zippylog_message_Envelope_set_message_type(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->message_type_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    lua_Integer i = lua_tointeger(L, 3);
    if (index == current_size + 1) {
        m->add_message_type(i);
    }
    else {
        m->set_message_type(index-1, i);
    }
    return 0;
}

int lua_protobuf_zippylog_message_Envelope_size_message_type(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    int size = m->message_type_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_message_Envelope_clear_create_time(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    m->clear_create_time();
    return 0;
}

int lua_protobuf_zippylog_message_Envelope_get_create_time(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    m->has_create_time() ? lua_pushinteger(L, m->create_time()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_message_Envelope_set_create_time(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_create_time();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_create_time(i);
    return 0;
}

int lua_protobuf_zippylog_message_Envelope_has_create_time(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    lua_pushboolean(L, m->has_create_time());
    return 1;
}

int lua_protobuf_zippylog_message_Envelope_clear_tag(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    m->clear_tag();
    return 0;
}

int lua_protobuf_zippylog_message_Envelope_get_tag(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->tag_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->tag_size());
    }
    string s = m->tag(index - 1);
    lua_pushlstring(L, s.c_str(), s.size());
    return 1;
}

int lua_protobuf_zippylog_message_Envelope_set_tag(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->tag_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    size_t length = 0;
    const char *s = luaL_checklstring(L, 3, &length);
    if (index == current_size + 1) {
        m->add_tag(s, length);
    }
    else {
        m->set_tag(index-1, s, length);
    }
    return 0;
}

int lua_protobuf_zippylog_message_Envelope_size_tag(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    int size = m->tag_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_message_Envelope_clear_actor(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    m->clear_actor();
    return 0;
}

int lua_protobuf_zippylog_message_Envelope_get_actor(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->actor_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->actor_size());
    }
    ::zippylog::message::ActorInfo * got_msg = m->mutable_actor(index-1);
    lua_protobuf_zippylog_message_ActorInfo_pushreference(L, got_msg, NULL, NULL);
    return 1;
}

int lua_protobuf_zippylog_message_Envelope_set_actor(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->actor_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    return luaL_error(L, "to manipulate embedded messages, fetch the embedded message and modify it");
    return 0;
}

int lua_protobuf_zippylog_message_Envelope_size_actor(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    int size = m->actor_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_message_Envelope_add_actor(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    ::zippylog::message::ActorInfo *msg_new = m->add_actor();
    lua_protobuf_zippylog_message_ActorInfo_pushreference(L, msg_new, NULL, NULL);
    return 1;
}

int lua_protobuf_zippylog_message_Envelope_clear_numeric_value(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    m->clear_numeric_value();
    return 0;
}

int lua_protobuf_zippylog_message_Envelope_get_numeric_value(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    m->has_numeric_value() ? lua_pushinteger(L, m->numeric_value()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_message_Envelope_set_numeric_value(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_numeric_value();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_numeric_value(i);
    return 0;
}

int lua_protobuf_zippylog_message_Envelope_has_numeric_value(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    lua_pushboolean(L, m->has_numeric_value());
    return 1;
}

int lua_protobuf_zippylog_message_Envelope_clear_string_value(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    m->clear_string_value();
    return 0;
}

int lua_protobuf_zippylog_message_Envelope_get_string_value(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    string s = m->string_value();
    m->has_string_value() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_message_Envelope_set_string_value(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_string_value();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_string_value(s, len);
    return 0;
}

int lua_protobuf_zippylog_message_Envelope_has_string_value(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.Envelope");
    ::zippylog::message::Envelope *m = (::zippylog::message::Envelope *)mud->msg;
    lua_pushboolean(L, m->has_string_value());
    return 1;
}

static const struct luaL_Reg ActorInfo_functions [] = {
    {"new", lua_protobuf_zippylog_message_ActorInfo_new},
    {"parsefromstring", lua_protobuf_zippylog_message_ActorInfo_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg ActorInfo_methods [] = {
    {"serialized", lua_protobuf_zippylog_message_ActorInfo_serialized},
    {"clear", lua_protobuf_zippylog_message_ActorInfo_clear},
    {"__gc", lua_protobuf_zippylog_message_ActorInfo_gc},
    {"clear_touch_time", lua_protobuf_zippylog_message_ActorInfo_clear_touch_time},
    {"get_touch_time", lua_protobuf_zippylog_message_ActorInfo_get_touch_time},
    {"set_touch_time", lua_protobuf_zippylog_message_ActorInfo_set_touch_time},
    {"has_touch_time", lua_protobuf_zippylog_message_ActorInfo_has_touch_time},
    {"clear_sequence_id", lua_protobuf_zippylog_message_ActorInfo_clear_sequence_id},
    {"get_sequence_id", lua_protobuf_zippylog_message_ActorInfo_get_sequence_id},
    {"set_sequence_id", lua_protobuf_zippylog_message_ActorInfo_set_sequence_id},
    {"has_sequence_id", lua_protobuf_zippylog_message_ActorInfo_has_sequence_id},
    {"clear_hostname", lua_protobuf_zippylog_message_ActorInfo_clear_hostname},
    {"get_hostname", lua_protobuf_zippylog_message_ActorInfo_get_hostname},
    {"set_hostname", lua_protobuf_zippylog_message_ActorInfo_set_hostname},
    {"has_hostname", lua_protobuf_zippylog_message_ActorInfo_has_hostname},
    {"clear_host_id", lua_protobuf_zippylog_message_ActorInfo_clear_host_id},
    {"get_host_id", lua_protobuf_zippylog_message_ActorInfo_get_host_id},
    {"set_host_id", lua_protobuf_zippylog_message_ActorInfo_set_host_id},
    {"has_host_id", lua_protobuf_zippylog_message_ActorInfo_has_host_id},
    {"clear_actor_id", lua_protobuf_zippylog_message_ActorInfo_clear_actor_id},
    {"get_actor_id", lua_protobuf_zippylog_message_ActorInfo_get_actor_id},
    {"set_actor_id", lua_protobuf_zippylog_message_ActorInfo_set_actor_id},
    {"has_actor_id", lua_protobuf_zippylog_message_ActorInfo_has_actor_id},
    {"clear_app_id", lua_protobuf_zippylog_message_ActorInfo_clear_app_id},
    {"get_app_id", lua_protobuf_zippylog_message_ActorInfo_get_app_id},
    {"set_app_id", lua_protobuf_zippylog_message_ActorInfo_set_app_id},
    {"has_app_id", lua_protobuf_zippylog_message_ActorInfo_has_app_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_message_ActorInfo_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.message.ActorInfo");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, ActorInfo_methods);
    luaL_register(L, "protobuf.zippylog.message.ActorInfo", ActorInfo_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_message_ActorInfo_pushcopy(lua_State *L, const ::zippylog::message::ActorInfo &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::message::ActorInfo(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.message.ActorInfo");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_message_ActorInfo_pushreference(lua_State *L, ::zippylog::message::ActorInfo *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.message.ActorInfo");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_message_ActorInfo_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::message::ActorInfo();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.message.ActorInfo");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_message_ActorInfo_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::message::ActorInfo * msg = new ::zippylog::message::ActorInfo();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.message.ActorInfo");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_message_ActorInfo_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_message_ActorInfo_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_message_ActorInfo_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_message_ActorInfo_clear_touch_time(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    m->clear_touch_time();
    return 0;
}

int lua_protobuf_zippylog_message_ActorInfo_get_touch_time(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    m->has_touch_time() ? lua_pushinteger(L, m->touch_time()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_message_ActorInfo_set_touch_time(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_touch_time();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_touch_time(i);
    return 0;
}

int lua_protobuf_zippylog_message_ActorInfo_has_touch_time(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    lua_pushboolean(L, m->has_touch_time());
    return 1;
}

int lua_protobuf_zippylog_message_ActorInfo_clear_sequence_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    m->clear_sequence_id();
    return 0;
}

int lua_protobuf_zippylog_message_ActorInfo_get_sequence_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    m->has_sequence_id() ? lua_pushinteger(L, m->sequence_id()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_message_ActorInfo_set_sequence_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_sequence_id();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_sequence_id(i);
    return 0;
}

int lua_protobuf_zippylog_message_ActorInfo_has_sequence_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    lua_pushboolean(L, m->has_sequence_id());
    return 1;
}

int lua_protobuf_zippylog_message_ActorInfo_clear_hostname(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    m->clear_hostname();
    return 0;
}

int lua_protobuf_zippylog_message_ActorInfo_get_hostname(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    string s = m->hostname();
    m->has_hostname() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_message_ActorInfo_set_hostname(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_hostname();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_hostname(s, len);
    return 0;
}

int lua_protobuf_zippylog_message_ActorInfo_has_hostname(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    lua_pushboolean(L, m->has_hostname());
    return 1;
}

int lua_protobuf_zippylog_message_ActorInfo_clear_host_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    m->clear_host_id();
    return 0;
}

int lua_protobuf_zippylog_message_ActorInfo_get_host_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    string s = m->host_id();
    m->has_host_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_message_ActorInfo_set_host_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_host_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_host_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_message_ActorInfo_has_host_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    lua_pushboolean(L, m->has_host_id());
    return 1;
}

int lua_protobuf_zippylog_message_ActorInfo_clear_actor_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    m->clear_actor_id();
    return 0;
}

int lua_protobuf_zippylog_message_ActorInfo_get_actor_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    string s = m->actor_id();
    m->has_actor_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_message_ActorInfo_set_actor_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_actor_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_actor_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_message_ActorInfo_has_actor_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    lua_pushboolean(L, m->has_actor_id());
    return 1;
}

int lua_protobuf_zippylog_message_ActorInfo_clear_app_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    m->clear_app_id();
    return 0;
}

int lua_protobuf_zippylog_message_ActorInfo_get_app_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    string s = m->app_id();
    m->has_app_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_message_ActorInfo_set_app_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_app_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_app_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_message_ActorInfo_has_app_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.message.ActorInfo");
    ::zippylog::message::ActorInfo *m = (::zippylog::message::ActorInfo *)mud->msg;
    lua_pushboolean(L, m->has_app_id());
    return 1;
}
