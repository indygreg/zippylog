// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zippylog/protocol.proto

#ifndef PROTOBUF_zippylog_2fprotocol_2eproto__INCLUDED
#define PROTOBUF_zippylog_2fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <zippylog/envelope.hpp>
// @@protoc_insertion_point(includes)

namespace zippylog {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_zippylog_2fprotocol_2eproto();
void protobuf_AssignDesc_zippylog_2fprotocol_2eproto();
void protobuf_ShutdownFile_zippylog_2fprotocol_2eproto();

class StreamInfo;
class StreamSetInfo;
class BucketInfo;
class StoreInfo;
class StoreChangeStreamAdded;
class StoreChangeStreamDeleted;
class StoreChangeStreamAppended;
class StoreChangeBucketAdded;
class StoreChangeBucketDeleted;
class StoreChangeStreamSetAdded;
class StoreChangeStreamSetDeleted;

// ===================================================================

class StreamInfo : public ::google::protobuf::Message {
 public:
  StreamInfo();
  virtual ~StreamInfo();
  
  StreamInfo(const StreamInfo& from);
  
  inline StreamInfo& operator=(const StreamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamInfo& default_instance();
  
  void Swap(StreamInfo* other);
  
  // implements Message ----------------------------------------------
  
  StreamInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamInfo& from);
  void MergeFrom(const StreamInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // optional uint64 length = 2;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 2;
  inline ::google::protobuf::uint64 length() const;
  inline void set_length(::google::protobuf::uint64 value);
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 32;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.StreamInfo)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_length();
  inline void clear_has_length();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* path_;
  ::google::protobuf::uint64 length_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static StreamInfo* default_instance_;
};
// -------------------------------------------------------------------

class StreamSetInfo : public ::google::protobuf::Message {
 public:
  StreamSetInfo();
  virtual ~StreamSetInfo();
  
  StreamSetInfo(const StreamSetInfo& from);
  
  inline StreamSetInfo& operator=(const StreamSetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamSetInfo& default_instance();
  
  void Swap(StreamSetInfo* other);
  
  // implements Message ----------------------------------------------
  
  StreamSetInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamSetInfo& from);
  void MergeFrom(const StreamSetInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // repeated .zippylog.protocol.StreamInfo stream = 2;
  inline int stream_size() const;
  inline void clear_stream();
  static const int kStreamFieldNumber = 2;
  inline const ::zippylog::protocol::StreamInfo& stream(int index) const;
  inline ::zippylog::protocol::StreamInfo* mutable_stream(int index);
  inline ::zippylog::protocol::StreamInfo* add_stream();
  inline const ::google::protobuf::RepeatedPtrField< ::zippylog::protocol::StreamInfo >&
      stream() const;
  inline ::google::protobuf::RepeatedPtrField< ::zippylog::protocol::StreamInfo >*
      mutable_stream();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 33;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.StreamSetInfo)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* path_;
  ::google::protobuf::RepeatedPtrField< ::zippylog::protocol::StreamInfo > stream_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static StreamSetInfo* default_instance_;
};
// -------------------------------------------------------------------

class BucketInfo : public ::google::protobuf::Message {
 public:
  BucketInfo();
  virtual ~BucketInfo();
  
  BucketInfo(const BucketInfo& from);
  
  inline BucketInfo& operator=(const BucketInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BucketInfo& default_instance();
  
  void Swap(BucketInfo* other);
  
  // implements Message ----------------------------------------------
  
  BucketInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BucketInfo& from);
  void MergeFrom(const BucketInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // repeated .zippylog.protocol.StreamSetInfo stream_set = 2;
  inline int stream_set_size() const;
  inline void clear_stream_set();
  static const int kStreamSetFieldNumber = 2;
  inline const ::zippylog::protocol::StreamSetInfo& stream_set(int index) const;
  inline ::zippylog::protocol::StreamSetInfo* mutable_stream_set(int index);
  inline ::zippylog::protocol::StreamSetInfo* add_stream_set();
  inline const ::google::protobuf::RepeatedPtrField< ::zippylog::protocol::StreamSetInfo >&
      stream_set() const;
  inline ::google::protobuf::RepeatedPtrField< ::zippylog::protocol::StreamSetInfo >*
      mutable_stream_set();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 34;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.BucketInfo)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* path_;
  ::google::protobuf::RepeatedPtrField< ::zippylog::protocol::StreamSetInfo > stream_set_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static BucketInfo* default_instance_;
};
// -------------------------------------------------------------------

class StoreInfo : public ::google::protobuf::Message {
 public:
  StoreInfo();
  virtual ~StoreInfo();
  
  StoreInfo(const StoreInfo& from);
  
  inline StoreInfo& operator=(const StoreInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreInfo& default_instance();
  
  void Swap(StoreInfo* other);
  
  // implements Message ----------------------------------------------
  
  StoreInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreInfo& from);
  void MergeFrom(const StoreInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .zippylog.protocol.BucketInfo bucket = 1;
  inline int bucket_size() const;
  inline void clear_bucket();
  static const int kBucketFieldNumber = 1;
  inline const ::zippylog::protocol::BucketInfo& bucket(int index) const;
  inline ::zippylog::protocol::BucketInfo* mutable_bucket(int index);
  inline ::zippylog::protocol::BucketInfo* add_bucket();
  inline const ::google::protobuf::RepeatedPtrField< ::zippylog::protocol::BucketInfo >&
      bucket() const;
  inline ::google::protobuf::RepeatedPtrField< ::zippylog::protocol::BucketInfo >*
      mutable_bucket();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 35;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.StoreInfo)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::zippylog::protocol::BucketInfo > bucket_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static StoreInfo* default_instance_;
};
// -------------------------------------------------------------------

class StoreChangeStreamAdded : public ::google::protobuf::Message {
 public:
  StoreChangeStreamAdded();
  virtual ~StoreChangeStreamAdded();
  
  StoreChangeStreamAdded(const StoreChangeStreamAdded& from);
  
  inline StoreChangeStreamAdded& operator=(const StoreChangeStreamAdded& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreChangeStreamAdded& default_instance();
  
  void Swap(StoreChangeStreamAdded* other);
  
  // implements Message ----------------------------------------------
  
  StoreChangeStreamAdded* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreChangeStreamAdded& from);
  void MergeFrom(const StoreChangeStreamAdded& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string bucket = 1;
  inline bool has_bucket() const;
  inline void clear_bucket();
  static const int kBucketFieldNumber = 1;
  inline const ::std::string& bucket() const;
  inline void set_bucket(const ::std::string& value);
  inline void set_bucket(const char* value);
  inline void set_bucket(const char* value, size_t size);
  inline ::std::string* mutable_bucket();
  inline ::std::string* release_bucket();
  
  // optional string stream_set = 2;
  inline bool has_stream_set() const;
  inline void clear_stream_set();
  static const int kStreamSetFieldNumber = 2;
  inline const ::std::string& stream_set() const;
  inline void set_stream_set(const ::std::string& value);
  inline void set_stream_set(const char* value);
  inline void set_stream_set(const char* value, size_t size);
  inline ::std::string* mutable_stream_set();
  inline ::std::string* release_stream_set();
  
  // optional string stream = 3;
  inline bool has_stream() const;
  inline void clear_stream();
  static const int kStreamFieldNumber = 3;
  inline const ::std::string& stream() const;
  inline void set_stream(const ::std::string& value);
  inline void set_stream(const char* value);
  inline void set_stream(const char* value, size_t size);
  inline ::std::string* mutable_stream();
  inline ::std::string* release_stream();
  
  // optional uint64 length = 4;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 4;
  inline ::google::protobuf::uint64 length() const;
  inline void set_length(::google::protobuf::uint64 value);
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 36;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.StoreChangeStreamAdded)
 private:
  inline void set_has_bucket();
  inline void clear_has_bucket();
  inline void set_has_stream_set();
  inline void clear_has_stream_set();
  inline void set_has_stream();
  inline void clear_has_stream();
  inline void set_has_length();
  inline void clear_has_length();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* bucket_;
  ::std::string* stream_set_;
  ::std::string* stream_;
  ::google::protobuf::uint64 length_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static StoreChangeStreamAdded* default_instance_;
};
// -------------------------------------------------------------------

class StoreChangeStreamDeleted : public ::google::protobuf::Message {
 public:
  StoreChangeStreamDeleted();
  virtual ~StoreChangeStreamDeleted();
  
  StoreChangeStreamDeleted(const StoreChangeStreamDeleted& from);
  
  inline StoreChangeStreamDeleted& operator=(const StoreChangeStreamDeleted& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreChangeStreamDeleted& default_instance();
  
  void Swap(StoreChangeStreamDeleted* other);
  
  // implements Message ----------------------------------------------
  
  StoreChangeStreamDeleted* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreChangeStreamDeleted& from);
  void MergeFrom(const StoreChangeStreamDeleted& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string bucket = 1;
  inline bool has_bucket() const;
  inline void clear_bucket();
  static const int kBucketFieldNumber = 1;
  inline const ::std::string& bucket() const;
  inline void set_bucket(const ::std::string& value);
  inline void set_bucket(const char* value);
  inline void set_bucket(const char* value, size_t size);
  inline ::std::string* mutable_bucket();
  inline ::std::string* release_bucket();
  
  // optional string stream_set = 2;
  inline bool has_stream_set() const;
  inline void clear_stream_set();
  static const int kStreamSetFieldNumber = 2;
  inline const ::std::string& stream_set() const;
  inline void set_stream_set(const ::std::string& value);
  inline void set_stream_set(const char* value);
  inline void set_stream_set(const char* value, size_t size);
  inline ::std::string* mutable_stream_set();
  inline ::std::string* release_stream_set();
  
  // optional string stream = 3;
  inline bool has_stream() const;
  inline void clear_stream();
  static const int kStreamFieldNumber = 3;
  inline const ::std::string& stream() const;
  inline void set_stream(const ::std::string& value);
  inline void set_stream(const char* value);
  inline void set_stream(const char* value, size_t size);
  inline ::std::string* mutable_stream();
  inline ::std::string* release_stream();
  
  // optional uint64 length = 4;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 4;
  inline ::google::protobuf::uint64 length() const;
  inline void set_length(::google::protobuf::uint64 value);
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 37;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.StoreChangeStreamDeleted)
 private:
  inline void set_has_bucket();
  inline void clear_has_bucket();
  inline void set_has_stream_set();
  inline void clear_has_stream_set();
  inline void set_has_stream();
  inline void clear_has_stream();
  inline void set_has_length();
  inline void clear_has_length();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* bucket_;
  ::std::string* stream_set_;
  ::std::string* stream_;
  ::google::protobuf::uint64 length_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static StoreChangeStreamDeleted* default_instance_;
};
// -------------------------------------------------------------------

class StoreChangeStreamAppended : public ::google::protobuf::Message {
 public:
  StoreChangeStreamAppended();
  virtual ~StoreChangeStreamAppended();
  
  StoreChangeStreamAppended(const StoreChangeStreamAppended& from);
  
  inline StoreChangeStreamAppended& operator=(const StoreChangeStreamAppended& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreChangeStreamAppended& default_instance();
  
  void Swap(StoreChangeStreamAppended* other);
  
  // implements Message ----------------------------------------------
  
  StoreChangeStreamAppended* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreChangeStreamAppended& from);
  void MergeFrom(const StoreChangeStreamAppended& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string bucket = 1;
  inline bool has_bucket() const;
  inline void clear_bucket();
  static const int kBucketFieldNumber = 1;
  inline const ::std::string& bucket() const;
  inline void set_bucket(const ::std::string& value);
  inline void set_bucket(const char* value);
  inline void set_bucket(const char* value, size_t size);
  inline ::std::string* mutable_bucket();
  inline ::std::string* release_bucket();
  
  // optional string stream_set = 2;
  inline bool has_stream_set() const;
  inline void clear_stream_set();
  static const int kStreamSetFieldNumber = 2;
  inline const ::std::string& stream_set() const;
  inline void set_stream_set(const ::std::string& value);
  inline void set_stream_set(const char* value);
  inline void set_stream_set(const char* value, size_t size);
  inline ::std::string* mutable_stream_set();
  inline ::std::string* release_stream_set();
  
  // optional string stream = 3;
  inline bool has_stream() const;
  inline void clear_stream();
  static const int kStreamFieldNumber = 3;
  inline const ::std::string& stream() const;
  inline void set_stream(const ::std::string& value);
  inline void set_stream(const char* value);
  inline void set_stream(const char* value, size_t size);
  inline ::std::string* mutable_stream();
  inline ::std::string* release_stream();
  
  // optional uint64 length = 4;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 4;
  inline ::google::protobuf::uint64 length() const;
  inline void set_length(::google::protobuf::uint64 value);
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 38;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.StoreChangeStreamAppended)
 private:
  inline void set_has_bucket();
  inline void clear_has_bucket();
  inline void set_has_stream_set();
  inline void clear_has_stream_set();
  inline void set_has_stream();
  inline void clear_has_stream();
  inline void set_has_length();
  inline void clear_has_length();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* bucket_;
  ::std::string* stream_set_;
  ::std::string* stream_;
  ::google::protobuf::uint64 length_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static StoreChangeStreamAppended* default_instance_;
};
// -------------------------------------------------------------------

class StoreChangeBucketAdded : public ::google::protobuf::Message {
 public:
  StoreChangeBucketAdded();
  virtual ~StoreChangeBucketAdded();
  
  StoreChangeBucketAdded(const StoreChangeBucketAdded& from);
  
  inline StoreChangeBucketAdded& operator=(const StoreChangeBucketAdded& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreChangeBucketAdded& default_instance();
  
  void Swap(StoreChangeBucketAdded* other);
  
  // implements Message ----------------------------------------------
  
  StoreChangeBucketAdded* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreChangeBucketAdded& from);
  void MergeFrom(const StoreChangeBucketAdded& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string bucket = 1;
  inline bool has_bucket() const;
  inline void clear_bucket();
  static const int kBucketFieldNumber = 1;
  inline const ::std::string& bucket() const;
  inline void set_bucket(const ::std::string& value);
  inline void set_bucket(const char* value);
  inline void set_bucket(const char* value, size_t size);
  inline ::std::string* mutable_bucket();
  inline ::std::string* release_bucket();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 39;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.StoreChangeBucketAdded)
 private:
  inline void set_has_bucket();
  inline void clear_has_bucket();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* bucket_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static StoreChangeBucketAdded* default_instance_;
};
// -------------------------------------------------------------------

class StoreChangeBucketDeleted : public ::google::protobuf::Message {
 public:
  StoreChangeBucketDeleted();
  virtual ~StoreChangeBucketDeleted();
  
  StoreChangeBucketDeleted(const StoreChangeBucketDeleted& from);
  
  inline StoreChangeBucketDeleted& operator=(const StoreChangeBucketDeleted& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreChangeBucketDeleted& default_instance();
  
  void Swap(StoreChangeBucketDeleted* other);
  
  // implements Message ----------------------------------------------
  
  StoreChangeBucketDeleted* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreChangeBucketDeleted& from);
  void MergeFrom(const StoreChangeBucketDeleted& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string bucket = 2;
  inline bool has_bucket() const;
  inline void clear_bucket();
  static const int kBucketFieldNumber = 2;
  inline const ::std::string& bucket() const;
  inline void set_bucket(const ::std::string& value);
  inline void set_bucket(const char* value);
  inline void set_bucket(const char* value, size_t size);
  inline ::std::string* mutable_bucket();
  inline ::std::string* release_bucket();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 40;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.StoreChangeBucketDeleted)
 private:
  inline void set_has_bucket();
  inline void clear_has_bucket();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* bucket_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static StoreChangeBucketDeleted* default_instance_;
};
// -------------------------------------------------------------------

class StoreChangeStreamSetAdded : public ::google::protobuf::Message {
 public:
  StoreChangeStreamSetAdded();
  virtual ~StoreChangeStreamSetAdded();
  
  StoreChangeStreamSetAdded(const StoreChangeStreamSetAdded& from);
  
  inline StoreChangeStreamSetAdded& operator=(const StoreChangeStreamSetAdded& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreChangeStreamSetAdded& default_instance();
  
  void Swap(StoreChangeStreamSetAdded* other);
  
  // implements Message ----------------------------------------------
  
  StoreChangeStreamSetAdded* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreChangeStreamSetAdded& from);
  void MergeFrom(const StoreChangeStreamSetAdded& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string bucket = 1;
  inline bool has_bucket() const;
  inline void clear_bucket();
  static const int kBucketFieldNumber = 1;
  inline const ::std::string& bucket() const;
  inline void set_bucket(const ::std::string& value);
  inline void set_bucket(const char* value);
  inline void set_bucket(const char* value, size_t size);
  inline ::std::string* mutable_bucket();
  inline ::std::string* release_bucket();
  
  // optional string stream_set = 2;
  inline bool has_stream_set() const;
  inline void clear_stream_set();
  static const int kStreamSetFieldNumber = 2;
  inline const ::std::string& stream_set() const;
  inline void set_stream_set(const ::std::string& value);
  inline void set_stream_set(const char* value);
  inline void set_stream_set(const char* value, size_t size);
  inline ::std::string* mutable_stream_set();
  inline ::std::string* release_stream_set();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 41;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.StoreChangeStreamSetAdded)
 private:
  inline void set_has_bucket();
  inline void clear_has_bucket();
  inline void set_has_stream_set();
  inline void clear_has_stream_set();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* bucket_;
  ::std::string* stream_set_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static StoreChangeStreamSetAdded* default_instance_;
};
// -------------------------------------------------------------------

class StoreChangeStreamSetDeleted : public ::google::protobuf::Message {
 public:
  StoreChangeStreamSetDeleted();
  virtual ~StoreChangeStreamSetDeleted();
  
  StoreChangeStreamSetDeleted(const StoreChangeStreamSetDeleted& from);
  
  inline StoreChangeStreamSetDeleted& operator=(const StoreChangeStreamSetDeleted& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreChangeStreamSetDeleted& default_instance();
  
  void Swap(StoreChangeStreamSetDeleted* other);
  
  // implements Message ----------------------------------------------
  
  StoreChangeStreamSetDeleted* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreChangeStreamSetDeleted& from);
  void MergeFrom(const StoreChangeStreamSetDeleted& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string bucket = 1;
  inline bool has_bucket() const;
  inline void clear_bucket();
  static const int kBucketFieldNumber = 1;
  inline const ::std::string& bucket() const;
  inline void set_bucket(const ::std::string& value);
  inline void set_bucket(const char* value);
  inline void set_bucket(const char* value, size_t size);
  inline ::std::string* mutable_bucket();
  inline ::std::string* release_bucket();
  
  // optional string stream_set = 2;
  inline bool has_stream_set() const;
  inline void clear_stream_set();
  static const int kStreamSetFieldNumber = 2;
  inline const ::std::string& stream_set() const;
  inline void set_stream_set(const ::std::string& value);
  inline void set_stream_set(const char* value);
  inline void set_stream_set(const char* value, size_t size);
  inline ::std::string* mutable_stream_set();
  inline ::std::string* release_stream_set();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 42;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.StoreChangeStreamSetDeleted)
 private:
  inline void set_has_bucket();
  inline void clear_has_bucket();
  inline void set_has_stream_set();
  inline void clear_has_stream_set();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* bucket_;
  ::std::string* stream_set_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static StoreChangeStreamSetDeleted* default_instance_;
};
// ===================================================================


// ===================================================================

// StreamInfo

// optional string path = 1;
inline bool StreamInfo::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamInfo::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamInfo::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamInfo::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& StreamInfo::path() const {
  return *path_;
}
inline void StreamInfo::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void StreamInfo::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void StreamInfo::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamInfo::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* StreamInfo::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 length = 2;
inline bool StreamInfo::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamInfo::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamInfo::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamInfo::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
  clear_has_length();
}
inline ::google::protobuf::uint64 StreamInfo::length() const {
  return length_;
}
inline void StreamInfo::set_length(::google::protobuf::uint64 value) {
  set_has_length();
  length_ = value;
}

// -------------------------------------------------------------------

// StreamSetInfo

// optional string path = 1;
inline bool StreamSetInfo::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamSetInfo::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamSetInfo::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamSetInfo::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& StreamSetInfo::path() const {
  return *path_;
}
inline void StreamSetInfo::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void StreamSetInfo::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void StreamSetInfo::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamSetInfo::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* StreamSetInfo::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .zippylog.protocol.StreamInfo stream = 2;
inline int StreamSetInfo::stream_size() const {
  return stream_.size();
}
inline void StreamSetInfo::clear_stream() {
  stream_.Clear();
}
inline const ::zippylog::protocol::StreamInfo& StreamSetInfo::stream(int index) const {
  return stream_.Get(index);
}
inline ::zippylog::protocol::StreamInfo* StreamSetInfo::mutable_stream(int index) {
  return stream_.Mutable(index);
}
inline ::zippylog::protocol::StreamInfo* StreamSetInfo::add_stream() {
  return stream_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zippylog::protocol::StreamInfo >&
StreamSetInfo::stream() const {
  return stream_;
}
inline ::google::protobuf::RepeatedPtrField< ::zippylog::protocol::StreamInfo >*
StreamSetInfo::mutable_stream() {
  return &stream_;
}

// -------------------------------------------------------------------

// BucketInfo

// optional string path = 1;
inline bool BucketInfo::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BucketInfo::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BucketInfo::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BucketInfo::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& BucketInfo::path() const {
  return *path_;
}
inline void BucketInfo::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void BucketInfo::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void BucketInfo::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BucketInfo::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* BucketInfo::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .zippylog.protocol.StreamSetInfo stream_set = 2;
inline int BucketInfo::stream_set_size() const {
  return stream_set_.size();
}
inline void BucketInfo::clear_stream_set() {
  stream_set_.Clear();
}
inline const ::zippylog::protocol::StreamSetInfo& BucketInfo::stream_set(int index) const {
  return stream_set_.Get(index);
}
inline ::zippylog::protocol::StreamSetInfo* BucketInfo::mutable_stream_set(int index) {
  return stream_set_.Mutable(index);
}
inline ::zippylog::protocol::StreamSetInfo* BucketInfo::add_stream_set() {
  return stream_set_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zippylog::protocol::StreamSetInfo >&
BucketInfo::stream_set() const {
  return stream_set_;
}
inline ::google::protobuf::RepeatedPtrField< ::zippylog::protocol::StreamSetInfo >*
BucketInfo::mutable_stream_set() {
  return &stream_set_;
}

// -------------------------------------------------------------------

// StoreInfo

// repeated .zippylog.protocol.BucketInfo bucket = 1;
inline int StoreInfo::bucket_size() const {
  return bucket_.size();
}
inline void StoreInfo::clear_bucket() {
  bucket_.Clear();
}
inline const ::zippylog::protocol::BucketInfo& StoreInfo::bucket(int index) const {
  return bucket_.Get(index);
}
inline ::zippylog::protocol::BucketInfo* StoreInfo::mutable_bucket(int index) {
  return bucket_.Mutable(index);
}
inline ::zippylog::protocol::BucketInfo* StoreInfo::add_bucket() {
  return bucket_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zippylog::protocol::BucketInfo >&
StoreInfo::bucket() const {
  return bucket_;
}
inline ::google::protobuf::RepeatedPtrField< ::zippylog::protocol::BucketInfo >*
StoreInfo::mutable_bucket() {
  return &bucket_;
}

// -------------------------------------------------------------------

// StoreChangeStreamAdded

// optional string bucket = 1;
inline bool StoreChangeStreamAdded::has_bucket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreChangeStreamAdded::set_has_bucket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreChangeStreamAdded::clear_has_bucket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreChangeStreamAdded::clear_bucket() {
  if (bucket_ != &::google::protobuf::internal::kEmptyString) {
    bucket_->clear();
  }
  clear_has_bucket();
}
inline const ::std::string& StoreChangeStreamAdded::bucket() const {
  return *bucket_;
}
inline void StoreChangeStreamAdded::set_bucket(const ::std::string& value) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(value);
}
inline void StoreChangeStreamAdded::set_bucket(const char* value) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(value);
}
inline void StoreChangeStreamAdded::set_bucket(const char* value, size_t size) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreChangeStreamAdded::mutable_bucket() {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  return bucket_;
}
inline ::std::string* StoreChangeStreamAdded::release_bucket() {
  clear_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bucket_;
    bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string stream_set = 2;
inline bool StoreChangeStreamAdded::has_stream_set() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoreChangeStreamAdded::set_has_stream_set() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoreChangeStreamAdded::clear_has_stream_set() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoreChangeStreamAdded::clear_stream_set() {
  if (stream_set_ != &::google::protobuf::internal::kEmptyString) {
    stream_set_->clear();
  }
  clear_has_stream_set();
}
inline const ::std::string& StoreChangeStreamAdded::stream_set() const {
  return *stream_set_;
}
inline void StoreChangeStreamAdded::set_stream_set(const ::std::string& value) {
  set_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    stream_set_ = new ::std::string;
  }
  stream_set_->assign(value);
}
inline void StoreChangeStreamAdded::set_stream_set(const char* value) {
  set_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    stream_set_ = new ::std::string;
  }
  stream_set_->assign(value);
}
inline void StoreChangeStreamAdded::set_stream_set(const char* value, size_t size) {
  set_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    stream_set_ = new ::std::string;
  }
  stream_set_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreChangeStreamAdded::mutable_stream_set() {
  set_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    stream_set_ = new ::std::string;
  }
  return stream_set_;
}
inline ::std::string* StoreChangeStreamAdded::release_stream_set() {
  clear_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stream_set_;
    stream_set_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string stream = 3;
inline bool StoreChangeStreamAdded::has_stream() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoreChangeStreamAdded::set_has_stream() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StoreChangeStreamAdded::clear_has_stream() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StoreChangeStreamAdded::clear_stream() {
  if (stream_ != &::google::protobuf::internal::kEmptyString) {
    stream_->clear();
  }
  clear_has_stream();
}
inline const ::std::string& StoreChangeStreamAdded::stream() const {
  return *stream_;
}
inline void StoreChangeStreamAdded::set_stream(const ::std::string& value) {
  set_has_stream();
  if (stream_ == &::google::protobuf::internal::kEmptyString) {
    stream_ = new ::std::string;
  }
  stream_->assign(value);
}
inline void StoreChangeStreamAdded::set_stream(const char* value) {
  set_has_stream();
  if (stream_ == &::google::protobuf::internal::kEmptyString) {
    stream_ = new ::std::string;
  }
  stream_->assign(value);
}
inline void StoreChangeStreamAdded::set_stream(const char* value, size_t size) {
  set_has_stream();
  if (stream_ == &::google::protobuf::internal::kEmptyString) {
    stream_ = new ::std::string;
  }
  stream_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreChangeStreamAdded::mutable_stream() {
  set_has_stream();
  if (stream_ == &::google::protobuf::internal::kEmptyString) {
    stream_ = new ::std::string;
  }
  return stream_;
}
inline ::std::string* StoreChangeStreamAdded::release_stream() {
  clear_has_stream();
  if (stream_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stream_;
    stream_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 length = 4;
inline bool StoreChangeStreamAdded::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StoreChangeStreamAdded::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StoreChangeStreamAdded::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StoreChangeStreamAdded::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
  clear_has_length();
}
inline ::google::protobuf::uint64 StoreChangeStreamAdded::length() const {
  return length_;
}
inline void StoreChangeStreamAdded::set_length(::google::protobuf::uint64 value) {
  set_has_length();
  length_ = value;
}

// -------------------------------------------------------------------

// StoreChangeStreamDeleted

// optional string bucket = 1;
inline bool StoreChangeStreamDeleted::has_bucket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreChangeStreamDeleted::set_has_bucket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreChangeStreamDeleted::clear_has_bucket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreChangeStreamDeleted::clear_bucket() {
  if (bucket_ != &::google::protobuf::internal::kEmptyString) {
    bucket_->clear();
  }
  clear_has_bucket();
}
inline const ::std::string& StoreChangeStreamDeleted::bucket() const {
  return *bucket_;
}
inline void StoreChangeStreamDeleted::set_bucket(const ::std::string& value) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(value);
}
inline void StoreChangeStreamDeleted::set_bucket(const char* value) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(value);
}
inline void StoreChangeStreamDeleted::set_bucket(const char* value, size_t size) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreChangeStreamDeleted::mutable_bucket() {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  return bucket_;
}
inline ::std::string* StoreChangeStreamDeleted::release_bucket() {
  clear_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bucket_;
    bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string stream_set = 2;
inline bool StoreChangeStreamDeleted::has_stream_set() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoreChangeStreamDeleted::set_has_stream_set() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoreChangeStreamDeleted::clear_has_stream_set() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoreChangeStreamDeleted::clear_stream_set() {
  if (stream_set_ != &::google::protobuf::internal::kEmptyString) {
    stream_set_->clear();
  }
  clear_has_stream_set();
}
inline const ::std::string& StoreChangeStreamDeleted::stream_set() const {
  return *stream_set_;
}
inline void StoreChangeStreamDeleted::set_stream_set(const ::std::string& value) {
  set_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    stream_set_ = new ::std::string;
  }
  stream_set_->assign(value);
}
inline void StoreChangeStreamDeleted::set_stream_set(const char* value) {
  set_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    stream_set_ = new ::std::string;
  }
  stream_set_->assign(value);
}
inline void StoreChangeStreamDeleted::set_stream_set(const char* value, size_t size) {
  set_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    stream_set_ = new ::std::string;
  }
  stream_set_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreChangeStreamDeleted::mutable_stream_set() {
  set_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    stream_set_ = new ::std::string;
  }
  return stream_set_;
}
inline ::std::string* StoreChangeStreamDeleted::release_stream_set() {
  clear_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stream_set_;
    stream_set_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string stream = 3;
inline bool StoreChangeStreamDeleted::has_stream() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoreChangeStreamDeleted::set_has_stream() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StoreChangeStreamDeleted::clear_has_stream() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StoreChangeStreamDeleted::clear_stream() {
  if (stream_ != &::google::protobuf::internal::kEmptyString) {
    stream_->clear();
  }
  clear_has_stream();
}
inline const ::std::string& StoreChangeStreamDeleted::stream() const {
  return *stream_;
}
inline void StoreChangeStreamDeleted::set_stream(const ::std::string& value) {
  set_has_stream();
  if (stream_ == &::google::protobuf::internal::kEmptyString) {
    stream_ = new ::std::string;
  }
  stream_->assign(value);
}
inline void StoreChangeStreamDeleted::set_stream(const char* value) {
  set_has_stream();
  if (stream_ == &::google::protobuf::internal::kEmptyString) {
    stream_ = new ::std::string;
  }
  stream_->assign(value);
}
inline void StoreChangeStreamDeleted::set_stream(const char* value, size_t size) {
  set_has_stream();
  if (stream_ == &::google::protobuf::internal::kEmptyString) {
    stream_ = new ::std::string;
  }
  stream_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreChangeStreamDeleted::mutable_stream() {
  set_has_stream();
  if (stream_ == &::google::protobuf::internal::kEmptyString) {
    stream_ = new ::std::string;
  }
  return stream_;
}
inline ::std::string* StoreChangeStreamDeleted::release_stream() {
  clear_has_stream();
  if (stream_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stream_;
    stream_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 length = 4;
inline bool StoreChangeStreamDeleted::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StoreChangeStreamDeleted::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StoreChangeStreamDeleted::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StoreChangeStreamDeleted::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
  clear_has_length();
}
inline ::google::protobuf::uint64 StoreChangeStreamDeleted::length() const {
  return length_;
}
inline void StoreChangeStreamDeleted::set_length(::google::protobuf::uint64 value) {
  set_has_length();
  length_ = value;
}

// -------------------------------------------------------------------

// StoreChangeStreamAppended

// optional string bucket = 1;
inline bool StoreChangeStreamAppended::has_bucket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreChangeStreamAppended::set_has_bucket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreChangeStreamAppended::clear_has_bucket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreChangeStreamAppended::clear_bucket() {
  if (bucket_ != &::google::protobuf::internal::kEmptyString) {
    bucket_->clear();
  }
  clear_has_bucket();
}
inline const ::std::string& StoreChangeStreamAppended::bucket() const {
  return *bucket_;
}
inline void StoreChangeStreamAppended::set_bucket(const ::std::string& value) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(value);
}
inline void StoreChangeStreamAppended::set_bucket(const char* value) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(value);
}
inline void StoreChangeStreamAppended::set_bucket(const char* value, size_t size) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreChangeStreamAppended::mutable_bucket() {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  return bucket_;
}
inline ::std::string* StoreChangeStreamAppended::release_bucket() {
  clear_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bucket_;
    bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string stream_set = 2;
inline bool StoreChangeStreamAppended::has_stream_set() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoreChangeStreamAppended::set_has_stream_set() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoreChangeStreamAppended::clear_has_stream_set() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoreChangeStreamAppended::clear_stream_set() {
  if (stream_set_ != &::google::protobuf::internal::kEmptyString) {
    stream_set_->clear();
  }
  clear_has_stream_set();
}
inline const ::std::string& StoreChangeStreamAppended::stream_set() const {
  return *stream_set_;
}
inline void StoreChangeStreamAppended::set_stream_set(const ::std::string& value) {
  set_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    stream_set_ = new ::std::string;
  }
  stream_set_->assign(value);
}
inline void StoreChangeStreamAppended::set_stream_set(const char* value) {
  set_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    stream_set_ = new ::std::string;
  }
  stream_set_->assign(value);
}
inline void StoreChangeStreamAppended::set_stream_set(const char* value, size_t size) {
  set_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    stream_set_ = new ::std::string;
  }
  stream_set_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreChangeStreamAppended::mutable_stream_set() {
  set_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    stream_set_ = new ::std::string;
  }
  return stream_set_;
}
inline ::std::string* StoreChangeStreamAppended::release_stream_set() {
  clear_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stream_set_;
    stream_set_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string stream = 3;
inline bool StoreChangeStreamAppended::has_stream() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoreChangeStreamAppended::set_has_stream() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StoreChangeStreamAppended::clear_has_stream() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StoreChangeStreamAppended::clear_stream() {
  if (stream_ != &::google::protobuf::internal::kEmptyString) {
    stream_->clear();
  }
  clear_has_stream();
}
inline const ::std::string& StoreChangeStreamAppended::stream() const {
  return *stream_;
}
inline void StoreChangeStreamAppended::set_stream(const ::std::string& value) {
  set_has_stream();
  if (stream_ == &::google::protobuf::internal::kEmptyString) {
    stream_ = new ::std::string;
  }
  stream_->assign(value);
}
inline void StoreChangeStreamAppended::set_stream(const char* value) {
  set_has_stream();
  if (stream_ == &::google::protobuf::internal::kEmptyString) {
    stream_ = new ::std::string;
  }
  stream_->assign(value);
}
inline void StoreChangeStreamAppended::set_stream(const char* value, size_t size) {
  set_has_stream();
  if (stream_ == &::google::protobuf::internal::kEmptyString) {
    stream_ = new ::std::string;
  }
  stream_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreChangeStreamAppended::mutable_stream() {
  set_has_stream();
  if (stream_ == &::google::protobuf::internal::kEmptyString) {
    stream_ = new ::std::string;
  }
  return stream_;
}
inline ::std::string* StoreChangeStreamAppended::release_stream() {
  clear_has_stream();
  if (stream_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stream_;
    stream_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 length = 4;
inline bool StoreChangeStreamAppended::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StoreChangeStreamAppended::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StoreChangeStreamAppended::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StoreChangeStreamAppended::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
  clear_has_length();
}
inline ::google::protobuf::uint64 StoreChangeStreamAppended::length() const {
  return length_;
}
inline void StoreChangeStreamAppended::set_length(::google::protobuf::uint64 value) {
  set_has_length();
  length_ = value;
}

// -------------------------------------------------------------------

// StoreChangeBucketAdded

// optional string bucket = 1;
inline bool StoreChangeBucketAdded::has_bucket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreChangeBucketAdded::set_has_bucket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreChangeBucketAdded::clear_has_bucket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreChangeBucketAdded::clear_bucket() {
  if (bucket_ != &::google::protobuf::internal::kEmptyString) {
    bucket_->clear();
  }
  clear_has_bucket();
}
inline const ::std::string& StoreChangeBucketAdded::bucket() const {
  return *bucket_;
}
inline void StoreChangeBucketAdded::set_bucket(const ::std::string& value) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(value);
}
inline void StoreChangeBucketAdded::set_bucket(const char* value) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(value);
}
inline void StoreChangeBucketAdded::set_bucket(const char* value, size_t size) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreChangeBucketAdded::mutable_bucket() {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  return bucket_;
}
inline ::std::string* StoreChangeBucketAdded::release_bucket() {
  clear_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bucket_;
    bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// StoreChangeBucketDeleted

// optional string bucket = 2;
inline bool StoreChangeBucketDeleted::has_bucket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreChangeBucketDeleted::set_has_bucket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreChangeBucketDeleted::clear_has_bucket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreChangeBucketDeleted::clear_bucket() {
  if (bucket_ != &::google::protobuf::internal::kEmptyString) {
    bucket_->clear();
  }
  clear_has_bucket();
}
inline const ::std::string& StoreChangeBucketDeleted::bucket() const {
  return *bucket_;
}
inline void StoreChangeBucketDeleted::set_bucket(const ::std::string& value) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(value);
}
inline void StoreChangeBucketDeleted::set_bucket(const char* value) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(value);
}
inline void StoreChangeBucketDeleted::set_bucket(const char* value, size_t size) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreChangeBucketDeleted::mutable_bucket() {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  return bucket_;
}
inline ::std::string* StoreChangeBucketDeleted::release_bucket() {
  clear_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bucket_;
    bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// StoreChangeStreamSetAdded

// optional string bucket = 1;
inline bool StoreChangeStreamSetAdded::has_bucket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreChangeStreamSetAdded::set_has_bucket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreChangeStreamSetAdded::clear_has_bucket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreChangeStreamSetAdded::clear_bucket() {
  if (bucket_ != &::google::protobuf::internal::kEmptyString) {
    bucket_->clear();
  }
  clear_has_bucket();
}
inline const ::std::string& StoreChangeStreamSetAdded::bucket() const {
  return *bucket_;
}
inline void StoreChangeStreamSetAdded::set_bucket(const ::std::string& value) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(value);
}
inline void StoreChangeStreamSetAdded::set_bucket(const char* value) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(value);
}
inline void StoreChangeStreamSetAdded::set_bucket(const char* value, size_t size) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreChangeStreamSetAdded::mutable_bucket() {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  return bucket_;
}
inline ::std::string* StoreChangeStreamSetAdded::release_bucket() {
  clear_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bucket_;
    bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string stream_set = 2;
inline bool StoreChangeStreamSetAdded::has_stream_set() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoreChangeStreamSetAdded::set_has_stream_set() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoreChangeStreamSetAdded::clear_has_stream_set() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoreChangeStreamSetAdded::clear_stream_set() {
  if (stream_set_ != &::google::protobuf::internal::kEmptyString) {
    stream_set_->clear();
  }
  clear_has_stream_set();
}
inline const ::std::string& StoreChangeStreamSetAdded::stream_set() const {
  return *stream_set_;
}
inline void StoreChangeStreamSetAdded::set_stream_set(const ::std::string& value) {
  set_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    stream_set_ = new ::std::string;
  }
  stream_set_->assign(value);
}
inline void StoreChangeStreamSetAdded::set_stream_set(const char* value) {
  set_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    stream_set_ = new ::std::string;
  }
  stream_set_->assign(value);
}
inline void StoreChangeStreamSetAdded::set_stream_set(const char* value, size_t size) {
  set_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    stream_set_ = new ::std::string;
  }
  stream_set_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreChangeStreamSetAdded::mutable_stream_set() {
  set_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    stream_set_ = new ::std::string;
  }
  return stream_set_;
}
inline ::std::string* StoreChangeStreamSetAdded::release_stream_set() {
  clear_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stream_set_;
    stream_set_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// StoreChangeStreamSetDeleted

// optional string bucket = 1;
inline bool StoreChangeStreamSetDeleted::has_bucket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreChangeStreamSetDeleted::set_has_bucket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreChangeStreamSetDeleted::clear_has_bucket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreChangeStreamSetDeleted::clear_bucket() {
  if (bucket_ != &::google::protobuf::internal::kEmptyString) {
    bucket_->clear();
  }
  clear_has_bucket();
}
inline const ::std::string& StoreChangeStreamSetDeleted::bucket() const {
  return *bucket_;
}
inline void StoreChangeStreamSetDeleted::set_bucket(const ::std::string& value) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(value);
}
inline void StoreChangeStreamSetDeleted::set_bucket(const char* value) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(value);
}
inline void StoreChangeStreamSetDeleted::set_bucket(const char* value, size_t size) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreChangeStreamSetDeleted::mutable_bucket() {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    bucket_ = new ::std::string;
  }
  return bucket_;
}
inline ::std::string* StoreChangeStreamSetDeleted::release_bucket() {
  clear_has_bucket();
  if (bucket_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bucket_;
    bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string stream_set = 2;
inline bool StoreChangeStreamSetDeleted::has_stream_set() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoreChangeStreamSetDeleted::set_has_stream_set() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoreChangeStreamSetDeleted::clear_has_stream_set() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoreChangeStreamSetDeleted::clear_stream_set() {
  if (stream_set_ != &::google::protobuf::internal::kEmptyString) {
    stream_set_->clear();
  }
  clear_has_stream_set();
}
inline const ::std::string& StoreChangeStreamSetDeleted::stream_set() const {
  return *stream_set_;
}
inline void StoreChangeStreamSetDeleted::set_stream_set(const ::std::string& value) {
  set_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    stream_set_ = new ::std::string;
  }
  stream_set_->assign(value);
}
inline void StoreChangeStreamSetDeleted::set_stream_set(const char* value) {
  set_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    stream_set_ = new ::std::string;
  }
  stream_set_->assign(value);
}
inline void StoreChangeStreamSetDeleted::set_stream_set(const char* value, size_t size) {
  set_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    stream_set_ = new ::std::string;
  }
  stream_set_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreChangeStreamSetDeleted::mutable_stream_set() {
  set_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    stream_set_ = new ::std::string;
  }
  return stream_set_;
}
inline ::std::string* StoreChangeStreamSetDeleted::release_stream_set() {
  clear_has_stream_set();
  if (stream_set_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stream_set_;
    stream_set_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace zippylog

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zippylog_2fprotocol_2eproto__INCLUDED
