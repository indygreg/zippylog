// Generated by the lua-protobuf compiler
// You shouldn't edit this file manually
//
// source proto file: zippylog/protocol/request.proto

#include "zippylog/protocol/request.pb-lua.h"

#ifdef __cplusplus
extern "C" { // make sure functions treated with C naming
#endif

#include <lauxlib.h>

#ifdef __cplusplus
}
#endif

#include <string>
using ::std::string;

int lua_protobuf_zippylog_protocol_request_open(lua_State *L)
{
    const char *table = luaL_findtable(L, LUA_GLOBALSINDEX, "protobuf.zippylog.protocol.request", 1);
    if (table) {
        return luaL_error(L, "could not create parent Lua tables");
    }
    if (!lua_istable(L, -1)) {
        lua_newtable(L);
        lua_setfield(L, -2, "zippylog.protocol.request");
    }
    lua_pop(L, 1);
    luaL_Reg funcs [] = { { NULL, NULL } };
    luaL_register(L, "protobuf.zippylog.protocol.request", funcs);
    lua_protobuf_zippylog_protocol_request_Ping_open(L);
    lua_protobuf_zippylog_protocol_request_GetFeatures_open(L);
    lua_protobuf_zippylog_protocol_request_GetStoreInfo_open(L);
    lua_protobuf_zippylog_protocol_request_GetBucketInfo_open(L);
    lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_open(L);
    lua_protobuf_zippylog_protocol_request_GetStreamInfo_open(L);
    lua_protobuf_zippylog_protocol_request_GetStream_open(L);
    lua_protobuf_zippylog_protocol_request_WriteEnvelope_open(L);
    lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_open(L);
    lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_open(L);
    lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_open(L);
    lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_open(L);
    lua_protobuf_zippylog_protocol_request_SubscribeCancel_open(L);
    return 1;
}


static const struct luaL_Reg Ping_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_Ping_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_Ping_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg Ping_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_Ping_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_Ping_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_Ping_gc},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_Ping_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.Ping");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, Ping_methods);
    lua_pushboolean(L, 1);
    lua_setfield(L, -1, "_isprotobuf");
    luaL_register(L, "protobuf.zippylog.protocol.request.Ping", Ping_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_Ping_pushcopy(lua_State *L, const ::zippylog::protocol::request::Ping &from)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::Ping(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.Ping");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_Ping_pushreference(lua_State *L, ::zippylog::protocol::request::Ping *msg, lua_protobuf_gc_callback f, void *data)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.Ping");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_Ping_new(lua_State *L)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::Ping();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.Ping");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_Ping_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::Ping * msg = new ::zippylog::protocol::request::Ping();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.Ping");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_Ping_gc(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.Ping");
    ::zippylog::protocol::request::Ping *m = (::zippylog::protocol::request::Ping *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_Ping_clear(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.Ping");
    ::zippylog::protocol::request::Ping *m = (::zippylog::protocol::request::Ping *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_Ping_serialized(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.Ping");
    ::zippylog::protocol::request::Ping *m = (::zippylog::protocol::request::Ping *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
static const struct luaL_Reg GetFeatures_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_GetFeatures_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_GetFeatures_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg GetFeatures_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_GetFeatures_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_GetFeatures_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_GetFeatures_gc},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_GetFeatures_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.GetFeatures");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, GetFeatures_methods);
    lua_pushboolean(L, 1);
    lua_setfield(L, -1, "_isprotobuf");
    luaL_register(L, "protobuf.zippylog.protocol.request.GetFeatures", GetFeatures_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_GetFeatures_pushcopy(lua_State *L, const ::zippylog::protocol::request::GetFeatures &from)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetFeatures(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetFeatures");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_GetFeatures_pushreference(lua_State *L, ::zippylog::protocol::request::GetFeatures *msg, lua_protobuf_gc_callback f, void *data)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetFeatures");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_GetFeatures_new(lua_State *L)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetFeatures();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetFeatures");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetFeatures_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::GetFeatures * msg = new ::zippylog::protocol::request::GetFeatures();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetFeatures");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_GetFeatures_gc(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetFeatures");
    ::zippylog::protocol::request::GetFeatures *m = (::zippylog::protocol::request::GetFeatures *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetFeatures_clear(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetFeatures");
    ::zippylog::protocol::request::GetFeatures *m = (::zippylog::protocol::request::GetFeatures *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetFeatures_serialized(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetFeatures");
    ::zippylog::protocol::request::GetFeatures *m = (::zippylog::protocol::request::GetFeatures *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
static const struct luaL_Reg GetStoreInfo_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_GetStoreInfo_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_GetStoreInfo_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg GetStoreInfo_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_GetStoreInfo_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_GetStoreInfo_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_GetStoreInfo_gc},
    {"clear_version", lua_protobuf_zippylog_protocol_request_GetStoreInfo_clear_version},
    {"get_version", lua_protobuf_zippylog_protocol_request_GetStoreInfo_get_version},
    {"set_version", lua_protobuf_zippylog_protocol_request_GetStoreInfo_set_version},
    {"has_version", lua_protobuf_zippylog_protocol_request_GetStoreInfo_has_version},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_GetStoreInfo_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.GetStoreInfo");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, GetStoreInfo_methods);
    lua_pushboolean(L, 1);
    lua_setfield(L, -1, "_isprotobuf");
    luaL_register(L, "protobuf.zippylog.protocol.request.GetStoreInfo", GetStoreInfo_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_GetStoreInfo_pushcopy(lua_State *L, const ::zippylog::protocol::request::GetStoreInfo &from)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetStoreInfo(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStoreInfo");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_GetStoreInfo_pushreference(lua_State *L, ::zippylog::protocol::request::GetStoreInfo *msg, lua_protobuf_gc_callback f, void *data)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStoreInfo");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_GetStoreInfo_new(lua_State *L)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetStoreInfo();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStoreInfo");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStoreInfo_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::GetStoreInfo * msg = new ::zippylog::protocol::request::GetStoreInfo();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStoreInfo");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_GetStoreInfo_gc(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStoreInfo");
    ::zippylog::protocol::request::GetStoreInfo *m = (::zippylog::protocol::request::GetStoreInfo *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetStoreInfo_clear(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStoreInfo");
    ::zippylog::protocol::request::GetStoreInfo *m = (::zippylog::protocol::request::GetStoreInfo *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetStoreInfo_serialized(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStoreInfo");
    ::zippylog::protocol::request::GetStoreInfo *m = (::zippylog::protocol::request::GetStoreInfo *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_request_GetStoreInfo_clear_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStoreInfo");
    ::zippylog::protocol::request::GetStoreInfo *m = (::zippylog::protocol::request::GetStoreInfo *)mud->msg;
    m->clear_version();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStoreInfo_get_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStoreInfo");
    ::zippylog::protocol::request::GetStoreInfo *m = (::zippylog::protocol::request::GetStoreInfo *)mud->msg;
    m->has_version() ? lua_pushinteger(L, m->version()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStoreInfo_set_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStoreInfo");
    ::zippylog::protocol::request::GetStoreInfo *m = (::zippylog::protocol::request::GetStoreInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_version();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_version(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStoreInfo_has_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStoreInfo");
    ::zippylog::protocol::request::GetStoreInfo *m = (::zippylog::protocol::request::GetStoreInfo *)mud->msg;
    lua_pushboolean(L, m->has_version());
    return 1;
}

static const struct luaL_Reg GetBucketInfo_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_GetBucketInfo_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_GetBucketInfo_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg GetBucketInfo_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_GetBucketInfo_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_GetBucketInfo_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_GetBucketInfo_gc},
    {"clear_version", lua_protobuf_zippylog_protocol_request_GetBucketInfo_clear_version},
    {"get_version", lua_protobuf_zippylog_protocol_request_GetBucketInfo_get_version},
    {"set_version", lua_protobuf_zippylog_protocol_request_GetBucketInfo_set_version},
    {"has_version", lua_protobuf_zippylog_protocol_request_GetBucketInfo_has_version},
    {"clear_path", lua_protobuf_zippylog_protocol_request_GetBucketInfo_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_request_GetBucketInfo_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_request_GetBucketInfo_set_path},
    {"has_path", lua_protobuf_zippylog_protocol_request_GetBucketInfo_has_path},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_GetBucketInfo_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.GetBucketInfo");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, GetBucketInfo_methods);
    lua_pushboolean(L, 1);
    lua_setfield(L, -1, "_isprotobuf");
    luaL_register(L, "protobuf.zippylog.protocol.request.GetBucketInfo", GetBucketInfo_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_GetBucketInfo_pushcopy(lua_State *L, const ::zippylog::protocol::request::GetBucketInfo &from)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetBucketInfo(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetBucketInfo");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_GetBucketInfo_pushreference(lua_State *L, ::zippylog::protocol::request::GetBucketInfo *msg, lua_protobuf_gc_callback f, void *data)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetBucketInfo");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_GetBucketInfo_new(lua_State *L)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetBucketInfo();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetBucketInfo");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetBucketInfo_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::GetBucketInfo * msg = new ::zippylog::protocol::request::GetBucketInfo();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetBucketInfo");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_GetBucketInfo_gc(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetBucketInfo");
    ::zippylog::protocol::request::GetBucketInfo *m = (::zippylog::protocol::request::GetBucketInfo *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetBucketInfo_clear(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetBucketInfo");
    ::zippylog::protocol::request::GetBucketInfo *m = (::zippylog::protocol::request::GetBucketInfo *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetBucketInfo_serialized(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetBucketInfo");
    ::zippylog::protocol::request::GetBucketInfo *m = (::zippylog::protocol::request::GetBucketInfo *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_request_GetBucketInfo_clear_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetBucketInfo");
    ::zippylog::protocol::request::GetBucketInfo *m = (::zippylog::protocol::request::GetBucketInfo *)mud->msg;
    m->clear_version();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetBucketInfo_get_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetBucketInfo");
    ::zippylog::protocol::request::GetBucketInfo *m = (::zippylog::protocol::request::GetBucketInfo *)mud->msg;
    m->has_version() ? lua_pushinteger(L, m->version()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetBucketInfo_set_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetBucketInfo");
    ::zippylog::protocol::request::GetBucketInfo *m = (::zippylog::protocol::request::GetBucketInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_version();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_version(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetBucketInfo_has_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetBucketInfo");
    ::zippylog::protocol::request::GetBucketInfo *m = (::zippylog::protocol::request::GetBucketInfo *)mud->msg;
    lua_pushboolean(L, m->has_version());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetBucketInfo_clear_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetBucketInfo");
    ::zippylog::protocol::request::GetBucketInfo *m = (::zippylog::protocol::request::GetBucketInfo *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetBucketInfo_get_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetBucketInfo");
    ::zippylog::protocol::request::GetBucketInfo *m = (::zippylog::protocol::request::GetBucketInfo *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetBucketInfo_set_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetBucketInfo");
    ::zippylog::protocol::request::GetBucketInfo *m = (::zippylog::protocol::request::GetBucketInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetBucketInfo_has_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetBucketInfo");
    ::zippylog::protocol::request::GetBucketInfo *m = (::zippylog::protocol::request::GetBucketInfo *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

static const struct luaL_Reg GetStreamSetInfo_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg GetStreamSetInfo_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_gc},
    {"clear_version", lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_clear_version},
    {"get_version", lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_get_version},
    {"set_version", lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_set_version},
    {"has_version", lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_has_version},
    {"clear_path", lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_set_path},
    {"has_path", lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_has_path},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamSetInfo");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, GetStreamSetInfo_methods);
    lua_pushboolean(L, 1);
    lua_setfield(L, -1, "_isprotobuf");
    luaL_register(L, "protobuf.zippylog.protocol.request.GetStreamSetInfo", GetStreamSetInfo_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_pushcopy(lua_State *L, const ::zippylog::protocol::request::GetStreamSetInfo &from)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetStreamSetInfo(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamSetInfo");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_pushreference(lua_State *L, ::zippylog::protocol::request::GetStreamSetInfo *msg, lua_protobuf_gc_callback f, void *data)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamSetInfo");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_new(lua_State *L)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetStreamSetInfo();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamSetInfo");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::GetStreamSetInfo * msg = new ::zippylog::protocol::request::GetStreamSetInfo();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamSetInfo");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_gc(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamSetInfo");
    ::zippylog::protocol::request::GetStreamSetInfo *m = (::zippylog::protocol::request::GetStreamSetInfo *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_clear(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamSetInfo");
    ::zippylog::protocol::request::GetStreamSetInfo *m = (::zippylog::protocol::request::GetStreamSetInfo *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_serialized(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamSetInfo");
    ::zippylog::protocol::request::GetStreamSetInfo *m = (::zippylog::protocol::request::GetStreamSetInfo *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_clear_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamSetInfo");
    ::zippylog::protocol::request::GetStreamSetInfo *m = (::zippylog::protocol::request::GetStreamSetInfo *)mud->msg;
    m->clear_version();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_get_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamSetInfo");
    ::zippylog::protocol::request::GetStreamSetInfo *m = (::zippylog::protocol::request::GetStreamSetInfo *)mud->msg;
    m->has_version() ? lua_pushinteger(L, m->version()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_set_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamSetInfo");
    ::zippylog::protocol::request::GetStreamSetInfo *m = (::zippylog::protocol::request::GetStreamSetInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_version();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_version(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_has_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamSetInfo");
    ::zippylog::protocol::request::GetStreamSetInfo *m = (::zippylog::protocol::request::GetStreamSetInfo *)mud->msg;
    lua_pushboolean(L, m->has_version());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_clear_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamSetInfo");
    ::zippylog::protocol::request::GetStreamSetInfo *m = (::zippylog::protocol::request::GetStreamSetInfo *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_get_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamSetInfo");
    ::zippylog::protocol::request::GetStreamSetInfo *m = (::zippylog::protocol::request::GetStreamSetInfo *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_set_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamSetInfo");
    ::zippylog::protocol::request::GetStreamSetInfo *m = (::zippylog::protocol::request::GetStreamSetInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStreamSetInfo_has_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamSetInfo");
    ::zippylog::protocol::request::GetStreamSetInfo *m = (::zippylog::protocol::request::GetStreamSetInfo *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

static const struct luaL_Reg GetStreamInfo_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_GetStreamInfo_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_GetStreamInfo_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg GetStreamInfo_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_GetStreamInfo_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_GetStreamInfo_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_GetStreamInfo_gc},
    {"clear_version", lua_protobuf_zippylog_protocol_request_GetStreamInfo_clear_version},
    {"get_version", lua_protobuf_zippylog_protocol_request_GetStreamInfo_get_version},
    {"set_version", lua_protobuf_zippylog_protocol_request_GetStreamInfo_set_version},
    {"has_version", lua_protobuf_zippylog_protocol_request_GetStreamInfo_has_version},
    {"clear_path", lua_protobuf_zippylog_protocol_request_GetStreamInfo_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_request_GetStreamInfo_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_request_GetStreamInfo_set_path},
    {"has_path", lua_protobuf_zippylog_protocol_request_GetStreamInfo_has_path},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_GetStreamInfo_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamInfo");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, GetStreamInfo_methods);
    lua_pushboolean(L, 1);
    lua_setfield(L, -1, "_isprotobuf");
    luaL_register(L, "protobuf.zippylog.protocol.request.GetStreamInfo", GetStreamInfo_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_GetStreamInfo_pushcopy(lua_State *L, const ::zippylog::protocol::request::GetStreamInfo &from)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetStreamInfo(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamInfo");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_GetStreamInfo_pushreference(lua_State *L, ::zippylog::protocol::request::GetStreamInfo *msg, lua_protobuf_gc_callback f, void *data)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamInfo");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_GetStreamInfo_new(lua_State *L)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetStreamInfo();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamInfo");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStreamInfo_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::GetStreamInfo * msg = new ::zippylog::protocol::request::GetStreamInfo();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamInfo");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_GetStreamInfo_gc(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamInfo");
    ::zippylog::protocol::request::GetStreamInfo *m = (::zippylog::protocol::request::GetStreamInfo *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetStreamInfo_clear(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamInfo");
    ::zippylog::protocol::request::GetStreamInfo *m = (::zippylog::protocol::request::GetStreamInfo *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetStreamInfo_serialized(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamInfo");
    ::zippylog::protocol::request::GetStreamInfo *m = (::zippylog::protocol::request::GetStreamInfo *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_request_GetStreamInfo_clear_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamInfo");
    ::zippylog::protocol::request::GetStreamInfo *m = (::zippylog::protocol::request::GetStreamInfo *)mud->msg;
    m->clear_version();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStreamInfo_get_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamInfo");
    ::zippylog::protocol::request::GetStreamInfo *m = (::zippylog::protocol::request::GetStreamInfo *)mud->msg;
    m->has_version() ? lua_pushinteger(L, m->version()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStreamInfo_set_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamInfo");
    ::zippylog::protocol::request::GetStreamInfo *m = (::zippylog::protocol::request::GetStreamInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_version();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_version(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStreamInfo_has_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamInfo");
    ::zippylog::protocol::request::GetStreamInfo *m = (::zippylog::protocol::request::GetStreamInfo *)mud->msg;
    lua_pushboolean(L, m->has_version());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStreamInfo_clear_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamInfo");
    ::zippylog::protocol::request::GetStreamInfo *m = (::zippylog::protocol::request::GetStreamInfo *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStreamInfo_get_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamInfo");
    ::zippylog::protocol::request::GetStreamInfo *m = (::zippylog::protocol::request::GetStreamInfo *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStreamInfo_set_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamInfo");
    ::zippylog::protocol::request::GetStreamInfo *m = (::zippylog::protocol::request::GetStreamInfo *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStreamInfo_has_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamInfo");
    ::zippylog::protocol::request::GetStreamInfo *m = (::zippylog::protocol::request::GetStreamInfo *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

static const struct luaL_Reg GetStream_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_GetStream_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_GetStream_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg GetStream_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_GetStream_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_GetStream_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_GetStream_gc},
    {"clear_version", lua_protobuf_zippylog_protocol_request_GetStream_clear_version},
    {"get_version", lua_protobuf_zippylog_protocol_request_GetStream_get_version},
    {"set_version", lua_protobuf_zippylog_protocol_request_GetStream_set_version},
    {"has_version", lua_protobuf_zippylog_protocol_request_GetStream_has_version},
    {"clear_path", lua_protobuf_zippylog_protocol_request_GetStream_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_request_GetStream_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_request_GetStream_set_path},
    {"has_path", lua_protobuf_zippylog_protocol_request_GetStream_has_path},
    {"clear_start_offset", lua_protobuf_zippylog_protocol_request_GetStream_clear_start_offset},
    {"get_start_offset", lua_protobuf_zippylog_protocol_request_GetStream_get_start_offset},
    {"set_start_offset", lua_protobuf_zippylog_protocol_request_GetStream_set_start_offset},
    {"has_start_offset", lua_protobuf_zippylog_protocol_request_GetStream_has_start_offset},
    {"clear_max_response_bytes", lua_protobuf_zippylog_protocol_request_GetStream_clear_max_response_bytes},
    {"get_max_response_bytes", lua_protobuf_zippylog_protocol_request_GetStream_get_max_response_bytes},
    {"set_max_response_bytes", lua_protobuf_zippylog_protocol_request_GetStream_set_max_response_bytes},
    {"has_max_response_bytes", lua_protobuf_zippylog_protocol_request_GetStream_has_max_response_bytes},
    {"clear_max_response_envelopes", lua_protobuf_zippylog_protocol_request_GetStream_clear_max_response_envelopes},
    {"get_max_response_envelopes", lua_protobuf_zippylog_protocol_request_GetStream_get_max_response_envelopes},
    {"set_max_response_envelopes", lua_protobuf_zippylog_protocol_request_GetStream_set_max_response_envelopes},
    {"has_max_response_envelopes", lua_protobuf_zippylog_protocol_request_GetStream_has_max_response_envelopes},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_GetStream_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.GetStream");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, GetStream_methods);
    lua_pushboolean(L, 1);
    lua_setfield(L, -1, "_isprotobuf");
    luaL_register(L, "protobuf.zippylog.protocol.request.GetStream", GetStream_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_GetStream_pushcopy(lua_State *L, const ::zippylog::protocol::request::GetStream &from)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetStream(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStream");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_GetStream_pushreference(lua_State *L, ::zippylog::protocol::request::GetStream *msg, lua_protobuf_gc_callback f, void *data)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStream");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_GetStream_new(lua_State *L)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetStream();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStream");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStream_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::GetStream * msg = new ::zippylog::protocol::request::GetStream();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStream");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_GetStream_gc(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStream");
    ::zippylog::protocol::request::GetStream *m = (::zippylog::protocol::request::GetStream *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetStream_clear(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStream");
    ::zippylog::protocol::request::GetStream *m = (::zippylog::protocol::request::GetStream *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetStream_serialized(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStream");
    ::zippylog::protocol::request::GetStream *m = (::zippylog::protocol::request::GetStream *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_request_GetStream_clear_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStream");
    ::zippylog::protocol::request::GetStream *m = (::zippylog::protocol::request::GetStream *)mud->msg;
    m->clear_version();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStream_get_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStream");
    ::zippylog::protocol::request::GetStream *m = (::zippylog::protocol::request::GetStream *)mud->msg;
    m->has_version() ? lua_pushinteger(L, m->version()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStream_set_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStream");
    ::zippylog::protocol::request::GetStream *m = (::zippylog::protocol::request::GetStream *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_version();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_version(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStream_has_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStream");
    ::zippylog::protocol::request::GetStream *m = (::zippylog::protocol::request::GetStream *)mud->msg;
    lua_pushboolean(L, m->has_version());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStream_clear_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStream");
    ::zippylog::protocol::request::GetStream *m = (::zippylog::protocol::request::GetStream *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStream_get_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStream");
    ::zippylog::protocol::request::GetStream *m = (::zippylog::protocol::request::GetStream *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStream_set_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStream");
    ::zippylog::protocol::request::GetStream *m = (::zippylog::protocol::request::GetStream *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStream_has_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStream");
    ::zippylog::protocol::request::GetStream *m = (::zippylog::protocol::request::GetStream *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStream_clear_start_offset(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStream");
    ::zippylog::protocol::request::GetStream *m = (::zippylog::protocol::request::GetStream *)mud->msg;
    m->clear_start_offset();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStream_get_start_offset(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStream");
    ::zippylog::protocol::request::GetStream *m = (::zippylog::protocol::request::GetStream *)mud->msg;
    m->has_start_offset() ? lua_pushinteger(L, m->start_offset()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStream_set_start_offset(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStream");
    ::zippylog::protocol::request::GetStream *m = (::zippylog::protocol::request::GetStream *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_start_offset();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_start_offset(i);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStream_has_start_offset(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStream");
    ::zippylog::protocol::request::GetStream *m = (::zippylog::protocol::request::GetStream *)mud->msg;
    lua_pushboolean(L, m->has_start_offset());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStream_clear_max_response_bytes(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStream");
    ::zippylog::protocol::request::GetStream *m = (::zippylog::protocol::request::GetStream *)mud->msg;
    m->clear_max_response_bytes();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStream_get_max_response_bytes(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStream");
    ::zippylog::protocol::request::GetStream *m = (::zippylog::protocol::request::GetStream *)mud->msg;
    m->has_max_response_bytes() ? lua_pushinteger(L, m->max_response_bytes()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStream_set_max_response_bytes(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStream");
    ::zippylog::protocol::request::GetStream *m = (::zippylog::protocol::request::GetStream *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_max_response_bytes();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_max_response_bytes(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStream_has_max_response_bytes(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStream");
    ::zippylog::protocol::request::GetStream *m = (::zippylog::protocol::request::GetStream *)mud->msg;
    lua_pushboolean(L, m->has_max_response_bytes());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStream_clear_max_response_envelopes(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStream");
    ::zippylog::protocol::request::GetStream *m = (::zippylog::protocol::request::GetStream *)mud->msg;
    m->clear_max_response_envelopes();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStream_get_max_response_envelopes(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStream");
    ::zippylog::protocol::request::GetStream *m = (::zippylog::protocol::request::GetStream *)mud->msg;
    m->has_max_response_envelopes() ? lua_pushinteger(L, m->max_response_envelopes()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStream_set_max_response_envelopes(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStream");
    ::zippylog::protocol::request::GetStream *m = (::zippylog::protocol::request::GetStream *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_max_response_envelopes();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_max_response_envelopes(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStream_has_max_response_envelopes(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStream");
    ::zippylog::protocol::request::GetStream *m = (::zippylog::protocol::request::GetStream *)mud->msg;
    lua_pushboolean(L, m->has_max_response_envelopes());
    return 1;
}

static const struct luaL_Reg WriteEnvelope_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_WriteEnvelope_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_WriteEnvelope_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg WriteEnvelope_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_WriteEnvelope_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_WriteEnvelope_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_WriteEnvelope_gc},
    {"clear_version", lua_protobuf_zippylog_protocol_request_WriteEnvelope_clear_version},
    {"get_version", lua_protobuf_zippylog_protocol_request_WriteEnvelope_get_version},
    {"set_version", lua_protobuf_zippylog_protocol_request_WriteEnvelope_set_version},
    {"has_version", lua_protobuf_zippylog_protocol_request_WriteEnvelope_has_version},
    {"clear_path", lua_protobuf_zippylog_protocol_request_WriteEnvelope_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_request_WriteEnvelope_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_request_WriteEnvelope_set_path},
    {"has_path", lua_protobuf_zippylog_protocol_request_WriteEnvelope_has_path},
    {"clear_envelope", lua_protobuf_zippylog_protocol_request_WriteEnvelope_clear_envelope},
    {"get_envelope", lua_protobuf_zippylog_protocol_request_WriteEnvelope_get_envelope},
    {"set_envelope", lua_protobuf_zippylog_protocol_request_WriteEnvelope_set_envelope},
    {"size_envelope", lua_protobuf_zippylog_protocol_request_WriteEnvelope_size_envelope},
    {"clear_acknowledge", lua_protobuf_zippylog_protocol_request_WriteEnvelope_clear_acknowledge},
    {"get_acknowledge", lua_protobuf_zippylog_protocol_request_WriteEnvelope_get_acknowledge},
    {"set_acknowledge", lua_protobuf_zippylog_protocol_request_WriteEnvelope_set_acknowledge},
    {"has_acknowledge", lua_protobuf_zippylog_protocol_request_WriteEnvelope_has_acknowledge},
    {"clear_synchronous", lua_protobuf_zippylog_protocol_request_WriteEnvelope_clear_synchronous},
    {"get_synchronous", lua_protobuf_zippylog_protocol_request_WriteEnvelope_get_synchronous},
    {"set_synchronous", lua_protobuf_zippylog_protocol_request_WriteEnvelope_set_synchronous},
    {"has_synchronous", lua_protobuf_zippylog_protocol_request_WriteEnvelope_has_synchronous},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_WriteEnvelope_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, WriteEnvelope_methods);
    lua_pushboolean(L, 1);
    lua_setfield(L, -1, "_isprotobuf");
    luaL_register(L, "protobuf.zippylog.protocol.request.WriteEnvelope", WriteEnvelope_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_WriteEnvelope_pushcopy(lua_State *L, const ::zippylog::protocol::request::WriteEnvelope &from)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::WriteEnvelope(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_WriteEnvelope_pushreference(lua_State *L, ::zippylog::protocol::request::WriteEnvelope *msg, lua_protobuf_gc_callback f, void *data)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_WriteEnvelope_new(lua_State *L)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::WriteEnvelope();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelope_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::WriteEnvelope * msg = new ::zippylog::protocol::request::WriteEnvelope();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_WriteEnvelope_gc(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    ::zippylog::protocol::request::WriteEnvelope *m = (::zippylog::protocol::request::WriteEnvelope *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_WriteEnvelope_clear(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    ::zippylog::protocol::request::WriteEnvelope *m = (::zippylog::protocol::request::WriteEnvelope *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_WriteEnvelope_serialized(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    ::zippylog::protocol::request::WriteEnvelope *m = (::zippylog::protocol::request::WriteEnvelope *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_request_WriteEnvelope_clear_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    ::zippylog::protocol::request::WriteEnvelope *m = (::zippylog::protocol::request::WriteEnvelope *)mud->msg;
    m->clear_version();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelope_get_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    ::zippylog::protocol::request::WriteEnvelope *m = (::zippylog::protocol::request::WriteEnvelope *)mud->msg;
    m->has_version() ? lua_pushinteger(L, m->version()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelope_set_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    ::zippylog::protocol::request::WriteEnvelope *m = (::zippylog::protocol::request::WriteEnvelope *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_version();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_version(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelope_has_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    ::zippylog::protocol::request::WriteEnvelope *m = (::zippylog::protocol::request::WriteEnvelope *)mud->msg;
    lua_pushboolean(L, m->has_version());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelope_clear_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    ::zippylog::protocol::request::WriteEnvelope *m = (::zippylog::protocol::request::WriteEnvelope *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelope_get_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    ::zippylog::protocol::request::WriteEnvelope *m = (::zippylog::protocol::request::WriteEnvelope *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelope_set_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    ::zippylog::protocol::request::WriteEnvelope *m = (::zippylog::protocol::request::WriteEnvelope *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelope_has_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    ::zippylog::protocol::request::WriteEnvelope *m = (::zippylog::protocol::request::WriteEnvelope *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelope_clear_envelope(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    ::zippylog::protocol::request::WriteEnvelope *m = (::zippylog::protocol::request::WriteEnvelope *)mud->msg;
    m->clear_envelope();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelope_get_envelope(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    ::zippylog::protocol::request::WriteEnvelope *m = (::zippylog::protocol::request::WriteEnvelope *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->envelope_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->envelope_size());
    }
    string s = m->envelope(index - 1);
    lua_pushlstring(L, s.c_str(), s.size());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelope_set_envelope(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    ::zippylog::protocol::request::WriteEnvelope *m = (::zippylog::protocol::request::WriteEnvelope *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->envelope_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    size_t length = 0;
    const char *s = luaL_checklstring(L, 3, &length);
    if (index == current_size + 1) {
        m->add_envelope(s, length);
    }
    else {
        m->set_envelope(index-1, s, length);
    }
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelope_size_envelope(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    ::zippylog::protocol::request::WriteEnvelope *m = (::zippylog::protocol::request::WriteEnvelope *)mud->msg;
    int size = m->envelope_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelope_clear_acknowledge(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    ::zippylog::protocol::request::WriteEnvelope *m = (::zippylog::protocol::request::WriteEnvelope *)mud->msg;
    m->clear_acknowledge();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelope_get_acknowledge(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    ::zippylog::protocol::request::WriteEnvelope *m = (::zippylog::protocol::request::WriteEnvelope *)mud->msg;
    m->has_acknowledge() ? lua_pushboolean(L, m->acknowledge()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelope_set_acknowledge(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    ::zippylog::protocol::request::WriteEnvelope *m = (::zippylog::protocol::request::WriteEnvelope *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_acknowledge();
        return 0;
    }
    
    bool b = lua_toboolean(L, 2);
    m->set_acknowledge(b);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelope_has_acknowledge(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    ::zippylog::protocol::request::WriteEnvelope *m = (::zippylog::protocol::request::WriteEnvelope *)mud->msg;
    lua_pushboolean(L, m->has_acknowledge());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelope_clear_synchronous(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    ::zippylog::protocol::request::WriteEnvelope *m = (::zippylog::protocol::request::WriteEnvelope *)mud->msg;
    m->clear_synchronous();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelope_get_synchronous(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    ::zippylog::protocol::request::WriteEnvelope *m = (::zippylog::protocol::request::WriteEnvelope *)mud->msg;
    m->has_synchronous() ? lua_pushboolean(L, m->synchronous()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelope_set_synchronous(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    ::zippylog::protocol::request::WriteEnvelope *m = (::zippylog::protocol::request::WriteEnvelope *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_synchronous();
        return 0;
    }
    
    bool b = lua_toboolean(L, 2);
    m->set_synchronous(b);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelope_has_synchronous(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelope");
    ::zippylog::protocol::request::WriteEnvelope *m = (::zippylog::protocol::request::WriteEnvelope *)mud->msg;
    lua_pushboolean(L, m->has_synchronous());
    return 1;
}

static const struct luaL_Reg WriteEnvelopeFromMessages_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg WriteEnvelopeFromMessages_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_gc},
    {"clear_version", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_clear_version},
    {"get_version", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_get_version},
    {"set_version", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_set_version},
    {"has_version", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_has_version},
    {"clear_path", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_set_path},
    {"has_path", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_has_path},
    {"clear_message", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_clear_message},
    {"get_message", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_get_message},
    {"set_message", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_set_message},
    {"size_message", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_size_message},
    {"clear_message_namespace", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_clear_message_namespace},
    {"get_message_namespace", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_get_message_namespace},
    {"set_message_namespace", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_set_message_namespace},
    {"size_message_namespace", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_size_message_namespace},
    {"clear_message_type", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_clear_message_type},
    {"get_message_type", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_get_message_type},
    {"set_message_type", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_set_message_type},
    {"size_message_type", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_size_message_type},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, WriteEnvelopeFromMessages_methods);
    lua_pushboolean(L, 1);
    lua_setfield(L, -1, "_isprotobuf");
    luaL_register(L, "protobuf.zippylog.protocol.request.WriteEnvelopeFromMessages", WriteEnvelopeFromMessages_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_pushcopy(lua_State *L, const ::zippylog::protocol::request::WriteEnvelopeFromMessages &from)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::WriteEnvelopeFromMessages(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_pushreference(lua_State *L, ::zippylog::protocol::request::WriteEnvelopeFromMessages *msg, lua_protobuf_gc_callback f, void *data)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_new(lua_State *L)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::WriteEnvelopeFromMessages();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::WriteEnvelopeFromMessages * msg = new ::zippylog::protocol::request::WriteEnvelopeFromMessages();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_gc(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    ::zippylog::protocol::request::WriteEnvelopeFromMessages *m = (::zippylog::protocol::request::WriteEnvelopeFromMessages *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_clear(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    ::zippylog::protocol::request::WriteEnvelopeFromMessages *m = (::zippylog::protocol::request::WriteEnvelopeFromMessages *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_serialized(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    ::zippylog::protocol::request::WriteEnvelopeFromMessages *m = (::zippylog::protocol::request::WriteEnvelopeFromMessages *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_clear_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    ::zippylog::protocol::request::WriteEnvelopeFromMessages *m = (::zippylog::protocol::request::WriteEnvelopeFromMessages *)mud->msg;
    m->clear_version();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_get_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    ::zippylog::protocol::request::WriteEnvelopeFromMessages *m = (::zippylog::protocol::request::WriteEnvelopeFromMessages *)mud->msg;
    m->has_version() ? lua_pushinteger(L, m->version()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_set_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    ::zippylog::protocol::request::WriteEnvelopeFromMessages *m = (::zippylog::protocol::request::WriteEnvelopeFromMessages *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_version();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_version(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_has_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    ::zippylog::protocol::request::WriteEnvelopeFromMessages *m = (::zippylog::protocol::request::WriteEnvelopeFromMessages *)mud->msg;
    lua_pushboolean(L, m->has_version());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_clear_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    ::zippylog::protocol::request::WriteEnvelopeFromMessages *m = (::zippylog::protocol::request::WriteEnvelopeFromMessages *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_get_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    ::zippylog::protocol::request::WriteEnvelopeFromMessages *m = (::zippylog::protocol::request::WriteEnvelopeFromMessages *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_set_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    ::zippylog::protocol::request::WriteEnvelopeFromMessages *m = (::zippylog::protocol::request::WriteEnvelopeFromMessages *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_has_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    ::zippylog::protocol::request::WriteEnvelopeFromMessages *m = (::zippylog::protocol::request::WriteEnvelopeFromMessages *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_clear_message(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    ::zippylog::protocol::request::WriteEnvelopeFromMessages *m = (::zippylog::protocol::request::WriteEnvelopeFromMessages *)mud->msg;
    m->clear_message();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_get_message(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    ::zippylog::protocol::request::WriteEnvelopeFromMessages *m = (::zippylog::protocol::request::WriteEnvelopeFromMessages *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->message_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->message_size());
    }
    string s = m->message(index - 1);
    lua_pushlstring(L, s.c_str(), s.size());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_set_message(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    ::zippylog::protocol::request::WriteEnvelopeFromMessages *m = (::zippylog::protocol::request::WriteEnvelopeFromMessages *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->message_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    size_t length = 0;
    const char *s = luaL_checklstring(L, 3, &length);
    if (index == current_size + 1) {
        m->add_message(s, length);
    }
    else {
        m->set_message(index-1, s, length);
    }
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_size_message(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    ::zippylog::protocol::request::WriteEnvelopeFromMessages *m = (::zippylog::protocol::request::WriteEnvelopeFromMessages *)mud->msg;
    int size = m->message_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_clear_message_namespace(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    ::zippylog::protocol::request::WriteEnvelopeFromMessages *m = (::zippylog::protocol::request::WriteEnvelopeFromMessages *)mud->msg;
    m->clear_message_namespace();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_get_message_namespace(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    ::zippylog::protocol::request::WriteEnvelopeFromMessages *m = (::zippylog::protocol::request::WriteEnvelopeFromMessages *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->message_namespace_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->message_namespace_size());
    }
    lua_pushinteger(L, m->message_namespace(index-1));
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_set_message_namespace(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    ::zippylog::protocol::request::WriteEnvelopeFromMessages *m = (::zippylog::protocol::request::WriteEnvelopeFromMessages *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->message_namespace_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    lua_Integer i = lua_tointeger(L, 3);
    if (index == current_size + 1) {
        m->add_message_namespace(i);
    }
    else {
        m->set_message_namespace(index-1, i);
    }
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_size_message_namespace(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    ::zippylog::protocol::request::WriteEnvelopeFromMessages *m = (::zippylog::protocol::request::WriteEnvelopeFromMessages *)mud->msg;
    int size = m->message_namespace_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_clear_message_type(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    ::zippylog::protocol::request::WriteEnvelopeFromMessages *m = (::zippylog::protocol::request::WriteEnvelopeFromMessages *)mud->msg;
    m->clear_message_type();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_get_message_type(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    ::zippylog::protocol::request::WriteEnvelopeFromMessages *m = (::zippylog::protocol::request::WriteEnvelopeFromMessages *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->message_type_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->message_type_size());
    }
    lua_pushinteger(L, m->message_type(index-1));
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_set_message_type(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    ::zippylog::protocol::request::WriteEnvelopeFromMessages *m = (::zippylog::protocol::request::WriteEnvelopeFromMessages *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->message_type_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    lua_Integer i = lua_tointeger(L, 3);
    if (index == current_size + 1) {
        m->add_message_type(i);
    }
    else {
        m->set_message_type(index-1, i);
    }
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessages_size_message_type(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessages");
    ::zippylog::protocol::request::WriteEnvelopeFromMessages *m = (::zippylog::protocol::request::WriteEnvelopeFromMessages *)mud->msg;
    int size = m->message_type_size();
    lua_pushinteger(L, size);
    return 1;
}

static const struct luaL_Reg SubscribeStoreChanges_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg SubscribeStoreChanges_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_gc},
    {"clear_version", lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_clear_version},
    {"get_version", lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_get_version},
    {"set_version", lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_set_version},
    {"has_version", lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_has_version},
    {"clear_path", lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_set_path},
    {"size_path", lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_size_path},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeStoreChanges");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, SubscribeStoreChanges_methods);
    lua_pushboolean(L, 1);
    lua_setfield(L, -1, "_isprotobuf");
    luaL_register(L, "protobuf.zippylog.protocol.request.SubscribeStoreChanges", SubscribeStoreChanges_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_pushcopy(lua_State *L, const ::zippylog::protocol::request::SubscribeStoreChanges &from)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::SubscribeStoreChanges(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeStoreChanges");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_pushreference(lua_State *L, ::zippylog::protocol::request::SubscribeStoreChanges *msg, lua_protobuf_gc_callback f, void *data)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeStoreChanges");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_new(lua_State *L)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::SubscribeStoreChanges();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeStoreChanges");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::SubscribeStoreChanges * msg = new ::zippylog::protocol::request::SubscribeStoreChanges();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeStoreChanges");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_gc(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeStoreChanges");
    ::zippylog::protocol::request::SubscribeStoreChanges *m = (::zippylog::protocol::request::SubscribeStoreChanges *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_clear(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeStoreChanges");
    ::zippylog::protocol::request::SubscribeStoreChanges *m = (::zippylog::protocol::request::SubscribeStoreChanges *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_serialized(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeStoreChanges");
    ::zippylog::protocol::request::SubscribeStoreChanges *m = (::zippylog::protocol::request::SubscribeStoreChanges *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_clear_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeStoreChanges");
    ::zippylog::protocol::request::SubscribeStoreChanges *m = (::zippylog::protocol::request::SubscribeStoreChanges *)mud->msg;
    m->clear_version();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_get_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeStoreChanges");
    ::zippylog::protocol::request::SubscribeStoreChanges *m = (::zippylog::protocol::request::SubscribeStoreChanges *)mud->msg;
    m->has_version() ? lua_pushinteger(L, m->version()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_set_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeStoreChanges");
    ::zippylog::protocol::request::SubscribeStoreChanges *m = (::zippylog::protocol::request::SubscribeStoreChanges *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_version();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_version(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_has_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeStoreChanges");
    ::zippylog::protocol::request::SubscribeStoreChanges *m = (::zippylog::protocol::request::SubscribeStoreChanges *)mud->msg;
    lua_pushboolean(L, m->has_version());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_clear_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeStoreChanges");
    ::zippylog::protocol::request::SubscribeStoreChanges *m = (::zippylog::protocol::request::SubscribeStoreChanges *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_get_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeStoreChanges");
    ::zippylog::protocol::request::SubscribeStoreChanges *m = (::zippylog::protocol::request::SubscribeStoreChanges *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->path_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->path_size());
    }
    string s = m->path(index - 1);
    lua_pushlstring(L, s.c_str(), s.size());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_set_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeStoreChanges");
    ::zippylog::protocol::request::SubscribeStoreChanges *m = (::zippylog::protocol::request::SubscribeStoreChanges *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->path_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    size_t length = 0;
    const char *s = luaL_checklstring(L, 3, &length);
    if (index == current_size + 1) {
        m->add_path(s, length);
    }
    else {
        m->set_path(index-1, s, length);
    }
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeStoreChanges_size_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeStoreChanges");
    ::zippylog::protocol::request::SubscribeStoreChanges *m = (::zippylog::protocol::request::SubscribeStoreChanges *)mud->msg;
    int size = m->path_size();
    lua_pushinteger(L, size);
    return 1;
}

static const struct luaL_Reg SubscribeEnvelopes_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg SubscribeEnvelopes_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_gc},
    {"clear_version", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_clear_version},
    {"get_version", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_get_version},
    {"set_version", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_set_version},
    {"has_version", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_has_version},
    {"clear_path", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_set_path},
    {"size_path", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_size_path},
    {"clear_lua_code", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_clear_lua_code},
    {"get_lua_code", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_get_lua_code},
    {"set_lua_code", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_set_lua_code},
    {"has_lua_code", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_has_lua_code},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeEnvelopes");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, SubscribeEnvelopes_methods);
    lua_pushboolean(L, 1);
    lua_setfield(L, -1, "_isprotobuf");
    luaL_register(L, "protobuf.zippylog.protocol.request.SubscribeEnvelopes", SubscribeEnvelopes_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_pushcopy(lua_State *L, const ::zippylog::protocol::request::SubscribeEnvelopes &from)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::SubscribeEnvelopes(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeEnvelopes");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_pushreference(lua_State *L, ::zippylog::protocol::request::SubscribeEnvelopes *msg, lua_protobuf_gc_callback f, void *data)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeEnvelopes");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_new(lua_State *L)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::SubscribeEnvelopes();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeEnvelopes");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::SubscribeEnvelopes * msg = new ::zippylog::protocol::request::SubscribeEnvelopes();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeEnvelopes");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_gc(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopes");
    ::zippylog::protocol::request::SubscribeEnvelopes *m = (::zippylog::protocol::request::SubscribeEnvelopes *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_clear(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopes");
    ::zippylog::protocol::request::SubscribeEnvelopes *m = (::zippylog::protocol::request::SubscribeEnvelopes *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_serialized(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopes");
    ::zippylog::protocol::request::SubscribeEnvelopes *m = (::zippylog::protocol::request::SubscribeEnvelopes *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_clear_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopes");
    ::zippylog::protocol::request::SubscribeEnvelopes *m = (::zippylog::protocol::request::SubscribeEnvelopes *)mud->msg;
    m->clear_version();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_get_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopes");
    ::zippylog::protocol::request::SubscribeEnvelopes *m = (::zippylog::protocol::request::SubscribeEnvelopes *)mud->msg;
    m->has_version() ? lua_pushinteger(L, m->version()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_set_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopes");
    ::zippylog::protocol::request::SubscribeEnvelopes *m = (::zippylog::protocol::request::SubscribeEnvelopes *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_version();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_version(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_has_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopes");
    ::zippylog::protocol::request::SubscribeEnvelopes *m = (::zippylog::protocol::request::SubscribeEnvelopes *)mud->msg;
    lua_pushboolean(L, m->has_version());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_clear_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopes");
    ::zippylog::protocol::request::SubscribeEnvelopes *m = (::zippylog::protocol::request::SubscribeEnvelopes *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_get_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopes");
    ::zippylog::protocol::request::SubscribeEnvelopes *m = (::zippylog::protocol::request::SubscribeEnvelopes *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->path_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->path_size());
    }
    string s = m->path(index - 1);
    lua_pushlstring(L, s.c_str(), s.size());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_set_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopes");
    ::zippylog::protocol::request::SubscribeEnvelopes *m = (::zippylog::protocol::request::SubscribeEnvelopes *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->path_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    size_t length = 0;
    const char *s = luaL_checklstring(L, 3, &length);
    if (index == current_size + 1) {
        m->add_path(s, length);
    }
    else {
        m->set_path(index-1, s, length);
    }
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_size_path(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopes");
    ::zippylog::protocol::request::SubscribeEnvelopes *m = (::zippylog::protocol::request::SubscribeEnvelopes *)mud->msg;
    int size = m->path_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_clear_lua_code(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopes");
    ::zippylog::protocol::request::SubscribeEnvelopes *m = (::zippylog::protocol::request::SubscribeEnvelopes *)mud->msg;
    m->clear_lua_code();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_get_lua_code(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopes");
    ::zippylog::protocol::request::SubscribeEnvelopes *m = (::zippylog::protocol::request::SubscribeEnvelopes *)mud->msg;
    string s = m->lua_code();
    m->has_lua_code() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_set_lua_code(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopes");
    ::zippylog::protocol::request::SubscribeEnvelopes *m = (::zippylog::protocol::request::SubscribeEnvelopes *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_lua_code();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_lua_code(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopes_has_lua_code(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopes");
    ::zippylog::protocol::request::SubscribeEnvelopes *m = (::zippylog::protocol::request::SubscribeEnvelopes *)mud->msg;
    lua_pushboolean(L, m->has_lua_code());
    return 1;
}

static const struct luaL_Reg SubscribeKeepalive_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg SubscribeKeepalive_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_gc},
    {"clear_version", lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_clear_version},
    {"get_version", lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_get_version},
    {"set_version", lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_set_version},
    {"has_version", lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_has_version},
    {"clear_id", lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_clear_id},
    {"get_id", lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_get_id},
    {"set_id", lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_set_id},
    {"has_id", lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeKeepalive");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, SubscribeKeepalive_methods);
    lua_pushboolean(L, 1);
    lua_setfield(L, -1, "_isprotobuf");
    luaL_register(L, "protobuf.zippylog.protocol.request.SubscribeKeepalive", SubscribeKeepalive_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_pushcopy(lua_State *L, const ::zippylog::protocol::request::SubscribeKeepalive &from)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::SubscribeKeepalive(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeKeepalive");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_pushreference(lua_State *L, ::zippylog::protocol::request::SubscribeKeepalive *msg, lua_protobuf_gc_callback f, void *data)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeKeepalive");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_new(lua_State *L)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::SubscribeKeepalive();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeKeepalive");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::SubscribeKeepalive * msg = new ::zippylog::protocol::request::SubscribeKeepalive();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeKeepalive");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_gc(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeKeepalive");
    ::zippylog::protocol::request::SubscribeKeepalive *m = (::zippylog::protocol::request::SubscribeKeepalive *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_clear(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeKeepalive");
    ::zippylog::protocol::request::SubscribeKeepalive *m = (::zippylog::protocol::request::SubscribeKeepalive *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_serialized(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeKeepalive");
    ::zippylog::protocol::request::SubscribeKeepalive *m = (::zippylog::protocol::request::SubscribeKeepalive *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_clear_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeKeepalive");
    ::zippylog::protocol::request::SubscribeKeepalive *m = (::zippylog::protocol::request::SubscribeKeepalive *)mud->msg;
    m->clear_version();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_get_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeKeepalive");
    ::zippylog::protocol::request::SubscribeKeepalive *m = (::zippylog::protocol::request::SubscribeKeepalive *)mud->msg;
    m->has_version() ? lua_pushinteger(L, m->version()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_set_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeKeepalive");
    ::zippylog::protocol::request::SubscribeKeepalive *m = (::zippylog::protocol::request::SubscribeKeepalive *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_version();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_version(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_has_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeKeepalive");
    ::zippylog::protocol::request::SubscribeKeepalive *m = (::zippylog::protocol::request::SubscribeKeepalive *)mud->msg;
    lua_pushboolean(L, m->has_version());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_clear_id(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeKeepalive");
    ::zippylog::protocol::request::SubscribeKeepalive *m = (::zippylog::protocol::request::SubscribeKeepalive *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_get_id(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeKeepalive");
    ::zippylog::protocol::request::SubscribeKeepalive *m = (::zippylog::protocol::request::SubscribeKeepalive *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_set_id(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeKeepalive");
    ::zippylog::protocol::request::SubscribeKeepalive *m = (::zippylog::protocol::request::SubscribeKeepalive *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeKeepalive_has_id(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeKeepalive");
    ::zippylog::protocol::request::SubscribeKeepalive *m = (::zippylog::protocol::request::SubscribeKeepalive *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg SubscribeCancel_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_SubscribeCancel_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_SubscribeCancel_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg SubscribeCancel_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_SubscribeCancel_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_SubscribeCancel_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_SubscribeCancel_gc},
    {"clear_version", lua_protobuf_zippylog_protocol_request_SubscribeCancel_clear_version},
    {"get_version", lua_protobuf_zippylog_protocol_request_SubscribeCancel_get_version},
    {"set_version", lua_protobuf_zippylog_protocol_request_SubscribeCancel_set_version},
    {"has_version", lua_protobuf_zippylog_protocol_request_SubscribeCancel_has_version},
    {"clear_id", lua_protobuf_zippylog_protocol_request_SubscribeCancel_clear_id},
    {"get_id", lua_protobuf_zippylog_protocol_request_SubscribeCancel_get_id},
    {"set_id", lua_protobuf_zippylog_protocol_request_SubscribeCancel_set_id},
    {"has_id", lua_protobuf_zippylog_protocol_request_SubscribeCancel_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_SubscribeCancel_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeCancel");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, SubscribeCancel_methods);
    lua_pushboolean(L, 1);
    lua_setfield(L, -1, "_isprotobuf");
    luaL_register(L, "protobuf.zippylog.protocol.request.SubscribeCancel", SubscribeCancel_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_SubscribeCancel_pushcopy(lua_State *L, const ::zippylog::protocol::request::SubscribeCancel &from)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::SubscribeCancel(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeCancel");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_SubscribeCancel_pushreference(lua_State *L, ::zippylog::protocol::request::SubscribeCancel *msg, lua_protobuf_gc_callback f, void *data)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeCancel");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_SubscribeCancel_new(lua_State *L)
{
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::SubscribeCancel();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeCancel");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeCancel_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::SubscribeCancel * msg = new ::zippylog::protocol::request::SubscribeCancel();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    lua_protobuf_udata_t * ud = (lua_protobuf_udata_t *)lua_newuserdata(L, sizeof(lua_protobuf_udata_t));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeCancel");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_SubscribeCancel_gc(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeCancel");
    ::zippylog::protocol::request::SubscribeCancel *m = (::zippylog::protocol::request::SubscribeCancel *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_SubscribeCancel_clear(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeCancel");
    ::zippylog::protocol::request::SubscribeCancel *m = (::zippylog::protocol::request::SubscribeCancel *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_SubscribeCancel_serialized(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeCancel");
    ::zippylog::protocol::request::SubscribeCancel *m = (::zippylog::protocol::request::SubscribeCancel *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_request_SubscribeCancel_clear_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeCancel");
    ::zippylog::protocol::request::SubscribeCancel *m = (::zippylog::protocol::request::SubscribeCancel *)mud->msg;
    m->clear_version();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeCancel_get_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeCancel");
    ::zippylog::protocol::request::SubscribeCancel *m = (::zippylog::protocol::request::SubscribeCancel *)mud->msg;
    m->has_version() ? lua_pushinteger(L, m->version()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeCancel_set_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeCancel");
    ::zippylog::protocol::request::SubscribeCancel *m = (::zippylog::protocol::request::SubscribeCancel *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_version();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_version(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeCancel_has_version(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeCancel");
    ::zippylog::protocol::request::SubscribeCancel *m = (::zippylog::protocol::request::SubscribeCancel *)mud->msg;
    lua_pushboolean(L, m->has_version());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeCancel_clear_id(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeCancel");
    ::zippylog::protocol::request::SubscribeCancel *m = (::zippylog::protocol::request::SubscribeCancel *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeCancel_get_id(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeCancel");
    ::zippylog::protocol::request::SubscribeCancel *m = (::zippylog::protocol::request::SubscribeCancel *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeCancel_set_id(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeCancel");
    ::zippylog::protocol::request::SubscribeCancel *m = (::zippylog::protocol::request::SubscribeCancel *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeCancel_has_id(lua_State *L)
{
    lua_protobuf_udata_t * mud = (lua_protobuf_udata_t *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeCancel");
    ::zippylog::protocol::request::SubscribeCancel *m = (::zippylog::protocol::request::SubscribeCancel *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}
