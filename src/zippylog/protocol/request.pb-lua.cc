// Generated by the lua-protobuf compiler
// You shouldn't edit this file manually
//
// source proto file: zippylog/protocol/request.proto

#include "zippylog/protocol/request.pb-lua.h"

#ifdef __cplusplus
extern "C" { // make sure functions treated with C naming
#endif

#include <lauxlib.h>

#ifdef __cplusplus
}
#endif

#include <string>

// this represents Lua udata for a protocol buffer message
// we record where a message came from so we can GC it properly
typedef struct msg_udata { // confuse over-simplified pretty-printer
    ::google::protobuf::Message * msg;
    bool lua_owns;
    lua_protobuf_gc_callback gc_callback;
    void * callback_data;
} msg_udata;

using ::std::string;

int lua_protobuf_zippylog_protocol_request_open(lua_State *L)
{
    const char *table = luaL_findtable(L, LUA_GLOBALSINDEX, "protobuf.zippylog.protocol.request", 1);
    if (table) {
        return luaL_error(L, "could not create parent Lua tables");
    }
    if (!lua_istable(L, -1)) {
        lua_newtable(L);
        lua_setfield(L, -2, "zippylog.protocol.request");
    }
    lua_pop(L, 1);
    luaL_Reg funcs [] = { { NULL, NULL } };
    luaL_register(L, "protobuf.zippylog.protocol.request", funcs);
    lua_protobuf_zippylog_protocol_request_Ping_open(L);
    lua_protobuf_zippylog_protocol_request_GetFeaturesV1_open(L);
    lua_protobuf_zippylog_protocol_request_GetStoreInfoV1_open(L);
    lua_protobuf_zippylog_protocol_request_GetBucketInfoV1_open(L);
    lua_protobuf_zippylog_protocol_request_GetStreamSetInfoV1_open(L);
    lua_protobuf_zippylog_protocol_request_GetStreamInfoV1_open(L);
    lua_protobuf_zippylog_protocol_request_GetStreamV1_open(L);
    lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_open(L);
    lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_open(L);
    lua_protobuf_zippylog_protocol_request_SubscribeStoreChangesV1_open(L);
    lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_open(L);
    lua_protobuf_zippylog_protocol_request_SubscribeKeepaliveV1_open(L);
    lua_protobuf_zippylog_protocol_request_SubscribeCancelV1_open(L);
    return 1;
}


static const struct luaL_Reg Ping_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_Ping_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_Ping_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg Ping_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_Ping_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_Ping_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_Ping_gc},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_Ping_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.Ping");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, Ping_methods);
    luaL_register(L, "protobuf.zippylog.protocol.request.Ping", Ping_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_Ping_pushcopy(lua_State *L, const ::zippylog::protocol::request::Ping &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::Ping(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.Ping");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_Ping_pushreference(lua_State *L, ::zippylog::protocol::request::Ping *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.Ping");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_Ping_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::Ping();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.Ping");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_Ping_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::Ping * msg = new ::zippylog::protocol::request::Ping();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.Ping");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_Ping_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.Ping");
    ::zippylog::protocol::request::Ping *m = (::zippylog::protocol::request::Ping *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_Ping_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.Ping");
    ::zippylog::protocol::request::Ping *m = (::zippylog::protocol::request::Ping *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_Ping_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.Ping");
    ::zippylog::protocol::request::Ping *m = (::zippylog::protocol::request::Ping *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
static const struct luaL_Reg GetFeaturesV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_GetFeaturesV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_GetFeaturesV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg GetFeaturesV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_GetFeaturesV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_GetFeaturesV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_GetFeaturesV1_gc},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_GetFeaturesV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.GetFeaturesV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, GetFeaturesV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.request.GetFeaturesV1", GetFeaturesV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_GetFeaturesV1_pushcopy(lua_State *L, const ::zippylog::protocol::request::GetFeaturesV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetFeaturesV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetFeaturesV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_GetFeaturesV1_pushreference(lua_State *L, ::zippylog::protocol::request::GetFeaturesV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetFeaturesV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_GetFeaturesV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetFeaturesV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetFeaturesV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetFeaturesV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::GetFeaturesV1 * msg = new ::zippylog::protocol::request::GetFeaturesV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetFeaturesV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_GetFeaturesV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetFeaturesV1");
    ::zippylog::protocol::request::GetFeaturesV1 *m = (::zippylog::protocol::request::GetFeaturesV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetFeaturesV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetFeaturesV1");
    ::zippylog::protocol::request::GetFeaturesV1 *m = (::zippylog::protocol::request::GetFeaturesV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetFeaturesV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetFeaturesV1");
    ::zippylog::protocol::request::GetFeaturesV1 *m = (::zippylog::protocol::request::GetFeaturesV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
static const struct luaL_Reg GetStoreInfoV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_GetStoreInfoV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_GetStoreInfoV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg GetStoreInfoV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_GetStoreInfoV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_GetStoreInfoV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_GetStoreInfoV1_gc},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_GetStoreInfoV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.GetStoreInfoV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, GetStoreInfoV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.request.GetStoreInfoV1", GetStoreInfoV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_GetStoreInfoV1_pushcopy(lua_State *L, const ::zippylog::protocol::request::GetStoreInfoV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetStoreInfoV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStoreInfoV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_GetStoreInfoV1_pushreference(lua_State *L, ::zippylog::protocol::request::GetStoreInfoV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStoreInfoV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_GetStoreInfoV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetStoreInfoV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStoreInfoV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStoreInfoV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::GetStoreInfoV1 * msg = new ::zippylog::protocol::request::GetStoreInfoV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStoreInfoV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_GetStoreInfoV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStoreInfoV1");
    ::zippylog::protocol::request::GetStoreInfoV1 *m = (::zippylog::protocol::request::GetStoreInfoV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetStoreInfoV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStoreInfoV1");
    ::zippylog::protocol::request::GetStoreInfoV1 *m = (::zippylog::protocol::request::GetStoreInfoV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetStoreInfoV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStoreInfoV1");
    ::zippylog::protocol::request::GetStoreInfoV1 *m = (::zippylog::protocol::request::GetStoreInfoV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
static const struct luaL_Reg GetBucketInfoV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_GetBucketInfoV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_GetBucketInfoV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg GetBucketInfoV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_GetBucketInfoV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_GetBucketInfoV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_GetBucketInfoV1_gc},
    {"clear_path", lua_protobuf_zippylog_protocol_request_GetBucketInfoV1_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_request_GetBucketInfoV1_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_request_GetBucketInfoV1_set_path},
    {"has_path", lua_protobuf_zippylog_protocol_request_GetBucketInfoV1_has_path},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_GetBucketInfoV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.GetBucketInfoV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, GetBucketInfoV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.request.GetBucketInfoV1", GetBucketInfoV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_GetBucketInfoV1_pushcopy(lua_State *L, const ::zippylog::protocol::request::GetBucketInfoV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetBucketInfoV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetBucketInfoV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_GetBucketInfoV1_pushreference(lua_State *L, ::zippylog::protocol::request::GetBucketInfoV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetBucketInfoV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_GetBucketInfoV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetBucketInfoV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetBucketInfoV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetBucketInfoV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::GetBucketInfoV1 * msg = new ::zippylog::protocol::request::GetBucketInfoV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetBucketInfoV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_GetBucketInfoV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetBucketInfoV1");
    ::zippylog::protocol::request::GetBucketInfoV1 *m = (::zippylog::protocol::request::GetBucketInfoV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetBucketInfoV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetBucketInfoV1");
    ::zippylog::protocol::request::GetBucketInfoV1 *m = (::zippylog::protocol::request::GetBucketInfoV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetBucketInfoV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetBucketInfoV1");
    ::zippylog::protocol::request::GetBucketInfoV1 *m = (::zippylog::protocol::request::GetBucketInfoV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_request_GetBucketInfoV1_clear_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetBucketInfoV1");
    ::zippylog::protocol::request::GetBucketInfoV1 *m = (::zippylog::protocol::request::GetBucketInfoV1 *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetBucketInfoV1_get_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetBucketInfoV1");
    ::zippylog::protocol::request::GetBucketInfoV1 *m = (::zippylog::protocol::request::GetBucketInfoV1 *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetBucketInfoV1_set_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetBucketInfoV1");
    ::zippylog::protocol::request::GetBucketInfoV1 *m = (::zippylog::protocol::request::GetBucketInfoV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetBucketInfoV1_has_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetBucketInfoV1");
    ::zippylog::protocol::request::GetBucketInfoV1 *m = (::zippylog::protocol::request::GetBucketInfoV1 *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

static const struct luaL_Reg GetStreamSetInfoV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_GetStreamSetInfoV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_GetStreamSetInfoV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg GetStreamSetInfoV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_GetStreamSetInfoV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_GetStreamSetInfoV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_GetStreamSetInfoV1_gc},
    {"clear_path", lua_protobuf_zippylog_protocol_request_GetStreamSetInfoV1_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_request_GetStreamSetInfoV1_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_request_GetStreamSetInfoV1_set_path},
    {"has_path", lua_protobuf_zippylog_protocol_request_GetStreamSetInfoV1_has_path},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_GetStreamSetInfoV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamSetInfoV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, GetStreamSetInfoV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.request.GetStreamSetInfoV1", GetStreamSetInfoV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_GetStreamSetInfoV1_pushcopy(lua_State *L, const ::zippylog::protocol::request::GetStreamSetInfoV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetStreamSetInfoV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamSetInfoV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_GetStreamSetInfoV1_pushreference(lua_State *L, ::zippylog::protocol::request::GetStreamSetInfoV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamSetInfoV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_GetStreamSetInfoV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetStreamSetInfoV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamSetInfoV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStreamSetInfoV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::GetStreamSetInfoV1 * msg = new ::zippylog::protocol::request::GetStreamSetInfoV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamSetInfoV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_GetStreamSetInfoV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamSetInfoV1");
    ::zippylog::protocol::request::GetStreamSetInfoV1 *m = (::zippylog::protocol::request::GetStreamSetInfoV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetStreamSetInfoV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamSetInfoV1");
    ::zippylog::protocol::request::GetStreamSetInfoV1 *m = (::zippylog::protocol::request::GetStreamSetInfoV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetStreamSetInfoV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamSetInfoV1");
    ::zippylog::protocol::request::GetStreamSetInfoV1 *m = (::zippylog::protocol::request::GetStreamSetInfoV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_request_GetStreamSetInfoV1_clear_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamSetInfoV1");
    ::zippylog::protocol::request::GetStreamSetInfoV1 *m = (::zippylog::protocol::request::GetStreamSetInfoV1 *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStreamSetInfoV1_get_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamSetInfoV1");
    ::zippylog::protocol::request::GetStreamSetInfoV1 *m = (::zippylog::protocol::request::GetStreamSetInfoV1 *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStreamSetInfoV1_set_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamSetInfoV1");
    ::zippylog::protocol::request::GetStreamSetInfoV1 *m = (::zippylog::protocol::request::GetStreamSetInfoV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStreamSetInfoV1_has_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamSetInfoV1");
    ::zippylog::protocol::request::GetStreamSetInfoV1 *m = (::zippylog::protocol::request::GetStreamSetInfoV1 *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

static const struct luaL_Reg GetStreamInfoV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_GetStreamInfoV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_GetStreamInfoV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg GetStreamInfoV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_GetStreamInfoV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_GetStreamInfoV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_GetStreamInfoV1_gc},
    {"clear_path", lua_protobuf_zippylog_protocol_request_GetStreamInfoV1_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_request_GetStreamInfoV1_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_request_GetStreamInfoV1_set_path},
    {"has_path", lua_protobuf_zippylog_protocol_request_GetStreamInfoV1_has_path},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_GetStreamInfoV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamInfoV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, GetStreamInfoV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.request.GetStreamInfoV1", GetStreamInfoV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_GetStreamInfoV1_pushcopy(lua_State *L, const ::zippylog::protocol::request::GetStreamInfoV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetStreamInfoV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamInfoV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_GetStreamInfoV1_pushreference(lua_State *L, ::zippylog::protocol::request::GetStreamInfoV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamInfoV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_GetStreamInfoV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetStreamInfoV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamInfoV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStreamInfoV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::GetStreamInfoV1 * msg = new ::zippylog::protocol::request::GetStreamInfoV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamInfoV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_GetStreamInfoV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamInfoV1");
    ::zippylog::protocol::request::GetStreamInfoV1 *m = (::zippylog::protocol::request::GetStreamInfoV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetStreamInfoV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamInfoV1");
    ::zippylog::protocol::request::GetStreamInfoV1 *m = (::zippylog::protocol::request::GetStreamInfoV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetStreamInfoV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamInfoV1");
    ::zippylog::protocol::request::GetStreamInfoV1 *m = (::zippylog::protocol::request::GetStreamInfoV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_request_GetStreamInfoV1_clear_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamInfoV1");
    ::zippylog::protocol::request::GetStreamInfoV1 *m = (::zippylog::protocol::request::GetStreamInfoV1 *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStreamInfoV1_get_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamInfoV1");
    ::zippylog::protocol::request::GetStreamInfoV1 *m = (::zippylog::protocol::request::GetStreamInfoV1 *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStreamInfoV1_set_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamInfoV1");
    ::zippylog::protocol::request::GetStreamInfoV1 *m = (::zippylog::protocol::request::GetStreamInfoV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStreamInfoV1_has_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamInfoV1");
    ::zippylog::protocol::request::GetStreamInfoV1 *m = (::zippylog::protocol::request::GetStreamInfoV1 *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

static const struct luaL_Reg GetStreamV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_GetStreamV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_GetStreamV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg GetStreamV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_GetStreamV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_GetStreamV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_GetStreamV1_gc},
    {"clear_path", lua_protobuf_zippylog_protocol_request_GetStreamV1_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_request_GetStreamV1_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_request_GetStreamV1_set_path},
    {"has_path", lua_protobuf_zippylog_protocol_request_GetStreamV1_has_path},
    {"clear_start_offset", lua_protobuf_zippylog_protocol_request_GetStreamV1_clear_start_offset},
    {"get_start_offset", lua_protobuf_zippylog_protocol_request_GetStreamV1_get_start_offset},
    {"set_start_offset", lua_protobuf_zippylog_protocol_request_GetStreamV1_set_start_offset},
    {"has_start_offset", lua_protobuf_zippylog_protocol_request_GetStreamV1_has_start_offset},
    {"clear_max_response_bytes", lua_protobuf_zippylog_protocol_request_GetStreamV1_clear_max_response_bytes},
    {"get_max_response_bytes", lua_protobuf_zippylog_protocol_request_GetStreamV1_get_max_response_bytes},
    {"set_max_response_bytes", lua_protobuf_zippylog_protocol_request_GetStreamV1_set_max_response_bytes},
    {"has_max_response_bytes", lua_protobuf_zippylog_protocol_request_GetStreamV1_has_max_response_bytes},
    {"clear_max_response_envelopes", lua_protobuf_zippylog_protocol_request_GetStreamV1_clear_max_response_envelopes},
    {"get_max_response_envelopes", lua_protobuf_zippylog_protocol_request_GetStreamV1_get_max_response_envelopes},
    {"set_max_response_envelopes", lua_protobuf_zippylog_protocol_request_GetStreamV1_set_max_response_envelopes},
    {"has_max_response_envelopes", lua_protobuf_zippylog_protocol_request_GetStreamV1_has_max_response_envelopes},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_GetStreamV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, GetStreamV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.request.GetStreamV1", GetStreamV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_GetStreamV1_pushcopy(lua_State *L, const ::zippylog::protocol::request::GetStreamV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetStreamV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_GetStreamV1_pushreference(lua_State *L, ::zippylog::protocol::request::GetStreamV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_GetStreamV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::GetStreamV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStreamV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::GetStreamV1 * msg = new ::zippylog::protocol::request::GetStreamV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.GetStreamV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_GetStreamV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamV1");
    ::zippylog::protocol::request::GetStreamV1 *m = (::zippylog::protocol::request::GetStreamV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetStreamV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamV1");
    ::zippylog::protocol::request::GetStreamV1 *m = (::zippylog::protocol::request::GetStreamV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_GetStreamV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamV1");
    ::zippylog::protocol::request::GetStreamV1 *m = (::zippylog::protocol::request::GetStreamV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_request_GetStreamV1_clear_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamV1");
    ::zippylog::protocol::request::GetStreamV1 *m = (::zippylog::protocol::request::GetStreamV1 *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStreamV1_get_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamV1");
    ::zippylog::protocol::request::GetStreamV1 *m = (::zippylog::protocol::request::GetStreamV1 *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStreamV1_set_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamV1");
    ::zippylog::protocol::request::GetStreamV1 *m = (::zippylog::protocol::request::GetStreamV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStreamV1_has_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamV1");
    ::zippylog::protocol::request::GetStreamV1 *m = (::zippylog::protocol::request::GetStreamV1 *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStreamV1_clear_start_offset(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamV1");
    ::zippylog::protocol::request::GetStreamV1 *m = (::zippylog::protocol::request::GetStreamV1 *)mud->msg;
    m->clear_start_offset();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStreamV1_get_start_offset(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamV1");
    ::zippylog::protocol::request::GetStreamV1 *m = (::zippylog::protocol::request::GetStreamV1 *)mud->msg;
    m->has_start_offset() ? lua_pushinteger(L, m->start_offset()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStreamV1_set_start_offset(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamV1");
    ::zippylog::protocol::request::GetStreamV1 *m = (::zippylog::protocol::request::GetStreamV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_start_offset();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_start_offset(i);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStreamV1_has_start_offset(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamV1");
    ::zippylog::protocol::request::GetStreamV1 *m = (::zippylog::protocol::request::GetStreamV1 *)mud->msg;
    lua_pushboolean(L, m->has_start_offset());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStreamV1_clear_max_response_bytes(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamV1");
    ::zippylog::protocol::request::GetStreamV1 *m = (::zippylog::protocol::request::GetStreamV1 *)mud->msg;
    m->clear_max_response_bytes();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStreamV1_get_max_response_bytes(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamV1");
    ::zippylog::protocol::request::GetStreamV1 *m = (::zippylog::protocol::request::GetStreamV1 *)mud->msg;
    m->has_max_response_bytes() ? lua_pushinteger(L, m->max_response_bytes()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStreamV1_set_max_response_bytes(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamV1");
    ::zippylog::protocol::request::GetStreamV1 *m = (::zippylog::protocol::request::GetStreamV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_max_response_bytes();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_max_response_bytes(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStreamV1_has_max_response_bytes(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamV1");
    ::zippylog::protocol::request::GetStreamV1 *m = (::zippylog::protocol::request::GetStreamV1 *)mud->msg;
    lua_pushboolean(L, m->has_max_response_bytes());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStreamV1_clear_max_response_envelopes(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamV1");
    ::zippylog::protocol::request::GetStreamV1 *m = (::zippylog::protocol::request::GetStreamV1 *)mud->msg;
    m->clear_max_response_envelopes();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStreamV1_get_max_response_envelopes(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamV1");
    ::zippylog::protocol::request::GetStreamV1 *m = (::zippylog::protocol::request::GetStreamV1 *)mud->msg;
    m->has_max_response_envelopes() ? lua_pushinteger(L, m->max_response_envelopes()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_GetStreamV1_set_max_response_envelopes(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamV1");
    ::zippylog::protocol::request::GetStreamV1 *m = (::zippylog::protocol::request::GetStreamV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_max_response_envelopes();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_max_response_envelopes(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_GetStreamV1_has_max_response_envelopes(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.GetStreamV1");
    ::zippylog::protocol::request::GetStreamV1 *m = (::zippylog::protocol::request::GetStreamV1 *)mud->msg;
    lua_pushboolean(L, m->has_max_response_envelopes());
    return 1;
}

static const struct luaL_Reg WriteEnvelopeV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg WriteEnvelopeV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_gc},
    {"clear_path", lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_set_path},
    {"has_path", lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_has_path},
    {"clear_envelope", lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_clear_envelope},
    {"get_envelope", lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_get_envelope},
    {"set_envelope", lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_set_envelope},
    {"size_envelope", lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_size_envelope},
    {"clear_acknowledge", lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_clear_acknowledge},
    {"get_acknowledge", lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_get_acknowledge},
    {"set_acknowledge", lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_set_acknowledge},
    {"has_acknowledge", lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_has_acknowledge},
    {"clear_synchronous", lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_clear_synchronous},
    {"get_synchronous", lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_get_synchronous},
    {"set_synchronous", lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_set_synchronous},
    {"has_synchronous", lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_has_synchronous},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, WriteEnvelopeV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.request.WriteEnvelopeV1", WriteEnvelopeV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_pushcopy(lua_State *L, const ::zippylog::protocol::request::WriteEnvelopeV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::WriteEnvelopeV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_pushreference(lua_State *L, ::zippylog::protocol::request::WriteEnvelopeV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::WriteEnvelopeV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::WriteEnvelopeV1 * msg = new ::zippylog::protocol::request::WriteEnvelopeV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    ::zippylog::protocol::request::WriteEnvelopeV1 *m = (::zippylog::protocol::request::WriteEnvelopeV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    ::zippylog::protocol::request::WriteEnvelopeV1 *m = (::zippylog::protocol::request::WriteEnvelopeV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    ::zippylog::protocol::request::WriteEnvelopeV1 *m = (::zippylog::protocol::request::WriteEnvelopeV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_clear_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    ::zippylog::protocol::request::WriteEnvelopeV1 *m = (::zippylog::protocol::request::WriteEnvelopeV1 *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_get_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    ::zippylog::protocol::request::WriteEnvelopeV1 *m = (::zippylog::protocol::request::WriteEnvelopeV1 *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_set_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    ::zippylog::protocol::request::WriteEnvelopeV1 *m = (::zippylog::protocol::request::WriteEnvelopeV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_has_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    ::zippylog::protocol::request::WriteEnvelopeV1 *m = (::zippylog::protocol::request::WriteEnvelopeV1 *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_clear_envelope(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    ::zippylog::protocol::request::WriteEnvelopeV1 *m = (::zippylog::protocol::request::WriteEnvelopeV1 *)mud->msg;
    m->clear_envelope();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_get_envelope(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    ::zippylog::protocol::request::WriteEnvelopeV1 *m = (::zippylog::protocol::request::WriteEnvelopeV1 *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->envelope_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->envelope_size());
    }
    string s = m->envelope(index - 1);
    lua_pushlstring(L, s.c_str(), s.size());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_set_envelope(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    ::zippylog::protocol::request::WriteEnvelopeV1 *m = (::zippylog::protocol::request::WriteEnvelopeV1 *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->envelope_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    size_t length = 0;
    const char *s = luaL_checklstring(L, 3, &length);
    if (index == current_size + 1) {
        m->add_envelope(s, length);
    }
    else {
        m->set_envelope(index-1, s, length);
    }
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_size_envelope(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    ::zippylog::protocol::request::WriteEnvelopeV1 *m = (::zippylog::protocol::request::WriteEnvelopeV1 *)mud->msg;
    int size = m->envelope_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_clear_acknowledge(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    ::zippylog::protocol::request::WriteEnvelopeV1 *m = (::zippylog::protocol::request::WriteEnvelopeV1 *)mud->msg;
    m->clear_acknowledge();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_get_acknowledge(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    ::zippylog::protocol::request::WriteEnvelopeV1 *m = (::zippylog::protocol::request::WriteEnvelopeV1 *)mud->msg;
    m->has_acknowledge() ? lua_pushboolean(L, m->acknowledge()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_set_acknowledge(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    ::zippylog::protocol::request::WriteEnvelopeV1 *m = (::zippylog::protocol::request::WriteEnvelopeV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_acknowledge();
        return 0;
    }
    
    bool b = lua_toboolean(L, 2);
    m->set_acknowledge(b);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_has_acknowledge(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    ::zippylog::protocol::request::WriteEnvelopeV1 *m = (::zippylog::protocol::request::WriteEnvelopeV1 *)mud->msg;
    lua_pushboolean(L, m->has_acknowledge());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_clear_synchronous(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    ::zippylog::protocol::request::WriteEnvelopeV1 *m = (::zippylog::protocol::request::WriteEnvelopeV1 *)mud->msg;
    m->clear_synchronous();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_get_synchronous(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    ::zippylog::protocol::request::WriteEnvelopeV1 *m = (::zippylog::protocol::request::WriteEnvelopeV1 *)mud->msg;
    m->has_synchronous() ? lua_pushboolean(L, m->synchronous()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_set_synchronous(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    ::zippylog::protocol::request::WriteEnvelopeV1 *m = (::zippylog::protocol::request::WriteEnvelopeV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_synchronous();
        return 0;
    }
    
    bool b = lua_toboolean(L, 2);
    m->set_synchronous(b);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeV1_has_synchronous(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeV1");
    ::zippylog::protocol::request::WriteEnvelopeV1 *m = (::zippylog::protocol::request::WriteEnvelopeV1 *)mud->msg;
    lua_pushboolean(L, m->has_synchronous());
    return 1;
}

static const struct luaL_Reg WriteEnvelopeFromMessagesV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg WriteEnvelopeFromMessagesV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_gc},
    {"clear_path", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_set_path},
    {"has_path", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_has_path},
    {"clear_message", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_clear_message},
    {"get_message", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_get_message},
    {"set_message", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_set_message},
    {"size_message", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_size_message},
    {"clear_message_namespace", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_clear_message_namespace},
    {"get_message_namespace", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_get_message_namespace},
    {"set_message_namespace", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_set_message_namespace},
    {"size_message_namespace", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_size_message_namespace},
    {"clear_message_type", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_clear_message_type},
    {"get_message_type", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_get_message_type},
    {"set_message_type", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_set_message_type},
    {"size_message_type", lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_size_message_type},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, WriteEnvelopeFromMessagesV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.request.WriteEnvelopeFromMessagesV1", WriteEnvelopeFromMessagesV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_pushcopy(lua_State *L, const ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_pushreference(lua_State *L, ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 * msg = new ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *m = (::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *m = (::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *m = (::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_clear_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *m = (::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_get_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *m = (::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_set_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *m = (::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_has_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *m = (::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_clear_message(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *m = (::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *)mud->msg;
    m->clear_message();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_get_message(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *m = (::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->message_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->message_size());
    }
    string s = m->message(index - 1);
    lua_pushlstring(L, s.c_str(), s.size());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_set_message(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *m = (::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->message_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    size_t length = 0;
    const char *s = luaL_checklstring(L, 3, &length);
    if (index == current_size + 1) {
        m->add_message(s, length);
    }
    else {
        m->set_message(index-1, s, length);
    }
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_size_message(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *m = (::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *)mud->msg;
    int size = m->message_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_clear_message_namespace(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *m = (::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *)mud->msg;
    m->clear_message_namespace();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_get_message_namespace(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *m = (::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->message_namespace_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->message_namespace_size());
    }
    lua_pushinteger(L, m->message_namespace(index-1));
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_set_message_namespace(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *m = (::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->message_namespace_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    lua_Integer i = lua_tointeger(L, 3);
    if (index == current_size + 1) {
        m->add_message_namespace(i);
    }
    else {
        m->set_message_namespace(index-1, i);
    }
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_size_message_namespace(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *m = (::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *)mud->msg;
    int size = m->message_namespace_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_clear_message_type(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *m = (::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *)mud->msg;
    m->clear_message_type();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_get_message_type(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *m = (::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->message_type_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->message_type_size());
    }
    lua_pushinteger(L, m->message_type(index-1));
    return 1;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_set_message_type(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *m = (::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->message_type_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    lua_Integer i = lua_tointeger(L, 3);
    if (index == current_size + 1) {
        m->add_message_type(i);
    }
    else {
        m->set_message_type(index-1, i);
    }
    return 0;
}

int lua_protobuf_zippylog_protocol_request_WriteEnvelopeFromMessagesV1_size_message_type(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.WriteEnvelopeFromMessagesV1");
    ::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *m = (::zippylog::protocol::request::WriteEnvelopeFromMessagesV1 *)mud->msg;
    int size = m->message_type_size();
    lua_pushinteger(L, size);
    return 1;
}

static const struct luaL_Reg SubscribeStoreChangesV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_SubscribeStoreChangesV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_SubscribeStoreChangesV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg SubscribeStoreChangesV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_SubscribeStoreChangesV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_SubscribeStoreChangesV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_SubscribeStoreChangesV1_gc},
    {"clear_path", lua_protobuf_zippylog_protocol_request_SubscribeStoreChangesV1_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_request_SubscribeStoreChangesV1_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_request_SubscribeStoreChangesV1_set_path},
    {"size_path", lua_protobuf_zippylog_protocol_request_SubscribeStoreChangesV1_size_path},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_SubscribeStoreChangesV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeStoreChangesV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, SubscribeStoreChangesV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.request.SubscribeStoreChangesV1", SubscribeStoreChangesV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_SubscribeStoreChangesV1_pushcopy(lua_State *L, const ::zippylog::protocol::request::SubscribeStoreChangesV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::SubscribeStoreChangesV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeStoreChangesV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_SubscribeStoreChangesV1_pushreference(lua_State *L, ::zippylog::protocol::request::SubscribeStoreChangesV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeStoreChangesV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_SubscribeStoreChangesV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::SubscribeStoreChangesV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeStoreChangesV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeStoreChangesV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::SubscribeStoreChangesV1 * msg = new ::zippylog::protocol::request::SubscribeStoreChangesV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeStoreChangesV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_SubscribeStoreChangesV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeStoreChangesV1");
    ::zippylog::protocol::request::SubscribeStoreChangesV1 *m = (::zippylog::protocol::request::SubscribeStoreChangesV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_SubscribeStoreChangesV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeStoreChangesV1");
    ::zippylog::protocol::request::SubscribeStoreChangesV1 *m = (::zippylog::protocol::request::SubscribeStoreChangesV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_SubscribeStoreChangesV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeStoreChangesV1");
    ::zippylog::protocol::request::SubscribeStoreChangesV1 *m = (::zippylog::protocol::request::SubscribeStoreChangesV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_request_SubscribeStoreChangesV1_clear_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeStoreChangesV1");
    ::zippylog::protocol::request::SubscribeStoreChangesV1 *m = (::zippylog::protocol::request::SubscribeStoreChangesV1 *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeStoreChangesV1_get_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeStoreChangesV1");
    ::zippylog::protocol::request::SubscribeStoreChangesV1 *m = (::zippylog::protocol::request::SubscribeStoreChangesV1 *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->path_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->path_size());
    }
    string s = m->path(index - 1);
    lua_pushlstring(L, s.c_str(), s.size());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeStoreChangesV1_set_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeStoreChangesV1");
    ::zippylog::protocol::request::SubscribeStoreChangesV1 *m = (::zippylog::protocol::request::SubscribeStoreChangesV1 *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->path_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    size_t length = 0;
    const char *s = luaL_checklstring(L, 3, &length);
    if (index == current_size + 1) {
        m->add_path(s, length);
    }
    else {
        m->set_path(index-1, s, length);
    }
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeStoreChangesV1_size_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeStoreChangesV1");
    ::zippylog::protocol::request::SubscribeStoreChangesV1 *m = (::zippylog::protocol::request::SubscribeStoreChangesV1 *)mud->msg;
    int size = m->path_size();
    lua_pushinteger(L, size);
    return 1;
}

static const struct luaL_Reg SubscribeEnvelopesV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg SubscribeEnvelopesV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_gc},
    {"clear_path", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_set_path},
    {"size_path", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_size_path},
    {"clear_lua_code", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_clear_lua_code},
    {"get_lua_code", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_get_lua_code},
    {"set_lua_code", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_set_lua_code},
    {"has_lua_code", lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_has_lua_code},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeEnvelopesV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, SubscribeEnvelopesV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.request.SubscribeEnvelopesV1", SubscribeEnvelopesV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_pushcopy(lua_State *L, const ::zippylog::protocol::request::SubscribeEnvelopesV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::SubscribeEnvelopesV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeEnvelopesV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_pushreference(lua_State *L, ::zippylog::protocol::request::SubscribeEnvelopesV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeEnvelopesV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::SubscribeEnvelopesV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeEnvelopesV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::SubscribeEnvelopesV1 * msg = new ::zippylog::protocol::request::SubscribeEnvelopesV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeEnvelopesV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopesV1");
    ::zippylog::protocol::request::SubscribeEnvelopesV1 *m = (::zippylog::protocol::request::SubscribeEnvelopesV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopesV1");
    ::zippylog::protocol::request::SubscribeEnvelopesV1 *m = (::zippylog::protocol::request::SubscribeEnvelopesV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopesV1");
    ::zippylog::protocol::request::SubscribeEnvelopesV1 *m = (::zippylog::protocol::request::SubscribeEnvelopesV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_clear_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopesV1");
    ::zippylog::protocol::request::SubscribeEnvelopesV1 *m = (::zippylog::protocol::request::SubscribeEnvelopesV1 *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_get_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopesV1");
    ::zippylog::protocol::request::SubscribeEnvelopesV1 *m = (::zippylog::protocol::request::SubscribeEnvelopesV1 *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->path_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->path_size());
    }
    string s = m->path(index - 1);
    lua_pushlstring(L, s.c_str(), s.size());
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_set_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopesV1");
    ::zippylog::protocol::request::SubscribeEnvelopesV1 *m = (::zippylog::protocol::request::SubscribeEnvelopesV1 *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->path_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    size_t length = 0;
    const char *s = luaL_checklstring(L, 3, &length);
    if (index == current_size + 1) {
        m->add_path(s, length);
    }
    else {
        m->set_path(index-1, s, length);
    }
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_size_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopesV1");
    ::zippylog::protocol::request::SubscribeEnvelopesV1 *m = (::zippylog::protocol::request::SubscribeEnvelopesV1 *)mud->msg;
    int size = m->path_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_clear_lua_code(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopesV1");
    ::zippylog::protocol::request::SubscribeEnvelopesV1 *m = (::zippylog::protocol::request::SubscribeEnvelopesV1 *)mud->msg;
    m->clear_lua_code();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_get_lua_code(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopesV1");
    ::zippylog::protocol::request::SubscribeEnvelopesV1 *m = (::zippylog::protocol::request::SubscribeEnvelopesV1 *)mud->msg;
    string s = m->lua_code();
    m->has_lua_code() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_set_lua_code(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopesV1");
    ::zippylog::protocol::request::SubscribeEnvelopesV1 *m = (::zippylog::protocol::request::SubscribeEnvelopesV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_lua_code();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_lua_code(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeEnvelopesV1_has_lua_code(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeEnvelopesV1");
    ::zippylog::protocol::request::SubscribeEnvelopesV1 *m = (::zippylog::protocol::request::SubscribeEnvelopesV1 *)mud->msg;
    lua_pushboolean(L, m->has_lua_code());
    return 1;
}

static const struct luaL_Reg SubscribeKeepaliveV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_SubscribeKeepaliveV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_SubscribeKeepaliveV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg SubscribeKeepaliveV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_SubscribeKeepaliveV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_SubscribeKeepaliveV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_SubscribeKeepaliveV1_gc},
    {"clear_id", lua_protobuf_zippylog_protocol_request_SubscribeKeepaliveV1_clear_id},
    {"get_id", lua_protobuf_zippylog_protocol_request_SubscribeKeepaliveV1_get_id},
    {"set_id", lua_protobuf_zippylog_protocol_request_SubscribeKeepaliveV1_set_id},
    {"has_id", lua_protobuf_zippylog_protocol_request_SubscribeKeepaliveV1_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_SubscribeKeepaliveV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeKeepaliveV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, SubscribeKeepaliveV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.request.SubscribeKeepaliveV1", SubscribeKeepaliveV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_SubscribeKeepaliveV1_pushcopy(lua_State *L, const ::zippylog::protocol::request::SubscribeKeepaliveV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::SubscribeKeepaliveV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeKeepaliveV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_SubscribeKeepaliveV1_pushreference(lua_State *L, ::zippylog::protocol::request::SubscribeKeepaliveV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeKeepaliveV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_SubscribeKeepaliveV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::SubscribeKeepaliveV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeKeepaliveV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeKeepaliveV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::SubscribeKeepaliveV1 * msg = new ::zippylog::protocol::request::SubscribeKeepaliveV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeKeepaliveV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_SubscribeKeepaliveV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeKeepaliveV1");
    ::zippylog::protocol::request::SubscribeKeepaliveV1 *m = (::zippylog::protocol::request::SubscribeKeepaliveV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_SubscribeKeepaliveV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeKeepaliveV1");
    ::zippylog::protocol::request::SubscribeKeepaliveV1 *m = (::zippylog::protocol::request::SubscribeKeepaliveV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_SubscribeKeepaliveV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeKeepaliveV1");
    ::zippylog::protocol::request::SubscribeKeepaliveV1 *m = (::zippylog::protocol::request::SubscribeKeepaliveV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_request_SubscribeKeepaliveV1_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeKeepaliveV1");
    ::zippylog::protocol::request::SubscribeKeepaliveV1 *m = (::zippylog::protocol::request::SubscribeKeepaliveV1 *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeKeepaliveV1_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeKeepaliveV1");
    ::zippylog::protocol::request::SubscribeKeepaliveV1 *m = (::zippylog::protocol::request::SubscribeKeepaliveV1 *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeKeepaliveV1_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeKeepaliveV1");
    ::zippylog::protocol::request::SubscribeKeepaliveV1 *m = (::zippylog::protocol::request::SubscribeKeepaliveV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeKeepaliveV1_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeKeepaliveV1");
    ::zippylog::protocol::request::SubscribeKeepaliveV1 *m = (::zippylog::protocol::request::SubscribeKeepaliveV1 *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg SubscribeCancelV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_request_SubscribeCancelV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_request_SubscribeCancelV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg SubscribeCancelV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_request_SubscribeCancelV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_request_SubscribeCancelV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_request_SubscribeCancelV1_gc},
    {"clear_id", lua_protobuf_zippylog_protocol_request_SubscribeCancelV1_clear_id},
    {"get_id", lua_protobuf_zippylog_protocol_request_SubscribeCancelV1_get_id},
    {"set_id", lua_protobuf_zippylog_protocol_request_SubscribeCancelV1_set_id},
    {"has_id", lua_protobuf_zippylog_protocol_request_SubscribeCancelV1_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_request_SubscribeCancelV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeCancelV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, SubscribeCancelV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.request.SubscribeCancelV1", SubscribeCancelV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_request_SubscribeCancelV1_pushcopy(lua_State *L, const ::zippylog::protocol::request::SubscribeCancelV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::SubscribeCancelV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeCancelV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_request_SubscribeCancelV1_pushreference(lua_State *L, ::zippylog::protocol::request::SubscribeCancelV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeCancelV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_request_SubscribeCancelV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::request::SubscribeCancelV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeCancelV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeCancelV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::request::SubscribeCancelV1 * msg = new ::zippylog::protocol::request::SubscribeCancelV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.request.SubscribeCancelV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_request_SubscribeCancelV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeCancelV1");
    ::zippylog::protocol::request::SubscribeCancelV1 *m = (::zippylog::protocol::request::SubscribeCancelV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_request_SubscribeCancelV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeCancelV1");
    ::zippylog::protocol::request::SubscribeCancelV1 *m = (::zippylog::protocol::request::SubscribeCancelV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_request_SubscribeCancelV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeCancelV1");
    ::zippylog::protocol::request::SubscribeCancelV1 *m = (::zippylog::protocol::request::SubscribeCancelV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_request_SubscribeCancelV1_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeCancelV1");
    ::zippylog::protocol::request::SubscribeCancelV1 *m = (::zippylog::protocol::request::SubscribeCancelV1 *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeCancelV1_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeCancelV1");
    ::zippylog::protocol::request::SubscribeCancelV1 *m = (::zippylog::protocol::request::SubscribeCancelV1 *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_request_SubscribeCancelV1_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeCancelV1");
    ::zippylog::protocol::request::SubscribeCancelV1 *m = (::zippylog::protocol::request::SubscribeCancelV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_request_SubscribeCancelV1_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.request.SubscribeCancelV1");
    ::zippylog::protocol::request::SubscribeCancelV1 *m = (::zippylog::protocol::request::SubscribeCancelV1 *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}
