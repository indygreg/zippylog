// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zippylog/protocol/response.proto

#ifndef PROTOBUF_zippylog_2fprotocol_2fresponse_2eproto__INCLUDED
#define PROTOBUF_zippylog_2fprotocol_2fresponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <zippylog/envelope.hpp>
// @@protoc_insertion_point(includes)

namespace zippylog {
namespace protocol {
namespace response {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();
void protobuf_AssignDesc_zippylog_2fprotocol_2fresponse_2eproto();
void protobuf_ShutdownFile_zippylog_2fprotocol_2fresponse_2eproto();

class Pong;
class FeatureSpecification;
class StreamSegmentStart;
class StreamSegmentEnd;
class SubscribeAck;
class SubscriptionStart;
class WriteAck;
class Error;

enum ErrorCode {
  ENVELOPE_PARSE_FAILURE = 1,
  INVALID_MESSAGE_NAMESPACE = 2,
  UNKNOWN_REQUEST_TYPE = 3,
  EMPTY_ENVELOPE = 4,
  MISSING_ENUMERATIONS = 5,
  REQUEST_NOT_IMPLEMENTED = 6,
  EMPTY_FIELD = 7,
  FIELD_LENGTHS_DIFFERENT = 8,
  INVALID_STREAM_OFFSET = 9,
  INVALID_OFFSET = 10,
  PATH_NOT_FOUND = 11,
  LIMIT_EXCEEDED = 12,
  UNKNOWN_MESSAGE_FORMAT_VERSION = 13,
  INVALID_PATH = 14,
  UNSUPPORTED_OPERATION_MESSAGE_VERSION = 15,
  EMPTY_MESSAGE = 16,
  PROTOCOL_NO_ENVELOPE = 17,
  GENERAL_ERROR_PROCESSING = 18
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = ENVELOPE_PARSE_FAILURE;
const ErrorCode ErrorCode_MAX = GENERAL_ERROR_PROCESSING;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class Pong : public ::google::protobuf::Message {
 public:
  Pong();
  virtual ~Pong();
  
  Pong(const Pong& from);
  
  inline Pong& operator=(const Pong& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pong& default_instance();
  
  void Swap(Pong* other);
  
  // implements Message ----------------------------------------------
  
  Pong* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pong& from);
  void MergeFrom(const Pong& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 126;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.response.Pong)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2fresponse_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Pong* default_instance_;
};
// -------------------------------------------------------------------

class FeatureSpecification : public ::google::protobuf::Message {
 public:
  FeatureSpecification();
  virtual ~FeatureSpecification();
  
  FeatureSpecification(const FeatureSpecification& from);
  
  inline FeatureSpecification& operator=(const FeatureSpecification& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureSpecification& default_instance();
  
  void Swap(FeatureSpecification* other);
  
  // implements Message ----------------------------------------------
  
  FeatureSpecification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureSpecification& from);
  void MergeFrom(const FeatureSpecification& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 supported_message_version = 1;
  inline int supported_message_version_size() const;
  inline void clear_supported_message_version();
  static const int kSupportedMessageVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 supported_message_version(int index) const;
  inline void set_supported_message_version(int index, ::google::protobuf::uint32 value);
  inline void add_supported_message_version(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      supported_message_version() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_supported_message_version();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 55;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.response.FeatureSpecification)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > supported_message_version_;
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2fresponse_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FeatureSpecification* default_instance_;
};
// -------------------------------------------------------------------

class StreamSegmentStart : public ::google::protobuf::Message {
 public:
  StreamSegmentStart();
  virtual ~StreamSegmentStart();
  
  StreamSegmentStart(const StreamSegmentStart& from);
  
  inline StreamSegmentStart& operator=(const StreamSegmentStart& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamSegmentStart& default_instance();
  
  void Swap(StreamSegmentStart* other);
  
  // implements Message ----------------------------------------------
  
  StreamSegmentStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamSegmentStart& from);
  void MergeFrom(const StreamSegmentStart& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  
  // optional uint64 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::uint64 offset() const;
  inline void set_offset(::google::protobuf::uint64 value);
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 7;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.response.StreamSegmentStart)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* path_;
  static const ::std::string _default_path_;
  ::google::protobuf::uint64 offset_;
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2fresponse_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StreamSegmentStart* default_instance_;
};
// -------------------------------------------------------------------

class StreamSegmentEnd : public ::google::protobuf::Message {
 public:
  StreamSegmentEnd();
  virtual ~StreamSegmentEnd();
  
  StreamSegmentEnd(const StreamSegmentEnd& from);
  
  inline StreamSegmentEnd& operator=(const StreamSegmentEnd& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamSegmentEnd& default_instance();
  
  void Swap(StreamSegmentEnd* other);
  
  // implements Message ----------------------------------------------
  
  StreamSegmentEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamSegmentEnd& from);
  void MergeFrom(const StreamSegmentEnd& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  inline ::google::protobuf::uint64 offset() const;
  inline void set_offset(::google::protobuf::uint64 value);
  
  // optional uint32 bytes_sent = 2;
  inline bool has_bytes_sent() const;
  inline void clear_bytes_sent();
  static const int kBytesSentFieldNumber = 2;
  inline ::google::protobuf::uint32 bytes_sent() const;
  inline void set_bytes_sent(::google::protobuf::uint32 value);
  
  // optional uint32 envelopes_sent = 3;
  inline bool has_envelopes_sent() const;
  inline void clear_envelopes_sent();
  static const int kEnvelopesSentFieldNumber = 3;
  inline ::google::protobuf::uint32 envelopes_sent() const;
  inline void set_envelopes_sent(::google::protobuf::uint32 value);
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 8;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.response.StreamSegmentEnd)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 offset_;
  ::google::protobuf::uint32 bytes_sent_;
  ::google::protobuf::uint32 envelopes_sent_;
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2fresponse_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StreamSegmentEnd* default_instance_;
};
// -------------------------------------------------------------------

class SubscribeAck : public ::google::protobuf::Message {
 public:
  SubscribeAck();
  virtual ~SubscribeAck();
  
  SubscribeAck(const SubscribeAck& from);
  
  inline SubscribeAck& operator=(const SubscribeAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeAck& default_instance();
  
  void Swap(SubscribeAck* other);
  
  // implements Message ----------------------------------------------
  
  SubscribeAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeAck& from);
  void MergeFrom(const SubscribeAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  // optional uint32 ttl = 2;
  inline bool has_ttl() const;
  inline void clear_ttl();
  static const int kTtlFieldNumber = 2;
  inline ::google::protobuf::uint32 ttl() const;
  inline void set_ttl(::google::protobuf::uint32 value);
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 24;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.response.SubscribeAck)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  ::google::protobuf::uint32 ttl_;
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2fresponse_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SubscribeAck* default_instance_;
};
// -------------------------------------------------------------------

class SubscriptionStart : public ::google::protobuf::Message {
 public:
  SubscriptionStart();
  virtual ~SubscriptionStart();
  
  SubscriptionStart(const SubscriptionStart& from);
  
  inline SubscriptionStart& operator=(const SubscriptionStart& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscriptionStart& default_instance();
  
  void Swap(SubscriptionStart* other);
  
  // implements Message ----------------------------------------------
  
  SubscriptionStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscriptionStart& from);
  void MergeFrom(const SubscriptionStart& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 26;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.response.SubscriptionStart)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2fresponse_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SubscriptionStart* default_instance_;
};
// -------------------------------------------------------------------

class WriteAck : public ::google::protobuf::Message {
 public:
  WriteAck();
  virtual ~WriteAck();
  
  WriteAck(const WriteAck& from);
  
  inline WriteAck& operator=(const WriteAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteAck& default_instance();
  
  void Swap(WriteAck* other);
  
  // implements Message ----------------------------------------------
  
  WriteAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteAck& from);
  void MergeFrom(const WriteAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 envelopes_written = 1;
  inline bool has_envelopes_written() const;
  inline void clear_envelopes_written();
  static const int kEnvelopesWrittenFieldNumber = 1;
  inline ::google::protobuf::uint32 envelopes_written() const;
  inline void set_envelopes_written(::google::protobuf::uint32 value);
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 113;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.response.WriteAck)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 envelopes_written_;
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2fresponse_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WriteAck* default_instance_;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message {
 public:
  Error();
  virtual ~Error();
  
  Error(const Error& from);
  
  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();
  
  void Swap(Error* other);
  
  // implements Message ----------------------------------------------
  
  Error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .zippylog.protocol.response.ErrorCode code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline zippylog::protocol::response::ErrorCode code() const;
  inline void set_code(zippylog::protocol::response::ErrorCode value);
  
  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 9;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.response.Error)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int code_;
  ::std::string* msg_;
  static const ::std::string _default_msg_;
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2fresponse_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Error* default_instance_;
};
// ===================================================================


// ===================================================================

// Pong

// -------------------------------------------------------------------

// FeatureSpecification

// repeated uint32 supported_message_version = 1;
inline int FeatureSpecification::supported_message_version_size() const {
  return supported_message_version_.size();
}
inline void FeatureSpecification::clear_supported_message_version() {
  supported_message_version_.Clear();
}
inline ::google::protobuf::uint32 FeatureSpecification::supported_message_version(int index) const {
  return supported_message_version_.Get(index);
}
inline void FeatureSpecification::set_supported_message_version(int index, ::google::protobuf::uint32 value) {
  supported_message_version_.Set(index, value);
}
inline void FeatureSpecification::add_supported_message_version(::google::protobuf::uint32 value) {
  supported_message_version_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FeatureSpecification::supported_message_version() const {
  return supported_message_version_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FeatureSpecification::mutable_supported_message_version() {
  return &supported_message_version_;
}

// -------------------------------------------------------------------

// StreamSegmentStart

// optional string path = 1;
inline bool StreamSegmentStart::has_path() const {
  return _has_bit(0);
}
inline void StreamSegmentStart::clear_path() {
  if (path_ != &_default_path_) {
    path_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& StreamSegmentStart::path() const {
  return *path_;
}
inline void StreamSegmentStart::set_path(const ::std::string& value) {
  _set_bit(0);
  if (path_ == &_default_path_) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void StreamSegmentStart::set_path(const char* value) {
  _set_bit(0);
  if (path_ == &_default_path_) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void StreamSegmentStart::set_path(const char* value, size_t size) {
  _set_bit(0);
  if (path_ == &_default_path_) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamSegmentStart::mutable_path() {
  _set_bit(0);
  if (path_ == &_default_path_) {
    path_ = new ::std::string;
  }
  return path_;
}

// optional uint64 offset = 2;
inline bool StreamSegmentStart::has_offset() const {
  return _has_bit(1);
}
inline void StreamSegmentStart::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 StreamSegmentStart::offset() const {
  return offset_;
}
inline void StreamSegmentStart::set_offset(::google::protobuf::uint64 value) {
  _set_bit(1);
  offset_ = value;
}

// -------------------------------------------------------------------

// StreamSegmentEnd

// optional uint64 offset = 1;
inline bool StreamSegmentEnd::has_offset() const {
  return _has_bit(0);
}
inline void StreamSegmentEnd::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 StreamSegmentEnd::offset() const {
  return offset_;
}
inline void StreamSegmentEnd::set_offset(::google::protobuf::uint64 value) {
  _set_bit(0);
  offset_ = value;
}

// optional uint32 bytes_sent = 2;
inline bool StreamSegmentEnd::has_bytes_sent() const {
  return _has_bit(1);
}
inline void StreamSegmentEnd::clear_bytes_sent() {
  bytes_sent_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 StreamSegmentEnd::bytes_sent() const {
  return bytes_sent_;
}
inline void StreamSegmentEnd::set_bytes_sent(::google::protobuf::uint32 value) {
  _set_bit(1);
  bytes_sent_ = value;
}

// optional uint32 envelopes_sent = 3;
inline bool StreamSegmentEnd::has_envelopes_sent() const {
  return _has_bit(2);
}
inline void StreamSegmentEnd::clear_envelopes_sent() {
  envelopes_sent_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 StreamSegmentEnd::envelopes_sent() const {
  return envelopes_sent_;
}
inline void StreamSegmentEnd::set_envelopes_sent(::google::protobuf::uint32 value) {
  _set_bit(2);
  envelopes_sent_ = value;
}

// -------------------------------------------------------------------

// SubscribeAck

// optional bytes id = 1;
inline bool SubscribeAck::has_id() const {
  return _has_bit(0);
}
inline void SubscribeAck::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SubscribeAck::id() const {
  return *id_;
}
inline void SubscribeAck::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SubscribeAck::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SubscribeAck::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubscribeAck::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// optional uint32 ttl = 2;
inline bool SubscribeAck::has_ttl() const {
  return _has_bit(1);
}
inline void SubscribeAck::clear_ttl() {
  ttl_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 SubscribeAck::ttl() const {
  return ttl_;
}
inline void SubscribeAck::set_ttl(::google::protobuf::uint32 value) {
  _set_bit(1);
  ttl_ = value;
}

// -------------------------------------------------------------------

// SubscriptionStart

// optional bytes id = 1;
inline bool SubscriptionStart::has_id() const {
  return _has_bit(0);
}
inline void SubscriptionStart::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SubscriptionStart::id() const {
  return *id_;
}
inline void SubscriptionStart::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SubscriptionStart::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SubscriptionStart::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubscriptionStart::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// WriteAck

// optional uint32 envelopes_written = 1;
inline bool WriteAck::has_envelopes_written() const {
  return _has_bit(0);
}
inline void WriteAck::clear_envelopes_written() {
  envelopes_written_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 WriteAck::envelopes_written() const {
  return envelopes_written_;
}
inline void WriteAck::set_envelopes_written(::google::protobuf::uint32 value) {
  _set_bit(0);
  envelopes_written_ = value;
}

// -------------------------------------------------------------------

// Error

// optional .zippylog.protocol.response.ErrorCode code = 1;
inline bool Error::has_code() const {
  return _has_bit(0);
}
inline void Error::clear_code() {
  code_ = 1;
  _clear_bit(0);
}
inline zippylog::protocol::response::ErrorCode Error::code() const {
  return static_cast< zippylog::protocol::response::ErrorCode >(code_);
}
inline void Error::set_code(zippylog::protocol::response::ErrorCode value) {
  GOOGLE_DCHECK(zippylog::protocol::response::ErrorCode_IsValid(value));
  _set_bit(0);
  code_ = value;
}

// optional string msg = 2;
inline bool Error::has_msg() const {
  return _has_bit(1);
}
inline void Error::clear_msg() {
  if (msg_ != &_default_msg_) {
    msg_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Error::msg() const {
  return *msg_;
}
inline void Error::set_msg(const ::std::string& value) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Error::set_msg(const char* value) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Error::set_msg(const char* value, size_t size) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Error::mutable_msg() {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  return msg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace response
}  // namespace protocol
}  // namespace zippylog

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< zippylog::protocol::response::ErrorCode>() {
  return zippylog::protocol::response::ErrorCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zippylog_2fprotocol_2fresponse_2eproto__INCLUDED
