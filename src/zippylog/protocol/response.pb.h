// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zippylog/protocol/response.proto

#ifndef PROTOBUF_zippylog_2fprotocol_2fresponse_2eproto__INCLUDED
#define PROTOBUF_zippylog_2fprotocol_2fresponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "zippylog/protocol.pb.h"
#include <zippylog/envelope.hpp>
// @@protoc_insertion_point(includes)

namespace zippylog {
namespace protocol {
namespace response {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();
void protobuf_AssignDesc_zippylog_2fprotocol_2fresponse_2eproto();
void protobuf_ShutdownFile_zippylog_2fprotocol_2fresponse_2eproto();

class PongV1;
class FeatureSpecificationV1;
class StreamSegmentStartV1;
class StreamSegmentEndV1;
class SubscriptionAcceptAckV1;
class SubscriptionKeepaliveAckV1;
class SubscriptionStartV1;
class WriteAckV1;
class PluginRegisterAckV1;
class PluginStatusV1;
class Error;

enum ErrorCode {
  ENVELOPE_PARSE_FAILURE = 1,
  INVALID_MESSAGE_NAMESPACE = 2,
  UNKNOWN_REQUEST_TYPE = 3,
  EMPTY_ENVELOPE = 4,
  MISSING_ENUMERATIONS = 5,
  REQUEST_NOT_IMPLEMENTED = 6,
  EMPTY_FIELD = 7,
  FIELD_LENGTHS_DIFFERENT = 8,
  INVALID_STREAM_OFFSET = 9,
  INVALID_OFFSET = 10,
  PATH_NOT_FOUND = 11,
  LIMIT_EXCEEDED = 12,
  UNKNOWN_MESSAGE_FORMAT_VERSION = 13,
  INVALID_PATH = 14,
  UNSUPPORTED_OPERATION_MESSAGE_VERSION = 15,
  EMPTY_MESSAGE = 16,
  PROTOCOL_NO_ENVELOPE = 17,
  GENERAL_ERROR_PROCESSING = 18,
  LUA_ERROR = 19,
  SUBSCRIPTION_REJECTED = 20
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = ENVELOPE_PARSE_FAILURE;
const ErrorCode ErrorCode_MAX = SUBSCRIPTION_REJECTED;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class PongV1 : public ::google::protobuf::Message {
 public:
  PongV1();
  virtual ~PongV1();
  
  PongV1(const PongV1& from);
  
  inline PongV1& operator=(const PongV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PongV1& default_instance();
  
  void Swap(PongV1* other);
  
  // implements Message ----------------------------------------------
  
  PongV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PongV1& from);
  void MergeFrom(const PongV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 70;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.response.PongV1)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2fresponse_2eproto();
  
  void InitAsDefaultInstance();
  static PongV1* default_instance_;
};
// -------------------------------------------------------------------

class FeatureSpecificationV1 : public ::google::protobuf::Message {
 public:
  FeatureSpecificationV1();
  virtual ~FeatureSpecificationV1();
  
  FeatureSpecificationV1(const FeatureSpecificationV1& from);
  
  inline FeatureSpecificationV1& operator=(const FeatureSpecificationV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureSpecificationV1& default_instance();
  
  void Swap(FeatureSpecificationV1* other);
  
  // implements Message ----------------------------------------------
  
  FeatureSpecificationV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureSpecificationV1& from);
  void MergeFrom(const FeatureSpecificationV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 supported_message_formats = 1;
  inline int supported_message_formats_size() const;
  inline void clear_supported_message_formats();
  static const int kSupportedMessageFormatsFieldNumber = 1;
  inline ::google::protobuf::uint32 supported_message_formats(int index) const;
  inline void set_supported_message_formats(int index, ::google::protobuf::uint32 value);
  inline void add_supported_message_formats(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      supported_message_formats() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_supported_message_formats();
  
  // repeated uint32 supported_request_types = 2;
  inline int supported_request_types_size() const;
  inline void clear_supported_request_types();
  static const int kSupportedRequestTypesFieldNumber = 2;
  inline ::google::protobuf::uint32 supported_request_types(int index) const;
  inline void set_supported_request_types(int index, ::google::protobuf::uint32 value);
  inline void add_supported_request_types(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      supported_request_types() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_supported_request_types();
  
  // repeated string supported_request_names = 3;
  inline int supported_request_names_size() const;
  inline void clear_supported_request_names();
  static const int kSupportedRequestNamesFieldNumber = 3;
  inline const ::std::string& supported_request_names(int index) const;
  inline ::std::string* mutable_supported_request_names(int index);
  inline void set_supported_request_names(int index, const ::std::string& value);
  inline void set_supported_request_names(int index, const char* value);
  inline void set_supported_request_names(int index, const char* value, size_t size);
  inline ::std::string* add_supported_request_names();
  inline void add_supported_request_names(const ::std::string& value);
  inline void add_supported_request_names(const char* value);
  inline void add_supported_request_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& supported_request_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_supported_request_names();
  
  // optional uint32 max_stream_segment_bytes = 4;
  inline bool has_max_stream_segment_bytes() const;
  inline void clear_max_stream_segment_bytes();
  static const int kMaxStreamSegmentBytesFieldNumber = 4;
  inline ::google::protobuf::uint32 max_stream_segment_bytes() const;
  inline void set_max_stream_segment_bytes(::google::protobuf::uint32 value);
  
  // optional uint32 max_stream_segment_envelopes = 5;
  inline bool has_max_stream_segment_envelopes() const;
  inline void clear_max_stream_segment_envelopes();
  static const int kMaxStreamSegmentEnvelopesFieldNumber = 5;
  inline ::google::protobuf::uint32 max_stream_segment_envelopes() const;
  inline void set_max_stream_segment_envelopes(::google::protobuf::uint32 value);
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 71;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.response.FeatureSpecificationV1)
 private:
  inline void set_has_max_stream_segment_bytes();
  inline void clear_has_max_stream_segment_bytes();
  inline void set_has_max_stream_segment_envelopes();
  inline void clear_has_max_stream_segment_envelopes();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > supported_message_formats_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > supported_request_types_;
  ::google::protobuf::RepeatedPtrField< ::std::string> supported_request_names_;
  ::google::protobuf::uint32 max_stream_segment_bytes_;
  ::google::protobuf::uint32 max_stream_segment_envelopes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2fresponse_2eproto();
  
  void InitAsDefaultInstance();
  static FeatureSpecificationV1* default_instance_;
};
// -------------------------------------------------------------------

class StreamSegmentStartV1 : public ::google::protobuf::Message {
 public:
  StreamSegmentStartV1();
  virtual ~StreamSegmentStartV1();
  
  StreamSegmentStartV1(const StreamSegmentStartV1& from);
  
  inline StreamSegmentStartV1& operator=(const StreamSegmentStartV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamSegmentStartV1& default_instance();
  
  void Swap(StreamSegmentStartV1* other);
  
  // implements Message ----------------------------------------------
  
  StreamSegmentStartV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamSegmentStartV1& from);
  void MergeFrom(const StreamSegmentStartV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // required uint64 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::uint64 offset() const;
  inline void set_offset(::google::protobuf::uint64 value);
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 104;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.response.StreamSegmentStartV1)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_offset();
  inline void clear_has_offset();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* path_;
  ::google::protobuf::uint64 offset_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2fresponse_2eproto();
  
  void InitAsDefaultInstance();
  static StreamSegmentStartV1* default_instance_;
};
// -------------------------------------------------------------------

class StreamSegmentEndV1 : public ::google::protobuf::Message {
 public:
  StreamSegmentEndV1();
  virtual ~StreamSegmentEndV1();
  
  StreamSegmentEndV1(const StreamSegmentEndV1& from);
  
  inline StreamSegmentEndV1& operator=(const StreamSegmentEndV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamSegmentEndV1& default_instance();
  
  void Swap(StreamSegmentEndV1* other);
  
  // implements Message ----------------------------------------------
  
  StreamSegmentEndV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamSegmentEndV1& from);
  void MergeFrom(const StreamSegmentEndV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  inline ::google::protobuf::uint64 offset() const;
  inline void set_offset(::google::protobuf::uint64 value);
  
  // required uint32 bytes_sent = 2;
  inline bool has_bytes_sent() const;
  inline void clear_bytes_sent();
  static const int kBytesSentFieldNumber = 2;
  inline ::google::protobuf::uint32 bytes_sent() const;
  inline void set_bytes_sent(::google::protobuf::uint32 value);
  
  // required uint32 envelopes_sent = 3;
  inline bool has_envelopes_sent() const;
  inline void clear_envelopes_sent();
  static const int kEnvelopesSentFieldNumber = 3;
  inline ::google::protobuf::uint32 envelopes_sent() const;
  inline void set_envelopes_sent(::google::protobuf::uint32 value);
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 105;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.response.StreamSegmentEndV1)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_bytes_sent();
  inline void clear_has_bytes_sent();
  inline void set_has_envelopes_sent();
  inline void clear_has_envelopes_sent();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 offset_;
  ::google::protobuf::uint32 bytes_sent_;
  ::google::protobuf::uint32 envelopes_sent_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2fresponse_2eproto();
  
  void InitAsDefaultInstance();
  static StreamSegmentEndV1* default_instance_;
};
// -------------------------------------------------------------------

class SubscriptionAcceptAckV1 : public ::google::protobuf::Message {
 public:
  SubscriptionAcceptAckV1();
  virtual ~SubscriptionAcceptAckV1();
  
  SubscriptionAcceptAckV1(const SubscriptionAcceptAckV1& from);
  
  inline SubscriptionAcceptAckV1& operator=(const SubscriptionAcceptAckV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscriptionAcceptAckV1& default_instance();
  
  void Swap(SubscriptionAcceptAckV1* other);
  
  // implements Message ----------------------------------------------
  
  SubscriptionAcceptAckV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscriptionAcceptAckV1& from);
  void MergeFrom(const SubscriptionAcceptAckV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // required uint32 ttl = 2;
  inline bool has_ttl() const;
  inline void clear_ttl();
  static const int kTtlFieldNumber = 2;
  inline ::google::protobuf::uint32 ttl() const;
  inline void set_ttl(::google::protobuf::uint32 value);
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 109;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.response.SubscriptionAcceptAckV1)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ttl();
  inline void clear_has_ttl();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::google::protobuf::uint32 ttl_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2fresponse_2eproto();
  
  void InitAsDefaultInstance();
  static SubscriptionAcceptAckV1* default_instance_;
};
// -------------------------------------------------------------------

class SubscriptionKeepaliveAckV1 : public ::google::protobuf::Message {
 public:
  SubscriptionKeepaliveAckV1();
  virtual ~SubscriptionKeepaliveAckV1();
  
  SubscriptionKeepaliveAckV1(const SubscriptionKeepaliveAckV1& from);
  
  inline SubscriptionKeepaliveAckV1& operator=(const SubscriptionKeepaliveAckV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscriptionKeepaliveAckV1& default_instance();
  
  void Swap(SubscriptionKeepaliveAckV1* other);
  
  // implements Message ----------------------------------------------
  
  SubscriptionKeepaliveAckV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscriptionKeepaliveAckV1& from);
  void MergeFrom(const SubscriptionKeepaliveAckV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 110;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.response.SubscriptionKeepaliveAckV1)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2fresponse_2eproto();
  
  void InitAsDefaultInstance();
  static SubscriptionKeepaliveAckV1* default_instance_;
};
// -------------------------------------------------------------------

class SubscriptionStartV1 : public ::google::protobuf::Message {
 public:
  SubscriptionStartV1();
  virtual ~SubscriptionStartV1();
  
  SubscriptionStartV1(const SubscriptionStartV1& from);
  
  inline SubscriptionStartV1& operator=(const SubscriptionStartV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscriptionStartV1& default_instance();
  
  void Swap(SubscriptionStartV1* other);
  
  // implements Message ----------------------------------------------
  
  SubscriptionStartV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscriptionStartV1& from);
  void MergeFrom(const SubscriptionStartV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 107;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.response.SubscriptionStartV1)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2fresponse_2eproto();
  
  void InitAsDefaultInstance();
  static SubscriptionStartV1* default_instance_;
};
// -------------------------------------------------------------------

class WriteAckV1 : public ::google::protobuf::Message {
 public:
  WriteAckV1();
  virtual ~WriteAckV1();
  
  WriteAckV1(const WriteAckV1& from);
  
  inline WriteAckV1& operator=(const WriteAckV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteAckV1& default_instance();
  
  void Swap(WriteAckV1* other);
  
  // implements Message ----------------------------------------------
  
  WriteAckV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteAckV1& from);
  void MergeFrom(const WriteAckV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 envelopes_written = 1;
  inline bool has_envelopes_written() const;
  inline void clear_envelopes_written();
  static const int kEnvelopesWrittenFieldNumber = 1;
  inline ::google::protobuf::uint32 envelopes_written() const;
  inline void set_envelopes_written(::google::protobuf::uint32 value);
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 108;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.response.WriteAckV1)
 private:
  inline void set_has_envelopes_written();
  inline void clear_has_envelopes_written();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 envelopes_written_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2fresponse_2eproto();
  
  void InitAsDefaultInstance();
  static WriteAckV1* default_instance_;
};
// -------------------------------------------------------------------

class PluginRegisterAckV1 : public ::google::protobuf::Message {
 public:
  PluginRegisterAckV1();
  virtual ~PluginRegisterAckV1();
  
  PluginRegisterAckV1(const PluginRegisterAckV1& from);
  
  inline PluginRegisterAckV1& operator=(const PluginRegisterAckV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PluginRegisterAckV1& default_instance();
  
  void Swap(PluginRegisterAckV1* other);
  
  // implements Message ----------------------------------------------
  
  PluginRegisterAckV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PluginRegisterAckV1& from);
  void MergeFrom(const PluginRegisterAckV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 114;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.response.PluginRegisterAckV1)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2fresponse_2eproto();
  
  void InitAsDefaultInstance();
  static PluginRegisterAckV1* default_instance_;
};
// -------------------------------------------------------------------

class PluginStatusV1 : public ::google::protobuf::Message {
 public:
  PluginStatusV1();
  virtual ~PluginStatusV1();
  
  PluginStatusV1(const PluginStatusV1& from);
  
  inline PluginStatusV1& operator=(const PluginStatusV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PluginStatusV1& default_instance();
  
  void Swap(PluginStatusV1* other);
  
  // implements Message ----------------------------------------------
  
  PluginStatusV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PluginStatusV1& from);
  void MergeFrom(const PluginStatusV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .zippylog.protocol.PluginStateV1 state = 1;
  inline int state_size() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline const ::zippylog::protocol::PluginStateV1& state(int index) const;
  inline ::zippylog::protocol::PluginStateV1* mutable_state(int index);
  inline ::zippylog::protocol::PluginStateV1* add_state();
  inline const ::google::protobuf::RepeatedPtrField< ::zippylog::protocol::PluginStateV1 >&
      state() const;
  inline ::google::protobuf::RepeatedPtrField< ::zippylog::protocol::PluginStateV1 >*
      mutable_state();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 115;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.response.PluginStatusV1)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::zippylog::protocol::PluginStateV1 > state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2fresponse_2eproto();
  
  void InitAsDefaultInstance();
  static PluginStatusV1* default_instance_;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message {
 public:
  Error();
  virtual ~Error();
  
  Error(const Error& from);
  
  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();
  
  void Swap(Error* other);
  
  // implements Message ----------------------------------------------
  
  Error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .zippylog.protocol.response.ErrorCode code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline zippylog::protocol::response::ErrorCode code() const;
  inline void set_code(zippylog::protocol::response::ErrorCode value);
  
  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 69;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.response.Error)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_msg();
  inline void clear_has_msg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* msg_;
  int code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2fresponse_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2fresponse_2eproto();
  
  void InitAsDefaultInstance();
  static Error* default_instance_;
};
// ===================================================================


// ===================================================================

// PongV1

// -------------------------------------------------------------------

// FeatureSpecificationV1

// repeated uint32 supported_message_formats = 1;
inline int FeatureSpecificationV1::supported_message_formats_size() const {
  return supported_message_formats_.size();
}
inline void FeatureSpecificationV1::clear_supported_message_formats() {
  supported_message_formats_.Clear();
}
inline ::google::protobuf::uint32 FeatureSpecificationV1::supported_message_formats(int index) const {
  return supported_message_formats_.Get(index);
}
inline void FeatureSpecificationV1::set_supported_message_formats(int index, ::google::protobuf::uint32 value) {
  supported_message_formats_.Set(index, value);
}
inline void FeatureSpecificationV1::add_supported_message_formats(::google::protobuf::uint32 value) {
  supported_message_formats_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FeatureSpecificationV1::supported_message_formats() const {
  return supported_message_formats_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FeatureSpecificationV1::mutable_supported_message_formats() {
  return &supported_message_formats_;
}

// repeated uint32 supported_request_types = 2;
inline int FeatureSpecificationV1::supported_request_types_size() const {
  return supported_request_types_.size();
}
inline void FeatureSpecificationV1::clear_supported_request_types() {
  supported_request_types_.Clear();
}
inline ::google::protobuf::uint32 FeatureSpecificationV1::supported_request_types(int index) const {
  return supported_request_types_.Get(index);
}
inline void FeatureSpecificationV1::set_supported_request_types(int index, ::google::protobuf::uint32 value) {
  supported_request_types_.Set(index, value);
}
inline void FeatureSpecificationV1::add_supported_request_types(::google::protobuf::uint32 value) {
  supported_request_types_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FeatureSpecificationV1::supported_request_types() const {
  return supported_request_types_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FeatureSpecificationV1::mutable_supported_request_types() {
  return &supported_request_types_;
}

// repeated string supported_request_names = 3;
inline int FeatureSpecificationV1::supported_request_names_size() const {
  return supported_request_names_.size();
}
inline void FeatureSpecificationV1::clear_supported_request_names() {
  supported_request_names_.Clear();
}
inline const ::std::string& FeatureSpecificationV1::supported_request_names(int index) const {
  return supported_request_names_.Get(index);
}
inline ::std::string* FeatureSpecificationV1::mutable_supported_request_names(int index) {
  return supported_request_names_.Mutable(index);
}
inline void FeatureSpecificationV1::set_supported_request_names(int index, const ::std::string& value) {
  supported_request_names_.Mutable(index)->assign(value);
}
inline void FeatureSpecificationV1::set_supported_request_names(int index, const char* value) {
  supported_request_names_.Mutable(index)->assign(value);
}
inline void FeatureSpecificationV1::set_supported_request_names(int index, const char* value, size_t size) {
  supported_request_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FeatureSpecificationV1::add_supported_request_names() {
  return supported_request_names_.Add();
}
inline void FeatureSpecificationV1::add_supported_request_names(const ::std::string& value) {
  supported_request_names_.Add()->assign(value);
}
inline void FeatureSpecificationV1::add_supported_request_names(const char* value) {
  supported_request_names_.Add()->assign(value);
}
inline void FeatureSpecificationV1::add_supported_request_names(const char* value, size_t size) {
  supported_request_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FeatureSpecificationV1::supported_request_names() const {
  return supported_request_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FeatureSpecificationV1::mutable_supported_request_names() {
  return &supported_request_names_;
}

// optional uint32 max_stream_segment_bytes = 4;
inline bool FeatureSpecificationV1::has_max_stream_segment_bytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FeatureSpecificationV1::set_has_max_stream_segment_bytes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FeatureSpecificationV1::clear_has_max_stream_segment_bytes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FeatureSpecificationV1::clear_max_stream_segment_bytes() {
  max_stream_segment_bytes_ = 0u;
  clear_has_max_stream_segment_bytes();
}
inline ::google::protobuf::uint32 FeatureSpecificationV1::max_stream_segment_bytes() const {
  return max_stream_segment_bytes_;
}
inline void FeatureSpecificationV1::set_max_stream_segment_bytes(::google::protobuf::uint32 value) {
  set_has_max_stream_segment_bytes();
  max_stream_segment_bytes_ = value;
}

// optional uint32 max_stream_segment_envelopes = 5;
inline bool FeatureSpecificationV1::has_max_stream_segment_envelopes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FeatureSpecificationV1::set_has_max_stream_segment_envelopes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FeatureSpecificationV1::clear_has_max_stream_segment_envelopes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FeatureSpecificationV1::clear_max_stream_segment_envelopes() {
  max_stream_segment_envelopes_ = 0u;
  clear_has_max_stream_segment_envelopes();
}
inline ::google::protobuf::uint32 FeatureSpecificationV1::max_stream_segment_envelopes() const {
  return max_stream_segment_envelopes_;
}
inline void FeatureSpecificationV1::set_max_stream_segment_envelopes(::google::protobuf::uint32 value) {
  set_has_max_stream_segment_envelopes();
  max_stream_segment_envelopes_ = value;
}

// -------------------------------------------------------------------

// StreamSegmentStartV1

// required string path = 1;
inline bool StreamSegmentStartV1::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamSegmentStartV1::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamSegmentStartV1::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamSegmentStartV1::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& StreamSegmentStartV1::path() const {
  return *path_;
}
inline void StreamSegmentStartV1::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void StreamSegmentStartV1::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void StreamSegmentStartV1::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamSegmentStartV1::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* StreamSegmentStartV1::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 offset = 2;
inline bool StreamSegmentStartV1::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamSegmentStartV1::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamSegmentStartV1::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamSegmentStartV1::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::uint64 StreamSegmentStartV1::offset() const {
  return offset_;
}
inline void StreamSegmentStartV1::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
}

// -------------------------------------------------------------------

// StreamSegmentEndV1

// required uint64 offset = 1;
inline bool StreamSegmentEndV1::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamSegmentEndV1::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamSegmentEndV1::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamSegmentEndV1::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::uint64 StreamSegmentEndV1::offset() const {
  return offset_;
}
inline void StreamSegmentEndV1::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
}

// required uint32 bytes_sent = 2;
inline bool StreamSegmentEndV1::has_bytes_sent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamSegmentEndV1::set_has_bytes_sent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamSegmentEndV1::clear_has_bytes_sent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamSegmentEndV1::clear_bytes_sent() {
  bytes_sent_ = 0u;
  clear_has_bytes_sent();
}
inline ::google::protobuf::uint32 StreamSegmentEndV1::bytes_sent() const {
  return bytes_sent_;
}
inline void StreamSegmentEndV1::set_bytes_sent(::google::protobuf::uint32 value) {
  set_has_bytes_sent();
  bytes_sent_ = value;
}

// required uint32 envelopes_sent = 3;
inline bool StreamSegmentEndV1::has_envelopes_sent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreamSegmentEndV1::set_has_envelopes_sent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreamSegmentEndV1::clear_has_envelopes_sent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreamSegmentEndV1::clear_envelopes_sent() {
  envelopes_sent_ = 0u;
  clear_has_envelopes_sent();
}
inline ::google::protobuf::uint32 StreamSegmentEndV1::envelopes_sent() const {
  return envelopes_sent_;
}
inline void StreamSegmentEndV1::set_envelopes_sent(::google::protobuf::uint32 value) {
  set_has_envelopes_sent();
  envelopes_sent_ = value;
}

// -------------------------------------------------------------------

// SubscriptionAcceptAckV1

// required bytes id = 1;
inline bool SubscriptionAcceptAckV1::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscriptionAcceptAckV1::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscriptionAcceptAckV1::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscriptionAcceptAckV1::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SubscriptionAcceptAckV1::id() const {
  return *id_;
}
inline void SubscriptionAcceptAckV1::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SubscriptionAcceptAckV1::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SubscriptionAcceptAckV1::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubscriptionAcceptAckV1::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SubscriptionAcceptAckV1::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 ttl = 2;
inline bool SubscriptionAcceptAckV1::has_ttl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubscriptionAcceptAckV1::set_has_ttl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubscriptionAcceptAckV1::clear_has_ttl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubscriptionAcceptAckV1::clear_ttl() {
  ttl_ = 0u;
  clear_has_ttl();
}
inline ::google::protobuf::uint32 SubscriptionAcceptAckV1::ttl() const {
  return ttl_;
}
inline void SubscriptionAcceptAckV1::set_ttl(::google::protobuf::uint32 value) {
  set_has_ttl();
  ttl_ = value;
}

// -------------------------------------------------------------------

// SubscriptionKeepaliveAckV1

// required bytes id = 1;
inline bool SubscriptionKeepaliveAckV1::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscriptionKeepaliveAckV1::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscriptionKeepaliveAckV1::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscriptionKeepaliveAckV1::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SubscriptionKeepaliveAckV1::id() const {
  return *id_;
}
inline void SubscriptionKeepaliveAckV1::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SubscriptionKeepaliveAckV1::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SubscriptionKeepaliveAckV1::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubscriptionKeepaliveAckV1::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SubscriptionKeepaliveAckV1::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SubscriptionStartV1

// required bytes id = 1;
inline bool SubscriptionStartV1::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscriptionStartV1::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscriptionStartV1::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscriptionStartV1::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SubscriptionStartV1::id() const {
  return *id_;
}
inline void SubscriptionStartV1::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SubscriptionStartV1::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SubscriptionStartV1::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubscriptionStartV1::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SubscriptionStartV1::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// WriteAckV1

// required uint32 envelopes_written = 1;
inline bool WriteAckV1::has_envelopes_written() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WriteAckV1::set_has_envelopes_written() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WriteAckV1::clear_has_envelopes_written() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WriteAckV1::clear_envelopes_written() {
  envelopes_written_ = 0u;
  clear_has_envelopes_written();
}
inline ::google::protobuf::uint32 WriteAckV1::envelopes_written() const {
  return envelopes_written_;
}
inline void WriteAckV1::set_envelopes_written(::google::protobuf::uint32 value) {
  set_has_envelopes_written();
  envelopes_written_ = value;
}

// -------------------------------------------------------------------

// PluginRegisterAckV1

// required string name = 1;
inline bool PluginRegisterAckV1::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PluginRegisterAckV1::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PluginRegisterAckV1::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PluginRegisterAckV1::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PluginRegisterAckV1::name() const {
  return *name_;
}
inline void PluginRegisterAckV1::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PluginRegisterAckV1::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PluginRegisterAckV1::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PluginRegisterAckV1::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PluginRegisterAckV1::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PluginStatusV1

// repeated .zippylog.protocol.PluginStateV1 state = 1;
inline int PluginStatusV1::state_size() const {
  return state_.size();
}
inline void PluginStatusV1::clear_state() {
  state_.Clear();
}
inline const ::zippylog::protocol::PluginStateV1& PluginStatusV1::state(int index) const {
  return state_.Get(index);
}
inline ::zippylog::protocol::PluginStateV1* PluginStatusV1::mutable_state(int index) {
  return state_.Mutable(index);
}
inline ::zippylog::protocol::PluginStateV1* PluginStatusV1::add_state() {
  return state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zippylog::protocol::PluginStateV1 >&
PluginStatusV1::state() const {
  return state_;
}
inline ::google::protobuf::RepeatedPtrField< ::zippylog::protocol::PluginStateV1 >*
PluginStatusV1::mutable_state() {
  return &state_;
}

// -------------------------------------------------------------------

// Error

// optional .zippylog.protocol.response.ErrorCode code = 1;
inline bool Error::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Error::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Error::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Error::clear_code() {
  code_ = 1;
  clear_has_code();
}
inline zippylog::protocol::response::ErrorCode Error::code() const {
  return static_cast< zippylog::protocol::response::ErrorCode >(code_);
}
inline void Error::set_code(zippylog::protocol::response::ErrorCode value) {
  GOOGLE_DCHECK(zippylog::protocol::response::ErrorCode_IsValid(value));
  set_has_code();
  code_ = value;
}

// optional string msg = 2;
inline bool Error::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Error::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Error::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Error::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& Error::msg() const {
  return *msg_;
}
inline void Error::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Error::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Error::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Error::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* Error::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace response
}  // namespace protocol
}  // namespace zippylog

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< zippylog::protocol::response::ErrorCode>() {
  return zippylog::protocol::response::ErrorCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zippylog_2fprotocol_2fresponse_2eproto__INCLUDED
