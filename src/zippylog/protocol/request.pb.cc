// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zippylog/protocol/request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zippylog {
namespace protocol {
namespace request {

namespace {

const ::google::protobuf::Descriptor* PingV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFeaturesV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFeaturesV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStoreInfoV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStoreInfoV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBucketInfoV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBucketInfoV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStreamSetInfoV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStreamSetInfoV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStreamInfoV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStreamInfoV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStreamV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStreamV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteEnvelopeV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteEnvelopeV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteEnvelopeFromMessagesV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteEnvelopeFromMessagesV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeStoreChangesV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeStoreChangesV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeEnvelopesV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeEnvelopesV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeKeepaliveV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeKeepaliveV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeCancelV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeCancelV1_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_zippylog_2fprotocol_2frequest_2eproto() {
  protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zippylog/protocol/request.proto");
  GOOGLE_CHECK(file != NULL);
  PingV1_descriptor_ = file->message_type(0);
  static const int PingV1_offsets_[1] = {
  };
  PingV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PingV1_descriptor_,
      PingV1::default_instance_,
      PingV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PingV1));
  GetFeaturesV1_descriptor_ = file->message_type(1);
  static const int GetFeaturesV1_offsets_[1] = {
  };
  GetFeaturesV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFeaturesV1_descriptor_,
      GetFeaturesV1::default_instance_,
      GetFeaturesV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFeaturesV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFeaturesV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFeaturesV1));
  GetStoreInfoV1_descriptor_ = file->message_type(2);
  static const int GetStoreInfoV1_offsets_[1] = {
  };
  GetStoreInfoV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStoreInfoV1_descriptor_,
      GetStoreInfoV1::default_instance_,
      GetStoreInfoV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreInfoV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreInfoV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStoreInfoV1));
  GetBucketInfoV1_descriptor_ = file->message_type(3);
  static const int GetBucketInfoV1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBucketInfoV1, path_),
  };
  GetBucketInfoV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBucketInfoV1_descriptor_,
      GetBucketInfoV1::default_instance_,
      GetBucketInfoV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBucketInfoV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBucketInfoV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBucketInfoV1));
  GetStreamSetInfoV1_descriptor_ = file->message_type(4);
  static const int GetStreamSetInfoV1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamSetInfoV1, path_),
  };
  GetStreamSetInfoV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStreamSetInfoV1_descriptor_,
      GetStreamSetInfoV1::default_instance_,
      GetStreamSetInfoV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamSetInfoV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamSetInfoV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStreamSetInfoV1));
  GetStreamInfoV1_descriptor_ = file->message_type(5);
  static const int GetStreamInfoV1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamInfoV1, path_),
  };
  GetStreamInfoV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStreamInfoV1_descriptor_,
      GetStreamInfoV1::default_instance_,
      GetStreamInfoV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamInfoV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamInfoV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStreamInfoV1));
  GetStreamV1_descriptor_ = file->message_type(6);
  static const int GetStreamV1_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamV1, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamV1, start_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamV1, max_response_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamV1, max_response_envelopes_),
  };
  GetStreamV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStreamV1_descriptor_,
      GetStreamV1::default_instance_,
      GetStreamV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStreamV1));
  WriteEnvelopeV1_descriptor_ = file->message_type(7);
  static const int WriteEnvelopeV1_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteEnvelopeV1, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteEnvelopeV1, envelope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteEnvelopeV1, acknowledge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteEnvelopeV1, synchronous_),
  };
  WriteEnvelopeV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteEnvelopeV1_descriptor_,
      WriteEnvelopeV1::default_instance_,
      WriteEnvelopeV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteEnvelopeV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteEnvelopeV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteEnvelopeV1));
  WriteEnvelopeFromMessagesV1_descriptor_ = file->message_type(8);
  static const int WriteEnvelopeFromMessagesV1_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteEnvelopeFromMessagesV1, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteEnvelopeFromMessagesV1, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteEnvelopeFromMessagesV1, message_namespace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteEnvelopeFromMessagesV1, message_type_),
  };
  WriteEnvelopeFromMessagesV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteEnvelopeFromMessagesV1_descriptor_,
      WriteEnvelopeFromMessagesV1::default_instance_,
      WriteEnvelopeFromMessagesV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteEnvelopeFromMessagesV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteEnvelopeFromMessagesV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteEnvelopeFromMessagesV1));
  SubscribeStoreChangesV1_descriptor_ = file->message_type(9);
  static const int SubscribeStoreChangesV1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeStoreChangesV1, path_),
  };
  SubscribeStoreChangesV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeStoreChangesV1_descriptor_,
      SubscribeStoreChangesV1::default_instance_,
      SubscribeStoreChangesV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeStoreChangesV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeStoreChangesV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeStoreChangesV1));
  SubscribeEnvelopesV1_descriptor_ = file->message_type(10);
  static const int SubscribeEnvelopesV1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeEnvelopesV1, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeEnvelopesV1, lua_code_),
  };
  SubscribeEnvelopesV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeEnvelopesV1_descriptor_,
      SubscribeEnvelopesV1::default_instance_,
      SubscribeEnvelopesV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeEnvelopesV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeEnvelopesV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeEnvelopesV1));
  SubscribeKeepaliveV1_descriptor_ = file->message_type(11);
  static const int SubscribeKeepaliveV1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeepaliveV1, id_),
  };
  SubscribeKeepaliveV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeKeepaliveV1_descriptor_,
      SubscribeKeepaliveV1::default_instance_,
      SubscribeKeepaliveV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeepaliveV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeKeepaliveV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeKeepaliveV1));
  SubscribeCancelV1_descriptor_ = file->message_type(12);
  static const int SubscribeCancelV1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeCancelV1, id_),
  };
  SubscribeCancelV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeCancelV1_descriptor_,
      SubscribeCancelV1::default_instance_,
      SubscribeCancelV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeCancelV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeCancelV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeCancelV1));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zippylog_2fprotocol_2frequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PingV1_descriptor_, &PingV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFeaturesV1_descriptor_, &GetFeaturesV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStoreInfoV1_descriptor_, &GetStoreInfoV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBucketInfoV1_descriptor_, &GetBucketInfoV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStreamSetInfoV1_descriptor_, &GetStreamSetInfoV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStreamInfoV1_descriptor_, &GetStreamInfoV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStreamV1_descriptor_, &GetStreamV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteEnvelopeV1_descriptor_, &WriteEnvelopeV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteEnvelopeFromMessagesV1_descriptor_, &WriteEnvelopeFromMessagesV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeStoreChangesV1_descriptor_, &SubscribeStoreChangesV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeEnvelopesV1_descriptor_, &SubscribeEnvelopesV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeKeepaliveV1_descriptor_, &SubscribeKeepaliveV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeCancelV1_descriptor_, &SubscribeCancelV1::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zippylog_2fprotocol_2frequest_2eproto() {
  delete PingV1::default_instance_;
  delete PingV1_reflection_;
  delete GetFeaturesV1::default_instance_;
  delete GetFeaturesV1_reflection_;
  delete GetStoreInfoV1::default_instance_;
  delete GetStoreInfoV1_reflection_;
  delete GetBucketInfoV1::default_instance_;
  delete GetBucketInfoV1_reflection_;
  delete GetStreamSetInfoV1::default_instance_;
  delete GetStreamSetInfoV1_reflection_;
  delete GetStreamInfoV1::default_instance_;
  delete GetStreamInfoV1_reflection_;
  delete GetStreamV1::default_instance_;
  delete GetStreamV1_reflection_;
  delete WriteEnvelopeV1::default_instance_;
  delete WriteEnvelopeV1_reflection_;
  delete WriteEnvelopeFromMessagesV1::default_instance_;
  delete WriteEnvelopeFromMessagesV1_reflection_;
  delete SubscribeStoreChangesV1::default_instance_;
  delete SubscribeStoreChangesV1_reflection_;
  delete SubscribeEnvelopesV1::default_instance_;
  delete SubscribeEnvelopesV1_reflection_;
  delete SubscribeKeepaliveV1::default_instance_;
  delete SubscribeKeepaliveV1_reflection_;
  delete SubscribeCancelV1::default_instance_;
  delete SubscribeCancelV1_reflection_;
}

void protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037zippylog/protocol/request.proto\022\031zippy"
    "log.protocol.request\"\010\n\006PingV1\"\017\n\rGetFea"
    "turesV1\"\020\n\016GetStoreInfoV1\"\037\n\017GetBucketIn"
    "foV1\022\014\n\004path\030\001 \001(\t\"\"\n\022GetStreamSetInfoV1"
    "\022\014\n\004path\030\001 \001(\t\"\037\n\017GetStreamInfoV1\022\014\n\004pat"
    "h\030\001 \001(\t\"m\n\013GetStreamV1\022\014\n\004path\030\001 \001(\t\022\024\n\014"
    "start_offset\030\002 \001(\004\022\032\n\022max_response_bytes"
    "\030\003 \001(\r\022\036\n\026max_response_envelopes\030\004 \001(\r\"h"
    "\n\017WriteEnvelopeV1\022\014\n\004path\030\001 \001(\t\022\020\n\010envel"
    "ope\030\002 \003(\014\022\031\n\013acknowledge\030\003 \001(\010:\004true\022\032\n\013"
    "synchronous\030\004 \001(\010:\005false\"u\n\033WriteEnvelop"
    "eFromMessagesV1\022\014\n\004path\030\001 \001(\t\022\017\n\007message"
    "\030\002 \003(\014\022\035\n\021message_namespace\030\003 \003(\rB\002\020\001\022\030\n"
    "\014message_type\030\004 \003(\rB\002\020\001\"\'\n\027SubscribeStor"
    "eChangesV1\022\014\n\004path\030\001 \003(\t\"6\n\024SubscribeEnv"
    "elopesV1\022\014\n\004path\030\001 \003(\t\022\020\n\010lua_code\030\002 \001(\t"
    "\"\"\n\024SubscribeKeepaliveV1\022\n\n\002id\030\001 \001(\014\"\037\n\021"
    "SubscribeCancelV1\022\n\n\002id\030\001 \001(\014", 709);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zippylog/protocol/request.proto", &protobuf_RegisterTypes);
  PingV1::default_instance_ = new PingV1();
  GetFeaturesV1::default_instance_ = new GetFeaturesV1();
  GetStoreInfoV1::default_instance_ = new GetStoreInfoV1();
  GetBucketInfoV1::default_instance_ = new GetBucketInfoV1();
  GetStreamSetInfoV1::default_instance_ = new GetStreamSetInfoV1();
  GetStreamInfoV1::default_instance_ = new GetStreamInfoV1();
  GetStreamV1::default_instance_ = new GetStreamV1();
  WriteEnvelopeV1::default_instance_ = new WriteEnvelopeV1();
  WriteEnvelopeFromMessagesV1::default_instance_ = new WriteEnvelopeFromMessagesV1();
  SubscribeStoreChangesV1::default_instance_ = new SubscribeStoreChangesV1();
  SubscribeEnvelopesV1::default_instance_ = new SubscribeEnvelopesV1();
  SubscribeKeepaliveV1::default_instance_ = new SubscribeKeepaliveV1();
  SubscribeCancelV1::default_instance_ = new SubscribeCancelV1();
  PingV1::default_instance_->InitAsDefaultInstance();
  GetFeaturesV1::default_instance_->InitAsDefaultInstance();
  GetStoreInfoV1::default_instance_->InitAsDefaultInstance();
  GetBucketInfoV1::default_instance_->InitAsDefaultInstance();
  GetStreamSetInfoV1::default_instance_->InitAsDefaultInstance();
  GetStreamInfoV1::default_instance_->InitAsDefaultInstance();
  GetStreamV1::default_instance_->InitAsDefaultInstance();
  WriteEnvelopeV1::default_instance_->InitAsDefaultInstance();
  WriteEnvelopeFromMessagesV1::default_instance_->InitAsDefaultInstance();
  SubscribeStoreChangesV1::default_instance_->InitAsDefaultInstance();
  SubscribeEnvelopesV1::default_instance_->InitAsDefaultInstance();
  SubscribeKeepaliveV1::default_instance_->InitAsDefaultInstance();
  SubscribeCancelV1::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zippylog_2fprotocol_2frequest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zippylog_2fprotocol_2frequest_2eproto {
  StaticDescriptorInitializer_zippylog_2fprotocol_2frequest_2eproto() {
    protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();
  }
} static_descriptor_initializer_zippylog_2fprotocol_2frequest_2eproto_;


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PingV1::PingV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PingV1::InitAsDefaultInstance() {
}

PingV1::PingV1(const PingV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PingV1::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingV1::~PingV1() {
  SharedDtor();
}

void PingV1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PingV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingV1_descriptor_;
}

const PingV1& PingV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();  return *default_instance_;
}

PingV1* PingV1::default_instance_ = NULL;

PingV1* PingV1::New() const {
  return new PingV1;
}

void PingV1::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PingV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PingV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PingV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PingV1::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PingV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PingV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PingV1::MergeFrom(const PingV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PingV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingV1::CopyFrom(const PingV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingV1::IsInitialized() const {
  
  return true;
}

void PingV1::Swap(PingV1* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PingV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PingV1_descriptor_;
  metadata.reflection = PingV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetFeaturesV1::GetFeaturesV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFeaturesV1::InitAsDefaultInstance() {
}

GetFeaturesV1::GetFeaturesV1(const GetFeaturesV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFeaturesV1::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFeaturesV1::~GetFeaturesV1() {
  SharedDtor();
}

void GetFeaturesV1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFeaturesV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFeaturesV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFeaturesV1_descriptor_;
}

const GetFeaturesV1& GetFeaturesV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();  return *default_instance_;
}

GetFeaturesV1* GetFeaturesV1::default_instance_ = NULL;

GetFeaturesV1* GetFeaturesV1::New() const {
  return new GetFeaturesV1;
}

void GetFeaturesV1::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFeaturesV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetFeaturesV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFeaturesV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFeaturesV1::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFeaturesV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFeaturesV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFeaturesV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFeaturesV1::MergeFrom(const GetFeaturesV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFeaturesV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFeaturesV1::CopyFrom(const GetFeaturesV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFeaturesV1::IsInitialized() const {
  
  return true;
}

void GetFeaturesV1::Swap(GetFeaturesV1* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFeaturesV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFeaturesV1_descriptor_;
  metadata.reflection = GetFeaturesV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetStoreInfoV1::GetStoreInfoV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStoreInfoV1::InitAsDefaultInstance() {
}

GetStoreInfoV1::GetStoreInfoV1(const GetStoreInfoV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStoreInfoV1::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStoreInfoV1::~GetStoreInfoV1() {
  SharedDtor();
}

void GetStoreInfoV1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetStoreInfoV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStoreInfoV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStoreInfoV1_descriptor_;
}

const GetStoreInfoV1& GetStoreInfoV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();  return *default_instance_;
}

GetStoreInfoV1* GetStoreInfoV1::default_instance_ = NULL;

GetStoreInfoV1* GetStoreInfoV1::New() const {
  return new GetStoreInfoV1;
}

void GetStoreInfoV1::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStoreInfoV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetStoreInfoV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStoreInfoV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStoreInfoV1::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStoreInfoV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStoreInfoV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStoreInfoV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStoreInfoV1::MergeFrom(const GetStoreInfoV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStoreInfoV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStoreInfoV1::CopyFrom(const GetStoreInfoV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreInfoV1::IsInitialized() const {
  
  return true;
}

void GetStoreInfoV1::Swap(GetStoreInfoV1* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStoreInfoV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStoreInfoV1_descriptor_;
  metadata.reflection = GetStoreInfoV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBucketInfoV1::kPathFieldNumber;
#endif  // !_MSC_VER

GetBucketInfoV1::GetBucketInfoV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBucketInfoV1::InitAsDefaultInstance() {
}

GetBucketInfoV1::GetBucketInfoV1(const GetBucketInfoV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBucketInfoV1::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBucketInfoV1::~GetBucketInfoV1() {
  SharedDtor();
}

void GetBucketInfoV1::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void GetBucketInfoV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBucketInfoV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBucketInfoV1_descriptor_;
}

const GetBucketInfoV1& GetBucketInfoV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();  return *default_instance_;
}

GetBucketInfoV1* GetBucketInfoV1::default_instance_ = NULL;

GetBucketInfoV1* GetBucketInfoV1::New() const {
  return new GetBucketInfoV1;
}

void GetBucketInfoV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBucketInfoV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBucketInfoV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBucketInfoV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBucketInfoV1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBucketInfoV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBucketInfoV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBucketInfoV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBucketInfoV1::MergeFrom(const GetBucketInfoV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBucketInfoV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBucketInfoV1::CopyFrom(const GetBucketInfoV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBucketInfoV1::IsInitialized() const {
  
  return true;
}

void GetBucketInfoV1::Swap(GetBucketInfoV1* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBucketInfoV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBucketInfoV1_descriptor_;
  metadata.reflection = GetBucketInfoV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStreamSetInfoV1::kPathFieldNumber;
#endif  // !_MSC_VER

GetStreamSetInfoV1::GetStreamSetInfoV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStreamSetInfoV1::InitAsDefaultInstance() {
}

GetStreamSetInfoV1::GetStreamSetInfoV1(const GetStreamSetInfoV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStreamSetInfoV1::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStreamSetInfoV1::~GetStreamSetInfoV1() {
  SharedDtor();
}

void GetStreamSetInfoV1::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void GetStreamSetInfoV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStreamSetInfoV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStreamSetInfoV1_descriptor_;
}

const GetStreamSetInfoV1& GetStreamSetInfoV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();  return *default_instance_;
}

GetStreamSetInfoV1* GetStreamSetInfoV1::default_instance_ = NULL;

GetStreamSetInfoV1* GetStreamSetInfoV1::New() const {
  return new GetStreamSetInfoV1;
}

void GetStreamSetInfoV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStreamSetInfoV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStreamSetInfoV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStreamSetInfoV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStreamSetInfoV1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStreamSetInfoV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStreamSetInfoV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStreamSetInfoV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStreamSetInfoV1::MergeFrom(const GetStreamSetInfoV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStreamSetInfoV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamSetInfoV1::CopyFrom(const GetStreamSetInfoV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamSetInfoV1::IsInitialized() const {
  
  return true;
}

void GetStreamSetInfoV1::Swap(GetStreamSetInfoV1* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStreamSetInfoV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStreamSetInfoV1_descriptor_;
  metadata.reflection = GetStreamSetInfoV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStreamInfoV1::kPathFieldNumber;
#endif  // !_MSC_VER

GetStreamInfoV1::GetStreamInfoV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStreamInfoV1::InitAsDefaultInstance() {
}

GetStreamInfoV1::GetStreamInfoV1(const GetStreamInfoV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStreamInfoV1::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStreamInfoV1::~GetStreamInfoV1() {
  SharedDtor();
}

void GetStreamInfoV1::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void GetStreamInfoV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStreamInfoV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStreamInfoV1_descriptor_;
}

const GetStreamInfoV1& GetStreamInfoV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();  return *default_instance_;
}

GetStreamInfoV1* GetStreamInfoV1::default_instance_ = NULL;

GetStreamInfoV1* GetStreamInfoV1::New() const {
  return new GetStreamInfoV1;
}

void GetStreamInfoV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStreamInfoV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStreamInfoV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStreamInfoV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStreamInfoV1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStreamInfoV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStreamInfoV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStreamInfoV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStreamInfoV1::MergeFrom(const GetStreamInfoV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStreamInfoV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamInfoV1::CopyFrom(const GetStreamInfoV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamInfoV1::IsInitialized() const {
  
  return true;
}

void GetStreamInfoV1::Swap(GetStreamInfoV1* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStreamInfoV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStreamInfoV1_descriptor_;
  metadata.reflection = GetStreamInfoV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStreamV1::kPathFieldNumber;
const int GetStreamV1::kStartOffsetFieldNumber;
const int GetStreamV1::kMaxResponseBytesFieldNumber;
const int GetStreamV1::kMaxResponseEnvelopesFieldNumber;
#endif  // !_MSC_VER

GetStreamV1::GetStreamV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStreamV1::InitAsDefaultInstance() {
}

GetStreamV1::GetStreamV1(const GetStreamV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStreamV1::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_offset_ = GOOGLE_ULONGLONG(0);
  max_response_bytes_ = 0u;
  max_response_envelopes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStreamV1::~GetStreamV1() {
  SharedDtor();
}

void GetStreamV1::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void GetStreamV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStreamV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStreamV1_descriptor_;
}

const GetStreamV1& GetStreamV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();  return *default_instance_;
}

GetStreamV1* GetStreamV1::default_instance_ = NULL;

GetStreamV1* GetStreamV1::New() const {
  return new GetStreamV1;
}

void GetStreamV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    start_offset_ = GOOGLE_ULONGLONG(0);
    max_response_bytes_ = 0u;
    max_response_envelopes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStreamV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_offset;
        break;
      }
      
      // optional uint64 start_offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_offset_)));
          set_has_start_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_response_bytes;
        break;
      }
      
      // optional uint32 max_response_bytes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_response_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_response_bytes_)));
          set_has_max_response_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_response_envelopes;
        break;
      }
      
      // optional uint32 max_response_envelopes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_response_envelopes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_response_envelopes_)));
          set_has_max_response_envelopes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStreamV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  // optional uint64 start_offset = 2;
  if (has_start_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->start_offset(), output);
  }
  
  // optional uint32 max_response_bytes = 3;
  if (has_max_response_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_response_bytes(), output);
  }
  
  // optional uint32 max_response_envelopes = 4;
  if (has_max_response_envelopes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_response_envelopes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStreamV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }
  
  // optional uint64 start_offset = 2;
  if (has_start_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_offset(), target);
  }
  
  // optional uint32 max_response_bytes = 3;
  if (has_max_response_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_response_bytes(), target);
  }
  
  // optional uint32 max_response_envelopes = 4;
  if (has_max_response_envelopes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_response_envelopes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStreamV1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // optional uint64 start_offset = 2;
    if (has_start_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_offset());
    }
    
    // optional uint32 max_response_bytes = 3;
    if (has_max_response_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_response_bytes());
    }
    
    // optional uint32 max_response_envelopes = 4;
    if (has_max_response_envelopes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_response_envelopes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStreamV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStreamV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStreamV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStreamV1::MergeFrom(const GetStreamV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_start_offset()) {
      set_start_offset(from.start_offset());
    }
    if (from.has_max_response_bytes()) {
      set_max_response_bytes(from.max_response_bytes());
    }
    if (from.has_max_response_envelopes()) {
      set_max_response_envelopes(from.max_response_envelopes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStreamV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamV1::CopyFrom(const GetStreamV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamV1::IsInitialized() const {
  
  return true;
}

void GetStreamV1::Swap(GetStreamV1* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(start_offset_, other->start_offset_);
    std::swap(max_response_bytes_, other->max_response_bytes_);
    std::swap(max_response_envelopes_, other->max_response_envelopes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStreamV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStreamV1_descriptor_;
  metadata.reflection = GetStreamV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WriteEnvelopeV1::kPathFieldNumber;
const int WriteEnvelopeV1::kEnvelopeFieldNumber;
const int WriteEnvelopeV1::kAcknowledgeFieldNumber;
const int WriteEnvelopeV1::kSynchronousFieldNumber;
#endif  // !_MSC_VER

WriteEnvelopeV1::WriteEnvelopeV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WriteEnvelopeV1::InitAsDefaultInstance() {
}

WriteEnvelopeV1::WriteEnvelopeV1(const WriteEnvelopeV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WriteEnvelopeV1::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  acknowledge_ = true;
  synchronous_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteEnvelopeV1::~WriteEnvelopeV1() {
  SharedDtor();
}

void WriteEnvelopeV1::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void WriteEnvelopeV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteEnvelopeV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteEnvelopeV1_descriptor_;
}

const WriteEnvelopeV1& WriteEnvelopeV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();  return *default_instance_;
}

WriteEnvelopeV1* WriteEnvelopeV1::default_instance_ = NULL;

WriteEnvelopeV1* WriteEnvelopeV1::New() const {
  return new WriteEnvelopeV1;
}

void WriteEnvelopeV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    acknowledge_ = true;
    synchronous_ = false;
  }
  envelope_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteEnvelopeV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_envelope;
        break;
      }
      
      // repeated bytes envelope = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_envelope:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_envelope()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_envelope;
        if (input->ExpectTag(24)) goto parse_acknowledge;
        break;
      }
      
      // optional bool acknowledge = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acknowledge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acknowledge_)));
          set_has_acknowledge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_synchronous;
        break;
      }
      
      // optional bool synchronous = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_synchronous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &synchronous_)));
          set_has_synchronous();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WriteEnvelopeV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  // repeated bytes envelope = 2;
  for (int i = 0; i < this->envelope_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->envelope(i), output);
  }
  
  // optional bool acknowledge = 3 [default = true];
  if (has_acknowledge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->acknowledge(), output);
  }
  
  // optional bool synchronous = 4 [default = false];
  if (has_synchronous()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->synchronous(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WriteEnvelopeV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }
  
  // repeated bytes envelope = 2;
  for (int i = 0; i < this->envelope_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->envelope(i), target);
  }
  
  // optional bool acknowledge = 3 [default = true];
  if (has_acknowledge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->acknowledge(), target);
  }
  
  // optional bool synchronous = 4 [default = false];
  if (has_synchronous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->synchronous(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WriteEnvelopeV1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // optional bool acknowledge = 3 [default = true];
    if (has_acknowledge()) {
      total_size += 1 + 1;
    }
    
    // optional bool synchronous = 4 [default = false];
    if (has_synchronous()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated bytes envelope = 2;
  total_size += 1 * this->envelope_size();
  for (int i = 0; i < this->envelope_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->envelope(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteEnvelopeV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteEnvelopeV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteEnvelopeV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteEnvelopeV1::MergeFrom(const WriteEnvelopeV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  envelope_.MergeFrom(from.envelope_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_acknowledge()) {
      set_acknowledge(from.acknowledge());
    }
    if (from.has_synchronous()) {
      set_synchronous(from.synchronous());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteEnvelopeV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteEnvelopeV1::CopyFrom(const WriteEnvelopeV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteEnvelopeV1::IsInitialized() const {
  
  return true;
}

void WriteEnvelopeV1::Swap(WriteEnvelopeV1* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    envelope_.Swap(&other->envelope_);
    std::swap(acknowledge_, other->acknowledge_);
    std::swap(synchronous_, other->synchronous_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteEnvelopeV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteEnvelopeV1_descriptor_;
  metadata.reflection = WriteEnvelopeV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WriteEnvelopeFromMessagesV1::kPathFieldNumber;
const int WriteEnvelopeFromMessagesV1::kMessageFieldNumber;
const int WriteEnvelopeFromMessagesV1::kMessageNamespaceFieldNumber;
const int WriteEnvelopeFromMessagesV1::kMessageTypeFieldNumber;
#endif  // !_MSC_VER

WriteEnvelopeFromMessagesV1::WriteEnvelopeFromMessagesV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WriteEnvelopeFromMessagesV1::InitAsDefaultInstance() {
}

WriteEnvelopeFromMessagesV1::WriteEnvelopeFromMessagesV1(const WriteEnvelopeFromMessagesV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WriteEnvelopeFromMessagesV1::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteEnvelopeFromMessagesV1::~WriteEnvelopeFromMessagesV1() {
  SharedDtor();
}

void WriteEnvelopeFromMessagesV1::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void WriteEnvelopeFromMessagesV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteEnvelopeFromMessagesV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteEnvelopeFromMessagesV1_descriptor_;
}

const WriteEnvelopeFromMessagesV1& WriteEnvelopeFromMessagesV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();  return *default_instance_;
}

WriteEnvelopeFromMessagesV1* WriteEnvelopeFromMessagesV1::default_instance_ = NULL;

WriteEnvelopeFromMessagesV1* WriteEnvelopeFromMessagesV1::New() const {
  return new WriteEnvelopeFromMessagesV1;
}

void WriteEnvelopeFromMessagesV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  message_.Clear();
  message_namespace_.Clear();
  message_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteEnvelopeFromMessagesV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // repeated bytes message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        if (input->ExpectTag(26)) goto parse_message_namespace;
        break;
      }
      
      // repeated uint32 message_namespace = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message_namespace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_message_namespace())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_message_namespace())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_message_type;
        break;
      }
      
      // repeated uint32 message_type = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_message_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_message_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WriteEnvelopeFromMessagesV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  // repeated bytes message = 2;
  for (int i = 0; i < this->message_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->message(i), output);
  }
  
  // repeated uint32 message_namespace = 3 [packed = true];
  if (this->message_namespace_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_message_namespace_cached_byte_size_);
  }
  for (int i = 0; i < this->message_namespace_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->message_namespace(i), output);
  }
  
  // repeated uint32 message_type = 4 [packed = true];
  if (this->message_type_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_message_type_cached_byte_size_);
  }
  for (int i = 0; i < this->message_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->message_type(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WriteEnvelopeFromMessagesV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }
  
  // repeated bytes message = 2;
  for (int i = 0; i < this->message_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->message(i), target);
  }
  
  // repeated uint32 message_namespace = 3 [packed = true];
  if (this->message_namespace_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _message_namespace_cached_byte_size_, target);
  }
  for (int i = 0; i < this->message_namespace_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->message_namespace(i), target);
  }
  
  // repeated uint32 message_type = 4 [packed = true];
  if (this->message_type_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _message_type_cached_byte_size_, target);
  }
  for (int i = 0; i < this->message_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->message_type(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WriteEnvelopeFromMessagesV1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  // repeated bytes message = 2;
  total_size += 1 * this->message_size();
  for (int i = 0; i < this->message_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->message(i));
  }
  
  // repeated uint32 message_namespace = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->message_namespace_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->message_namespace(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _message_namespace_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated uint32 message_type = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->message_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->message_type(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _message_type_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteEnvelopeFromMessagesV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteEnvelopeFromMessagesV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteEnvelopeFromMessagesV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteEnvelopeFromMessagesV1::MergeFrom(const WriteEnvelopeFromMessagesV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  message_.MergeFrom(from.message_);
  message_namespace_.MergeFrom(from.message_namespace_);
  message_type_.MergeFrom(from.message_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteEnvelopeFromMessagesV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteEnvelopeFromMessagesV1::CopyFrom(const WriteEnvelopeFromMessagesV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteEnvelopeFromMessagesV1::IsInitialized() const {
  
  return true;
}

void WriteEnvelopeFromMessagesV1::Swap(WriteEnvelopeFromMessagesV1* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    message_.Swap(&other->message_);
    message_namespace_.Swap(&other->message_namespace_);
    message_type_.Swap(&other->message_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteEnvelopeFromMessagesV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteEnvelopeFromMessagesV1_descriptor_;
  metadata.reflection = WriteEnvelopeFromMessagesV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeStoreChangesV1::kPathFieldNumber;
#endif  // !_MSC_VER

SubscribeStoreChangesV1::SubscribeStoreChangesV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeStoreChangesV1::InitAsDefaultInstance() {
}

SubscribeStoreChangesV1::SubscribeStoreChangesV1(const SubscribeStoreChangesV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeStoreChangesV1::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeStoreChangesV1::~SubscribeStoreChangesV1() {
  SharedDtor();
}

void SubscribeStoreChangesV1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscribeStoreChangesV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeStoreChangesV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeStoreChangesV1_descriptor_;
}

const SubscribeStoreChangesV1& SubscribeStoreChangesV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();  return *default_instance_;
}

SubscribeStoreChangesV1* SubscribeStoreChangesV1::default_instance_ = NULL;

SubscribeStoreChangesV1* SubscribeStoreChangesV1::New() const {
  return new SubscribeStoreChangesV1;
}

void SubscribeStoreChangesV1::Clear() {
  path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeStoreChangesV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path(0).data(), this->path(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_path;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeStoreChangesV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string path = 1;
  for (int i = 0; i < this->path_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->path(i).data(), this->path(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeStoreChangesV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string path = 1;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path(i).data(), this->path(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->path(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeStoreChangesV1::ByteSize() const {
  int total_size = 0;
  
  // repeated string path = 1;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->path(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeStoreChangesV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeStoreChangesV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeStoreChangesV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeStoreChangesV1::MergeFrom(const SubscribeStoreChangesV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeStoreChangesV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeStoreChangesV1::CopyFrom(const SubscribeStoreChangesV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeStoreChangesV1::IsInitialized() const {
  
  return true;
}

void SubscribeStoreChangesV1::Swap(SubscribeStoreChangesV1* other) {
  if (other != this) {
    path_.Swap(&other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeStoreChangesV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeStoreChangesV1_descriptor_;
  metadata.reflection = SubscribeStoreChangesV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeEnvelopesV1::kPathFieldNumber;
const int SubscribeEnvelopesV1::kLuaCodeFieldNumber;
#endif  // !_MSC_VER

SubscribeEnvelopesV1::SubscribeEnvelopesV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeEnvelopesV1::InitAsDefaultInstance() {
}

SubscribeEnvelopesV1::SubscribeEnvelopesV1(const SubscribeEnvelopesV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeEnvelopesV1::SharedCtor() {
  _cached_size_ = 0;
  lua_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeEnvelopesV1::~SubscribeEnvelopesV1() {
  SharedDtor();
}

void SubscribeEnvelopesV1::SharedDtor() {
  if (lua_code_ != &::google::protobuf::internal::kEmptyString) {
    delete lua_code_;
  }
  if (this != default_instance_) {
  }
}

void SubscribeEnvelopesV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeEnvelopesV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeEnvelopesV1_descriptor_;
}

const SubscribeEnvelopesV1& SubscribeEnvelopesV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();  return *default_instance_;
}

SubscribeEnvelopesV1* SubscribeEnvelopesV1::default_instance_ = NULL;

SubscribeEnvelopesV1* SubscribeEnvelopesV1::New() const {
  return new SubscribeEnvelopesV1;
}

void SubscribeEnvelopesV1::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_lua_code()) {
      if (lua_code_ != &::google::protobuf::internal::kEmptyString) {
        lua_code_->clear();
      }
    }
  }
  path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeEnvelopesV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path(0).data(), this->path(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_path;
        if (input->ExpectTag(18)) goto parse_lua_code;
        break;
      }
      
      // optional string lua_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lua_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lua_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lua_code().data(), this->lua_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeEnvelopesV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string path = 1;
  for (int i = 0; i < this->path_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->path(i).data(), this->path(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(i), output);
  }
  
  // optional string lua_code = 2;
  if (has_lua_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lua_code().data(), this->lua_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lua_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeEnvelopesV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string path = 1;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path(i).data(), this->path(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->path(i), target);
  }
  
  // optional string lua_code = 2;
  if (has_lua_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lua_code().data(), this->lua_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lua_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeEnvelopesV1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string lua_code = 2;
    if (has_lua_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lua_code());
    }
    
  }
  // repeated string path = 1;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->path(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeEnvelopesV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeEnvelopesV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeEnvelopesV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeEnvelopesV1::MergeFrom(const SubscribeEnvelopesV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_lua_code()) {
      set_lua_code(from.lua_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeEnvelopesV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeEnvelopesV1::CopyFrom(const SubscribeEnvelopesV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeEnvelopesV1::IsInitialized() const {
  
  return true;
}

void SubscribeEnvelopesV1::Swap(SubscribeEnvelopesV1* other) {
  if (other != this) {
    path_.Swap(&other->path_);
    std::swap(lua_code_, other->lua_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeEnvelopesV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeEnvelopesV1_descriptor_;
  metadata.reflection = SubscribeEnvelopesV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeKeepaliveV1::kIdFieldNumber;
#endif  // !_MSC_VER

SubscribeKeepaliveV1::SubscribeKeepaliveV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeKeepaliveV1::InitAsDefaultInstance() {
}

SubscribeKeepaliveV1::SubscribeKeepaliveV1(const SubscribeKeepaliveV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeKeepaliveV1::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeKeepaliveV1::~SubscribeKeepaliveV1() {
  SharedDtor();
}

void SubscribeKeepaliveV1::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void SubscribeKeepaliveV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeKeepaliveV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeKeepaliveV1_descriptor_;
}

const SubscribeKeepaliveV1& SubscribeKeepaliveV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();  return *default_instance_;
}

SubscribeKeepaliveV1* SubscribeKeepaliveV1::default_instance_ = NULL;

SubscribeKeepaliveV1* SubscribeKeepaliveV1::New() const {
  return new SubscribeKeepaliveV1;
}

void SubscribeKeepaliveV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeKeepaliveV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeKeepaliveV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeKeepaliveV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeKeepaliveV1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeKeepaliveV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeKeepaliveV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeKeepaliveV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeKeepaliveV1::MergeFrom(const SubscribeKeepaliveV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeKeepaliveV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeKeepaliveV1::CopyFrom(const SubscribeKeepaliveV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeKeepaliveV1::IsInitialized() const {
  
  return true;
}

void SubscribeKeepaliveV1::Swap(SubscribeKeepaliveV1* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeKeepaliveV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeKeepaliveV1_descriptor_;
  metadata.reflection = SubscribeKeepaliveV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeCancelV1::kIdFieldNumber;
#endif  // !_MSC_VER

SubscribeCancelV1::SubscribeCancelV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeCancelV1::InitAsDefaultInstance() {
}

SubscribeCancelV1::SubscribeCancelV1(const SubscribeCancelV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeCancelV1::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeCancelV1::~SubscribeCancelV1() {
  SharedDtor();
}

void SubscribeCancelV1::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void SubscribeCancelV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeCancelV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeCancelV1_descriptor_;
}

const SubscribeCancelV1& SubscribeCancelV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();  return *default_instance_;
}

SubscribeCancelV1* SubscribeCancelV1::default_instance_ = NULL;

SubscribeCancelV1* SubscribeCancelV1::New() const {
  return new SubscribeCancelV1;
}

void SubscribeCancelV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeCancelV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeCancelV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeCancelV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeCancelV1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeCancelV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeCancelV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeCancelV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeCancelV1::MergeFrom(const SubscribeCancelV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeCancelV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeCancelV1::CopyFrom(const SubscribeCancelV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeCancelV1::IsInitialized() const {
  
  return true;
}

void SubscribeCancelV1::Swap(SubscribeCancelV1* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeCancelV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeCancelV1_descriptor_;
  metadata.reflection = SubscribeCancelV1_reflection_;
  return metadata;
}



bool PingV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool PingV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool GetFeaturesV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool GetFeaturesV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool GetStoreInfoV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool GetStoreInfoV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool GetBucketInfoV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool GetBucketInfoV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool GetStreamSetInfoV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool GetStreamSetInfoV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool GetStreamInfoV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool GetStreamInfoV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool GetStreamV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool GetStreamV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool WriteEnvelopeV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool WriteEnvelopeV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool WriteEnvelopeFromMessagesV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool WriteEnvelopeFromMessagesV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool SubscribeStoreChangesV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool SubscribeStoreChangesV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool SubscribeEnvelopesV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool SubscribeEnvelopesV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool SubscribeKeepaliveV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool SubscribeKeepaliveV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool SubscribeCancelV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool SubscribeCancelV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}
// @@protoc_insertion_point(namespace_scope)

}  // namespace request
}  // namespace protocol
}  // namespace zippylog

// @@protoc_insertion_point(global_scope)
