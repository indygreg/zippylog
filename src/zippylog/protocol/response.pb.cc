// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zippylog/protocol/response.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zippylog {
namespace protocol {
namespace response {

namespace {

const ::google::protobuf::Descriptor* PongV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PongV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureSpecificationV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureSpecificationV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamSegmentStartV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamSegmentStartV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamSegmentEndV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamSegmentEndV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscriptionAcceptAckV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscriptionAcceptAckV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscriptionKeepaliveAckV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscriptionKeepaliveAckV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscriptionStartV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscriptionStartV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteAckV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteAckV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* PluginRegisterAckV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PluginRegisterAckV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* PluginUnregisterAckV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PluginUnregisterAckV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* PluginStatusV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PluginStatusV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_zippylog_2fprotocol_2fresponse_2eproto() {
  protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zippylog/protocol/response.proto");
  GOOGLE_CHECK(file != NULL);
  PongV1_descriptor_ = file->message_type(0);
  static const int PongV1_offsets_[1] = {
  };
  PongV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PongV1_descriptor_,
      PongV1::default_instance_,
      PongV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PongV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PongV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PongV1));
  FeatureSpecificationV1_descriptor_ = file->message_type(1);
  static const int FeatureSpecificationV1_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureSpecificationV1, supported_message_formats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureSpecificationV1, supported_request_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureSpecificationV1, supported_request_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureSpecificationV1, max_stream_segment_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureSpecificationV1, max_stream_segment_envelopes_),
  };
  FeatureSpecificationV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeatureSpecificationV1_descriptor_,
      FeatureSpecificationV1::default_instance_,
      FeatureSpecificationV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureSpecificationV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureSpecificationV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeatureSpecificationV1));
  StreamSegmentStartV1_descriptor_ = file->message_type(2);
  static const int StreamSegmentStartV1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSegmentStartV1, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSegmentStartV1, offset_),
  };
  StreamSegmentStartV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamSegmentStartV1_descriptor_,
      StreamSegmentStartV1::default_instance_,
      StreamSegmentStartV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSegmentStartV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSegmentStartV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamSegmentStartV1));
  StreamSegmentEndV1_descriptor_ = file->message_type(3);
  static const int StreamSegmentEndV1_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSegmentEndV1, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSegmentEndV1, bytes_sent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSegmentEndV1, envelopes_sent_),
  };
  StreamSegmentEndV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamSegmentEndV1_descriptor_,
      StreamSegmentEndV1::default_instance_,
      StreamSegmentEndV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSegmentEndV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSegmentEndV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamSegmentEndV1));
  SubscriptionAcceptAckV1_descriptor_ = file->message_type(4);
  static const int SubscriptionAcceptAckV1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionAcceptAckV1, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionAcceptAckV1, ttl_),
  };
  SubscriptionAcceptAckV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscriptionAcceptAckV1_descriptor_,
      SubscriptionAcceptAckV1::default_instance_,
      SubscriptionAcceptAckV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionAcceptAckV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionAcceptAckV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscriptionAcceptAckV1));
  SubscriptionKeepaliveAckV1_descriptor_ = file->message_type(5);
  static const int SubscriptionKeepaliveAckV1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionKeepaliveAckV1, id_),
  };
  SubscriptionKeepaliveAckV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscriptionKeepaliveAckV1_descriptor_,
      SubscriptionKeepaliveAckV1::default_instance_,
      SubscriptionKeepaliveAckV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionKeepaliveAckV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionKeepaliveAckV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscriptionKeepaliveAckV1));
  SubscriptionStartV1_descriptor_ = file->message_type(6);
  static const int SubscriptionStartV1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionStartV1, id_),
  };
  SubscriptionStartV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscriptionStartV1_descriptor_,
      SubscriptionStartV1::default_instance_,
      SubscriptionStartV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionStartV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionStartV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscriptionStartV1));
  WriteAckV1_descriptor_ = file->message_type(7);
  static const int WriteAckV1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteAckV1, envelopes_written_),
  };
  WriteAckV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteAckV1_descriptor_,
      WriteAckV1::default_instance_,
      WriteAckV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteAckV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteAckV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteAckV1));
  PluginRegisterAckV1_descriptor_ = file->message_type(8);
  static const int PluginRegisterAckV1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginRegisterAckV1, name_),
  };
  PluginRegisterAckV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PluginRegisterAckV1_descriptor_,
      PluginRegisterAckV1::default_instance_,
      PluginRegisterAckV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginRegisterAckV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginRegisterAckV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PluginRegisterAckV1));
  PluginUnregisterAckV1_descriptor_ = file->message_type(9);
  static const int PluginUnregisterAckV1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginUnregisterAckV1, name_),
  };
  PluginUnregisterAckV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PluginUnregisterAckV1_descriptor_,
      PluginUnregisterAckV1::default_instance_,
      PluginUnregisterAckV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginUnregisterAckV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginUnregisterAckV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PluginUnregisterAckV1));
  PluginStatusV1_descriptor_ = file->message_type(10);
  static const int PluginStatusV1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginStatusV1, state_),
  };
  PluginStatusV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PluginStatusV1_descriptor_,
      PluginStatusV1::default_instance_,
      PluginStatusV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginStatusV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginStatusV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PluginStatusV1));
  Error_descriptor_ = file->message_type(11);
  static const int Error_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, msg_),
  };
  Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error));
  ErrorCode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zippylog_2fprotocol_2fresponse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PongV1_descriptor_, &PongV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeatureSpecificationV1_descriptor_, &FeatureSpecificationV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamSegmentStartV1_descriptor_, &StreamSegmentStartV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamSegmentEndV1_descriptor_, &StreamSegmentEndV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscriptionAcceptAckV1_descriptor_, &SubscriptionAcceptAckV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscriptionKeepaliveAckV1_descriptor_, &SubscriptionKeepaliveAckV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscriptionStartV1_descriptor_, &SubscriptionStartV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteAckV1_descriptor_, &WriteAckV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PluginRegisterAckV1_descriptor_, &PluginRegisterAckV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PluginUnregisterAckV1_descriptor_, &PluginUnregisterAckV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PluginStatusV1_descriptor_, &PluginStatusV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_descriptor_, &Error::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zippylog_2fprotocol_2fresponse_2eproto() {
  delete PongV1::default_instance_;
  delete PongV1_reflection_;
  delete FeatureSpecificationV1::default_instance_;
  delete FeatureSpecificationV1_reflection_;
  delete StreamSegmentStartV1::default_instance_;
  delete StreamSegmentStartV1_reflection_;
  delete StreamSegmentEndV1::default_instance_;
  delete StreamSegmentEndV1_reflection_;
  delete SubscriptionAcceptAckV1::default_instance_;
  delete SubscriptionAcceptAckV1_reflection_;
  delete SubscriptionKeepaliveAckV1::default_instance_;
  delete SubscriptionKeepaliveAckV1_reflection_;
  delete SubscriptionStartV1::default_instance_;
  delete SubscriptionStartV1_reflection_;
  delete WriteAckV1::default_instance_;
  delete WriteAckV1_reflection_;
  delete PluginRegisterAckV1::default_instance_;
  delete PluginRegisterAckV1_reflection_;
  delete PluginUnregisterAckV1::default_instance_;
  delete PluginUnregisterAckV1_reflection_;
  delete PluginStatusV1::default_instance_;
  delete PluginStatusV1_reflection_;
  delete Error::default_instance_;
  delete Error_reflection_;
}

void protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::zippylog::protocol::protobuf_AddDesc_zippylog_2fprotocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n zippylog/protocol/response.proto\022\032zipp"
    "ylog.protocol.response\032\027zippylog/protoco"
    "l.proto\"\010\n\006PongV1\"\305\001\n\026FeatureSpecificati"
    "onV1\022!\n\031supported_message_formats\030\001 \003(\r\022"
    "\037\n\027supported_request_types\030\002 \003(\r\022\037\n\027supp"
    "orted_request_names\030\003 \003(\t\022 \n\030max_stream_"
    "segment_bytes\030\004 \001(\r\022$\n\034max_stream_segmen"
    "t_envelopes\030\005 \001(\r\"4\n\024StreamSegmentStartV"
    "1\022\014\n\004path\030\001 \002(\t\022\016\n\006offset\030\002 \002(\004\"P\n\022Strea"
    "mSegmentEndV1\022\016\n\006offset\030\001 \002(\004\022\022\n\nbytes_s"
    "ent\030\002 \002(\r\022\026\n\016envelopes_sent\030\003 \002(\r\"2\n\027Sub"
    "scriptionAcceptAckV1\022\n\n\002id\030\001 \002(\014\022\013\n\003ttl\030"
    "\002 \002(\r\"(\n\032SubscriptionKeepaliveAckV1\022\n\n\002i"
    "d\030\001 \002(\014\"!\n\023SubscriptionStartV1\022\n\n\002id\030\001 \002"
    "(\014\"\'\n\nWriteAckV1\022\031\n\021envelopes_written\030\001 "
    "\002(\r\"#\n\023PluginRegisterAckV1\022\014\n\004name\030\001 \002(\t"
    "\"%\n\025PluginUnregisterAckV1\022\014\n\004name\030\001 \002(\t\""
    "A\n\016PluginStatusV1\022/\n\005state\030\001 \003(\0132 .zippy"
    "log.protocol.PluginStateV1\"I\n\005Error\0223\n\004c"
    "ode\030\001 \001(\0162%.zippylog.protocol.response.E"
    "rrorCode\022\013\n\003msg\030\002 \001(\t*\206\004\n\tErrorCode\022\032\n\026E"
    "NVELOPE_PARSE_FAILURE\020\001\022\035\n\031INVALID_MESSA"
    "GE_NAMESPACE\020\002\022\030\n\024UNKNOWN_REQUEST_TYPE\020\003"
    "\022\022\n\016EMPTY_ENVELOPE\020\004\022\030\n\024MISSING_ENUMERAT"
    "IONS\020\005\022\033\n\027REQUEST_NOT_IMPLEMENTED\020\006\022\017\n\013E"
    "MPTY_FIELD\020\007\022\033\n\027FIELD_LENGTHS_DIFFERENT\020"
    "\010\022\031\n\025INVALID_STREAM_OFFSET\020\t\022\022\n\016INVALID_"
    "OFFSET\020\n\022\022\n\016PATH_NOT_FOUND\020\013\022\022\n\016LIMIT_EX"
    "CEEDED\020\014\022\"\n\036UNKNOWN_MESSAGE_FORMAT_VERSI"
    "ON\020\r\022\020\n\014INVALID_PATH\020\016\022)\n%UNSUPPORTED_OP"
    "ERATION_MESSAGE_VERSION\020\017\022\021\n\rEMPTY_MESSA"
    "GE\020\020\022\030\n\024PROTOCOL_NO_ENVELOPE\020\021\022\034\n\030GENERA"
    "L_ERROR_PROCESSING\020\022\022\r\n\tLUA_ERROR\020\023\022\031\n\025S"
    "UBSCRIPTION_REJECTED\020\024", 1342);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zippylog/protocol/response.proto", &protobuf_RegisterTypes);
  PongV1::default_instance_ = new PongV1();
  FeatureSpecificationV1::default_instance_ = new FeatureSpecificationV1();
  StreamSegmentStartV1::default_instance_ = new StreamSegmentStartV1();
  StreamSegmentEndV1::default_instance_ = new StreamSegmentEndV1();
  SubscriptionAcceptAckV1::default_instance_ = new SubscriptionAcceptAckV1();
  SubscriptionKeepaliveAckV1::default_instance_ = new SubscriptionKeepaliveAckV1();
  SubscriptionStartV1::default_instance_ = new SubscriptionStartV1();
  WriteAckV1::default_instance_ = new WriteAckV1();
  PluginRegisterAckV1::default_instance_ = new PluginRegisterAckV1();
  PluginUnregisterAckV1::default_instance_ = new PluginUnregisterAckV1();
  PluginStatusV1::default_instance_ = new PluginStatusV1();
  Error::default_instance_ = new Error();
  PongV1::default_instance_->InitAsDefaultInstance();
  FeatureSpecificationV1::default_instance_->InitAsDefaultInstance();
  StreamSegmentStartV1::default_instance_->InitAsDefaultInstance();
  StreamSegmentEndV1::default_instance_->InitAsDefaultInstance();
  SubscriptionAcceptAckV1::default_instance_->InitAsDefaultInstance();
  SubscriptionKeepaliveAckV1::default_instance_->InitAsDefaultInstance();
  SubscriptionStartV1::default_instance_->InitAsDefaultInstance();
  WriteAckV1::default_instance_->InitAsDefaultInstance();
  PluginRegisterAckV1::default_instance_->InitAsDefaultInstance();
  PluginUnregisterAckV1::default_instance_->InitAsDefaultInstance();
  PluginStatusV1::default_instance_->InitAsDefaultInstance();
  Error::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zippylog_2fprotocol_2fresponse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zippylog_2fprotocol_2fresponse_2eproto {
  StaticDescriptorInitializer_zippylog_2fprotocol_2fresponse_2eproto() {
    protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();
  }
} static_descriptor_initializer_zippylog_2fprotocol_2fresponse_2eproto_;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorCode_descriptor_;
}
bool ErrorCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PongV1::PongV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PongV1::InitAsDefaultInstance() {
}

PongV1::PongV1(const PongV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PongV1::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PongV1::~PongV1() {
  SharedDtor();
}

void PongV1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PongV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PongV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PongV1_descriptor_;
}

const PongV1& PongV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();  return *default_instance_;
}

PongV1* PongV1::default_instance_ = NULL;

PongV1* PongV1::New() const {
  return new PongV1;
}

void PongV1::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PongV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PongV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PongV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PongV1::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PongV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PongV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PongV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PongV1::MergeFrom(const PongV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PongV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PongV1::CopyFrom(const PongV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PongV1::IsInitialized() const {
  
  return true;
}

void PongV1::Swap(PongV1* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PongV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PongV1_descriptor_;
  metadata.reflection = PongV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeatureSpecificationV1::kSupportedMessageFormatsFieldNumber;
const int FeatureSpecificationV1::kSupportedRequestTypesFieldNumber;
const int FeatureSpecificationV1::kSupportedRequestNamesFieldNumber;
const int FeatureSpecificationV1::kMaxStreamSegmentBytesFieldNumber;
const int FeatureSpecificationV1::kMaxStreamSegmentEnvelopesFieldNumber;
#endif  // !_MSC_VER

FeatureSpecificationV1::FeatureSpecificationV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeatureSpecificationV1::InitAsDefaultInstance() {
}

FeatureSpecificationV1::FeatureSpecificationV1(const FeatureSpecificationV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeatureSpecificationV1::SharedCtor() {
  _cached_size_ = 0;
  max_stream_segment_bytes_ = 0u;
  max_stream_segment_envelopes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureSpecificationV1::~FeatureSpecificationV1() {
  SharedDtor();
}

void FeatureSpecificationV1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeatureSpecificationV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureSpecificationV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureSpecificationV1_descriptor_;
}

const FeatureSpecificationV1& FeatureSpecificationV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();  return *default_instance_;
}

FeatureSpecificationV1* FeatureSpecificationV1::default_instance_ = NULL;

FeatureSpecificationV1* FeatureSpecificationV1::New() const {
  return new FeatureSpecificationV1;
}

void FeatureSpecificationV1::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    max_stream_segment_bytes_ = 0u;
    max_stream_segment_envelopes_ = 0u;
  }
  supported_message_formats_.Clear();
  supported_request_types_.Clear();
  supported_request_names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeatureSpecificationV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 supported_message_formats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_supported_message_formats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_supported_message_formats())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_supported_message_formats())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_supported_message_formats;
        if (input->ExpectTag(16)) goto parse_supported_request_types;
        break;
      }
      
      // repeated uint32 supported_request_types = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_supported_request_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_supported_request_types())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_supported_request_types())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_supported_request_types;
        if (input->ExpectTag(26)) goto parse_supported_request_names;
        break;
      }
      
      // repeated string supported_request_names = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_supported_request_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_supported_request_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->supported_request_names(0).data(), this->supported_request_names(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_supported_request_names;
        if (input->ExpectTag(32)) goto parse_max_stream_segment_bytes;
        break;
      }
      
      // optional uint32 max_stream_segment_bytes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_stream_segment_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_stream_segment_bytes_)));
          set_has_max_stream_segment_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_stream_segment_envelopes;
        break;
      }
      
      // optional uint32 max_stream_segment_envelopes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_stream_segment_envelopes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_stream_segment_envelopes_)));
          set_has_max_stream_segment_envelopes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeatureSpecificationV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 supported_message_formats = 1;
  for (int i = 0; i < this->supported_message_formats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->supported_message_formats(i), output);
  }
  
  // repeated uint32 supported_request_types = 2;
  for (int i = 0; i < this->supported_request_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->supported_request_types(i), output);
  }
  
  // repeated string supported_request_names = 3;
  for (int i = 0; i < this->supported_request_names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->supported_request_names(i).data(), this->supported_request_names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->supported_request_names(i), output);
  }
  
  // optional uint32 max_stream_segment_bytes = 4;
  if (has_max_stream_segment_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_stream_segment_bytes(), output);
  }
  
  // optional uint32 max_stream_segment_envelopes = 5;
  if (has_max_stream_segment_envelopes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_stream_segment_envelopes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeatureSpecificationV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 supported_message_formats = 1;
  for (int i = 0; i < this->supported_message_formats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->supported_message_formats(i), target);
  }
  
  // repeated uint32 supported_request_types = 2;
  for (int i = 0; i < this->supported_request_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->supported_request_types(i), target);
  }
  
  // repeated string supported_request_names = 3;
  for (int i = 0; i < this->supported_request_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->supported_request_names(i).data(), this->supported_request_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->supported_request_names(i), target);
  }
  
  // optional uint32 max_stream_segment_bytes = 4;
  if (has_max_stream_segment_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_stream_segment_bytes(), target);
  }
  
  // optional uint32 max_stream_segment_envelopes = 5;
  if (has_max_stream_segment_envelopes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_stream_segment_envelopes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeatureSpecificationV1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional uint32 max_stream_segment_bytes = 4;
    if (has_max_stream_segment_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_stream_segment_bytes());
    }
    
    // optional uint32 max_stream_segment_envelopes = 5;
    if (has_max_stream_segment_envelopes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_stream_segment_envelopes());
    }
    
  }
  // repeated uint32 supported_message_formats = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->supported_message_formats_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->supported_message_formats(i));
    }
    total_size += 1 * this->supported_message_formats_size() + data_size;
  }
  
  // repeated uint32 supported_request_types = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->supported_request_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->supported_request_types(i));
    }
    total_size += 1 * this->supported_request_types_size() + data_size;
  }
  
  // repeated string supported_request_names = 3;
  total_size += 1 * this->supported_request_names_size();
  for (int i = 0; i < this->supported_request_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->supported_request_names(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureSpecificationV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeatureSpecificationV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeatureSpecificationV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeatureSpecificationV1::MergeFrom(const FeatureSpecificationV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  supported_message_formats_.MergeFrom(from.supported_message_formats_);
  supported_request_types_.MergeFrom(from.supported_request_types_);
  supported_request_names_.MergeFrom(from.supported_request_names_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_max_stream_segment_bytes()) {
      set_max_stream_segment_bytes(from.max_stream_segment_bytes());
    }
    if (from.has_max_stream_segment_envelopes()) {
      set_max_stream_segment_envelopes(from.max_stream_segment_envelopes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeatureSpecificationV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureSpecificationV1::CopyFrom(const FeatureSpecificationV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureSpecificationV1::IsInitialized() const {
  
  return true;
}

void FeatureSpecificationV1::Swap(FeatureSpecificationV1* other) {
  if (other != this) {
    supported_message_formats_.Swap(&other->supported_message_formats_);
    supported_request_types_.Swap(&other->supported_request_types_);
    supported_request_names_.Swap(&other->supported_request_names_);
    std::swap(max_stream_segment_bytes_, other->max_stream_segment_bytes_);
    std::swap(max_stream_segment_envelopes_, other->max_stream_segment_envelopes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeatureSpecificationV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureSpecificationV1_descriptor_;
  metadata.reflection = FeatureSpecificationV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StreamSegmentStartV1::kPathFieldNumber;
const int StreamSegmentStartV1::kOffsetFieldNumber;
#endif  // !_MSC_VER

StreamSegmentStartV1::StreamSegmentStartV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamSegmentStartV1::InitAsDefaultInstance() {
}

StreamSegmentStartV1::StreamSegmentStartV1(const StreamSegmentStartV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamSegmentStartV1::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offset_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamSegmentStartV1::~StreamSegmentStartV1() {
  SharedDtor();
}

void StreamSegmentStartV1::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void StreamSegmentStartV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamSegmentStartV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamSegmentStartV1_descriptor_;
}

const StreamSegmentStartV1& StreamSegmentStartV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();  return *default_instance_;
}

StreamSegmentStartV1* StreamSegmentStartV1::default_instance_ = NULL;

StreamSegmentStartV1* StreamSegmentStartV1::New() const {
  return new StreamSegmentStartV1;
}

void StreamSegmentStartV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    offset_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamSegmentStartV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }
      
      // required uint64 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamSegmentStartV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  // required uint64 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->offset(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamSegmentStartV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }
  
  // required uint64 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->offset(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamSegmentStartV1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // required uint64 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offset());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamSegmentStartV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamSegmentStartV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamSegmentStartV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamSegmentStartV1::MergeFrom(const StreamSegmentStartV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamSegmentStartV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSegmentStartV1::CopyFrom(const StreamSegmentStartV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSegmentStartV1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StreamSegmentStartV1::Swap(StreamSegmentStartV1* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamSegmentStartV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamSegmentStartV1_descriptor_;
  metadata.reflection = StreamSegmentStartV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StreamSegmentEndV1::kOffsetFieldNumber;
const int StreamSegmentEndV1::kBytesSentFieldNumber;
const int StreamSegmentEndV1::kEnvelopesSentFieldNumber;
#endif  // !_MSC_VER

StreamSegmentEndV1::StreamSegmentEndV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamSegmentEndV1::InitAsDefaultInstance() {
}

StreamSegmentEndV1::StreamSegmentEndV1(const StreamSegmentEndV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamSegmentEndV1::SharedCtor() {
  _cached_size_ = 0;
  offset_ = GOOGLE_ULONGLONG(0);
  bytes_sent_ = 0u;
  envelopes_sent_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamSegmentEndV1::~StreamSegmentEndV1() {
  SharedDtor();
}

void StreamSegmentEndV1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamSegmentEndV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamSegmentEndV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamSegmentEndV1_descriptor_;
}

const StreamSegmentEndV1& StreamSegmentEndV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();  return *default_instance_;
}

StreamSegmentEndV1* StreamSegmentEndV1::default_instance_ = NULL;

StreamSegmentEndV1* StreamSegmentEndV1::New() const {
  return new StreamSegmentEndV1;
}

void StreamSegmentEndV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = GOOGLE_ULONGLONG(0);
    bytes_sent_ = 0u;
    envelopes_sent_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamSegmentEndV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bytes_sent;
        break;
      }
      
      // required uint32 bytes_sent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_sent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_sent_)));
          set_has_bytes_sent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_envelopes_sent;
        break;
      }
      
      // required uint32 envelopes_sent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_envelopes_sent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &envelopes_sent_)));
          set_has_envelopes_sent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamSegmentEndV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->offset(), output);
  }
  
  // required uint32 bytes_sent = 2;
  if (has_bytes_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bytes_sent(), output);
  }
  
  // required uint32 envelopes_sent = 3;
  if (has_envelopes_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->envelopes_sent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamSegmentEndV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->offset(), target);
  }
  
  // required uint32 bytes_sent = 2;
  if (has_bytes_sent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bytes_sent(), target);
  }
  
  // required uint32 envelopes_sent = 3;
  if (has_envelopes_sent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->envelopes_sent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamSegmentEndV1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offset());
    }
    
    // required uint32 bytes_sent = 2;
    if (has_bytes_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bytes_sent());
    }
    
    // required uint32 envelopes_sent = 3;
    if (has_envelopes_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->envelopes_sent());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamSegmentEndV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamSegmentEndV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamSegmentEndV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamSegmentEndV1::MergeFrom(const StreamSegmentEndV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_bytes_sent()) {
      set_bytes_sent(from.bytes_sent());
    }
    if (from.has_envelopes_sent()) {
      set_envelopes_sent(from.envelopes_sent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamSegmentEndV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSegmentEndV1::CopyFrom(const StreamSegmentEndV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSegmentEndV1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void StreamSegmentEndV1::Swap(StreamSegmentEndV1* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(bytes_sent_, other->bytes_sent_);
    std::swap(envelopes_sent_, other->envelopes_sent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamSegmentEndV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamSegmentEndV1_descriptor_;
  metadata.reflection = StreamSegmentEndV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscriptionAcceptAckV1::kIdFieldNumber;
const int SubscriptionAcceptAckV1::kTtlFieldNumber;
#endif  // !_MSC_VER

SubscriptionAcceptAckV1::SubscriptionAcceptAckV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscriptionAcceptAckV1::InitAsDefaultInstance() {
}

SubscriptionAcceptAckV1::SubscriptionAcceptAckV1(const SubscriptionAcceptAckV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscriptionAcceptAckV1::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ttl_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscriptionAcceptAckV1::~SubscriptionAcceptAckV1() {
  SharedDtor();
}

void SubscriptionAcceptAckV1::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void SubscriptionAcceptAckV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscriptionAcceptAckV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriptionAcceptAckV1_descriptor_;
}

const SubscriptionAcceptAckV1& SubscriptionAcceptAckV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();  return *default_instance_;
}

SubscriptionAcceptAckV1* SubscriptionAcceptAckV1::default_instance_ = NULL;

SubscriptionAcceptAckV1* SubscriptionAcceptAckV1::New() const {
  return new SubscriptionAcceptAckV1;
}

void SubscriptionAcceptAckV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    ttl_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscriptionAcceptAckV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ttl;
        break;
      }
      
      // required uint32 ttl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ttl_)));
          set_has_ttl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscriptionAcceptAckV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  // required uint32 ttl = 2;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ttl(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscriptionAcceptAckV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  // required uint32 ttl = 2;
  if (has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ttl(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscriptionAcceptAckV1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
    // required uint32 ttl = 2;
    if (has_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ttl());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscriptionAcceptAckV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscriptionAcceptAckV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscriptionAcceptAckV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscriptionAcceptAckV1::MergeFrom(const SubscriptionAcceptAckV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscriptionAcceptAckV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionAcceptAckV1::CopyFrom(const SubscriptionAcceptAckV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionAcceptAckV1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SubscriptionAcceptAckV1::Swap(SubscriptionAcceptAckV1* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ttl_, other->ttl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscriptionAcceptAckV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscriptionAcceptAckV1_descriptor_;
  metadata.reflection = SubscriptionAcceptAckV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscriptionKeepaliveAckV1::kIdFieldNumber;
#endif  // !_MSC_VER

SubscriptionKeepaliveAckV1::SubscriptionKeepaliveAckV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscriptionKeepaliveAckV1::InitAsDefaultInstance() {
}

SubscriptionKeepaliveAckV1::SubscriptionKeepaliveAckV1(const SubscriptionKeepaliveAckV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscriptionKeepaliveAckV1::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscriptionKeepaliveAckV1::~SubscriptionKeepaliveAckV1() {
  SharedDtor();
}

void SubscriptionKeepaliveAckV1::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void SubscriptionKeepaliveAckV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscriptionKeepaliveAckV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriptionKeepaliveAckV1_descriptor_;
}

const SubscriptionKeepaliveAckV1& SubscriptionKeepaliveAckV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();  return *default_instance_;
}

SubscriptionKeepaliveAckV1* SubscriptionKeepaliveAckV1::default_instance_ = NULL;

SubscriptionKeepaliveAckV1* SubscriptionKeepaliveAckV1::New() const {
  return new SubscriptionKeepaliveAckV1;
}

void SubscriptionKeepaliveAckV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscriptionKeepaliveAckV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscriptionKeepaliveAckV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscriptionKeepaliveAckV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscriptionKeepaliveAckV1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscriptionKeepaliveAckV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscriptionKeepaliveAckV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscriptionKeepaliveAckV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscriptionKeepaliveAckV1::MergeFrom(const SubscriptionKeepaliveAckV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscriptionKeepaliveAckV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionKeepaliveAckV1::CopyFrom(const SubscriptionKeepaliveAckV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionKeepaliveAckV1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SubscriptionKeepaliveAckV1::Swap(SubscriptionKeepaliveAckV1* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscriptionKeepaliveAckV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscriptionKeepaliveAckV1_descriptor_;
  metadata.reflection = SubscriptionKeepaliveAckV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscriptionStartV1::kIdFieldNumber;
#endif  // !_MSC_VER

SubscriptionStartV1::SubscriptionStartV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscriptionStartV1::InitAsDefaultInstance() {
}

SubscriptionStartV1::SubscriptionStartV1(const SubscriptionStartV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscriptionStartV1::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscriptionStartV1::~SubscriptionStartV1() {
  SharedDtor();
}

void SubscriptionStartV1::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void SubscriptionStartV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscriptionStartV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriptionStartV1_descriptor_;
}

const SubscriptionStartV1& SubscriptionStartV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();  return *default_instance_;
}

SubscriptionStartV1* SubscriptionStartV1::default_instance_ = NULL;

SubscriptionStartV1* SubscriptionStartV1::New() const {
  return new SubscriptionStartV1;
}

void SubscriptionStartV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscriptionStartV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscriptionStartV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscriptionStartV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscriptionStartV1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscriptionStartV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscriptionStartV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscriptionStartV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscriptionStartV1::MergeFrom(const SubscriptionStartV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscriptionStartV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionStartV1::CopyFrom(const SubscriptionStartV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionStartV1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SubscriptionStartV1::Swap(SubscriptionStartV1* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscriptionStartV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscriptionStartV1_descriptor_;
  metadata.reflection = SubscriptionStartV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WriteAckV1::kEnvelopesWrittenFieldNumber;
#endif  // !_MSC_VER

WriteAckV1::WriteAckV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WriteAckV1::InitAsDefaultInstance() {
}

WriteAckV1::WriteAckV1(const WriteAckV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WriteAckV1::SharedCtor() {
  _cached_size_ = 0;
  envelopes_written_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteAckV1::~WriteAckV1() {
  SharedDtor();
}

void WriteAckV1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WriteAckV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteAckV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteAckV1_descriptor_;
}

const WriteAckV1& WriteAckV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();  return *default_instance_;
}

WriteAckV1* WriteAckV1::default_instance_ = NULL;

WriteAckV1* WriteAckV1::New() const {
  return new WriteAckV1;
}

void WriteAckV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    envelopes_written_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteAckV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 envelopes_written = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &envelopes_written_)));
          set_has_envelopes_written();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WriteAckV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 envelopes_written = 1;
  if (has_envelopes_written()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->envelopes_written(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WriteAckV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 envelopes_written = 1;
  if (has_envelopes_written()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->envelopes_written(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WriteAckV1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 envelopes_written = 1;
    if (has_envelopes_written()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->envelopes_written());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteAckV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteAckV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteAckV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteAckV1::MergeFrom(const WriteAckV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_envelopes_written()) {
      set_envelopes_written(from.envelopes_written());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteAckV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteAckV1::CopyFrom(const WriteAckV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteAckV1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void WriteAckV1::Swap(WriteAckV1* other) {
  if (other != this) {
    std::swap(envelopes_written_, other->envelopes_written_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteAckV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteAckV1_descriptor_;
  metadata.reflection = WriteAckV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PluginRegisterAckV1::kNameFieldNumber;
#endif  // !_MSC_VER

PluginRegisterAckV1::PluginRegisterAckV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PluginRegisterAckV1::InitAsDefaultInstance() {
}

PluginRegisterAckV1::PluginRegisterAckV1(const PluginRegisterAckV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PluginRegisterAckV1::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PluginRegisterAckV1::~PluginRegisterAckV1() {
  SharedDtor();
}

void PluginRegisterAckV1::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PluginRegisterAckV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PluginRegisterAckV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PluginRegisterAckV1_descriptor_;
}

const PluginRegisterAckV1& PluginRegisterAckV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();  return *default_instance_;
}

PluginRegisterAckV1* PluginRegisterAckV1::default_instance_ = NULL;

PluginRegisterAckV1* PluginRegisterAckV1::New() const {
  return new PluginRegisterAckV1;
}

void PluginRegisterAckV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PluginRegisterAckV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PluginRegisterAckV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PluginRegisterAckV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PluginRegisterAckV1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PluginRegisterAckV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PluginRegisterAckV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PluginRegisterAckV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PluginRegisterAckV1::MergeFrom(const PluginRegisterAckV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PluginRegisterAckV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginRegisterAckV1::CopyFrom(const PluginRegisterAckV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginRegisterAckV1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PluginRegisterAckV1::Swap(PluginRegisterAckV1* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PluginRegisterAckV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PluginRegisterAckV1_descriptor_;
  metadata.reflection = PluginRegisterAckV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PluginUnregisterAckV1::kNameFieldNumber;
#endif  // !_MSC_VER

PluginUnregisterAckV1::PluginUnregisterAckV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PluginUnregisterAckV1::InitAsDefaultInstance() {
}

PluginUnregisterAckV1::PluginUnregisterAckV1(const PluginUnregisterAckV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PluginUnregisterAckV1::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PluginUnregisterAckV1::~PluginUnregisterAckV1() {
  SharedDtor();
}

void PluginUnregisterAckV1::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PluginUnregisterAckV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PluginUnregisterAckV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PluginUnregisterAckV1_descriptor_;
}

const PluginUnregisterAckV1& PluginUnregisterAckV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();  return *default_instance_;
}

PluginUnregisterAckV1* PluginUnregisterAckV1::default_instance_ = NULL;

PluginUnregisterAckV1* PluginUnregisterAckV1::New() const {
  return new PluginUnregisterAckV1;
}

void PluginUnregisterAckV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PluginUnregisterAckV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PluginUnregisterAckV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PluginUnregisterAckV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PluginUnregisterAckV1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PluginUnregisterAckV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PluginUnregisterAckV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PluginUnregisterAckV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PluginUnregisterAckV1::MergeFrom(const PluginUnregisterAckV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PluginUnregisterAckV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginUnregisterAckV1::CopyFrom(const PluginUnregisterAckV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginUnregisterAckV1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PluginUnregisterAckV1::Swap(PluginUnregisterAckV1* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PluginUnregisterAckV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PluginUnregisterAckV1_descriptor_;
  metadata.reflection = PluginUnregisterAckV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PluginStatusV1::kStateFieldNumber;
#endif  // !_MSC_VER

PluginStatusV1::PluginStatusV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PluginStatusV1::InitAsDefaultInstance() {
}

PluginStatusV1::PluginStatusV1(const PluginStatusV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PluginStatusV1::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PluginStatusV1::~PluginStatusV1() {
  SharedDtor();
}

void PluginStatusV1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PluginStatusV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PluginStatusV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PluginStatusV1_descriptor_;
}

const PluginStatusV1& PluginStatusV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();  return *default_instance_;
}

PluginStatusV1* PluginStatusV1::default_instance_ = NULL;

PluginStatusV1* PluginStatusV1::New() const {
  return new PluginStatusV1;
}

void PluginStatusV1::Clear() {
  state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PluginStatusV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zippylog.protocol.PluginStateV1 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_state;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PluginStatusV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .zippylog.protocol.PluginStateV1 state = 1;
  for (int i = 0; i < this->state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PluginStatusV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .zippylog.protocol.PluginStateV1 state = 1;
  for (int i = 0; i < this->state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PluginStatusV1::ByteSize() const {
  int total_size = 0;
  
  // repeated .zippylog.protocol.PluginStateV1 state = 1;
  total_size += 1 * this->state_size();
  for (int i = 0; i < this->state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->state(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PluginStatusV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PluginStatusV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PluginStatusV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PluginStatusV1::MergeFrom(const PluginStatusV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  state_.MergeFrom(from.state_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PluginStatusV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginStatusV1::CopyFrom(const PluginStatusV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginStatusV1::IsInitialized() const {
  
  for (int i = 0; i < state_size(); i++) {
    if (!this->state(i).IsInitialized()) return false;
  }
  return true;
}

void PluginStatusV1::Swap(PluginStatusV1* other) {
  if (other != this) {
    state_.Swap(&other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PluginStatusV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PluginStatusV1_descriptor_;
  metadata.reflection = PluginStatusV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Error::kCodeFieldNumber;
const int Error::kMsgFieldNumber;
#endif  // !_MSC_VER

Error::Error()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Error::SharedCtor() {
  _cached_size_ = 0;
  code_ = 1;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  SharedDtor();
}

void Error::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fprotocol_2fresponse_2eproto();  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New() const {
  return new Error;
}

void Error::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 1;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zippylog.protocol.response.ErrorCode code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (zippylog::protocol::response::ErrorCode_IsValid(value)) {
            set_code(static_cast< zippylog::protocol::response::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .zippylog.protocol.response.ErrorCode code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .zippylog.protocol.response.ErrorCode code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .zippylog.protocol.response.ErrorCode code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }
    
    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  
  return true;
}

void Error::Swap(Error* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}



bool PongV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool PongV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool FeatureSpecificationV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool FeatureSpecificationV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StreamSegmentStartV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StreamSegmentStartV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StreamSegmentEndV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StreamSegmentEndV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool SubscriptionAcceptAckV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool SubscriptionAcceptAckV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool SubscriptionKeepaliveAckV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool SubscriptionKeepaliveAckV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool SubscriptionStartV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool SubscriptionStartV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool WriteAckV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool WriteAckV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool PluginRegisterAckV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool PluginRegisterAckV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool PluginUnregisterAckV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool PluginUnregisterAckV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool PluginStatusV1::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool PluginStatusV1::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool Error::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool Error::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}
// @@protoc_insertion_point(namespace_scope)

}  // namespace response
}  // namespace protocol
}  // namespace zippylog

// @@protoc_insertion_point(global_scope)
