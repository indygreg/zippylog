// Generated by the lua-protobuf compiler
// You shouldn't edit this file manually
//
// source proto file: zippylog/protocol/response.proto

#include "zippylog/protocol/response.pb-lua.h"

#ifdef __cplusplus
extern "C" { // make sure functions treated with C naming
#endif

#include <lauxlib.h>

#ifdef __cplusplus
}
#endif

#include <string>

// this represents Lua udata for a protocol buffer message
// we record where a message came from so we can GC it properly
typedef struct msg_udata { // confuse over-simplified pretty-printer
    ::google::protobuf::Message * msg;
    bool lua_owns;
    lua_protobuf_gc_callback gc_callback;
    void * callback_data;
} msg_udata;

using ::std::string;

int lua_protobuf_zippylog_protocol_response_open(lua_State *L)
{
    const char *table = luaL_findtable(L, LUA_GLOBALSINDEX, "protobuf.zippylog.protocol.response", 1);
    if (table) {
        return luaL_error(L, "could not create parent Lua tables");
    }
    if (!lua_istable(L, -1)) {
        lua_newtable(L);
        lua_setfield(L, -2, "zippylog.protocol.response");
    }
    // ErrorCode enum
    lua_newtable(L); // proxy table
    lua_newtable(L); // main table
    lua_pushnumber(L, 1);
    lua_setfield(L, -2, "ENVELOPE_PARSE_FAILURE");
    lua_pushnumber(L, 2);
    lua_setfield(L, -2, "INVALID_MESSAGE_NAMESPACE");
    lua_pushnumber(L, 3);
    lua_setfield(L, -2, "UNKNOWN_REQUEST_TYPE");
    lua_pushnumber(L, 4);
    lua_setfield(L, -2, "EMPTY_ENVELOPE");
    lua_pushnumber(L, 5);
    lua_setfield(L, -2, "MISSING_ENUMERATIONS");
    lua_pushnumber(L, 6);
    lua_setfield(L, -2, "REQUEST_NOT_IMPLEMENTED");
    lua_pushnumber(L, 7);
    lua_setfield(L, -2, "EMPTY_FIELD");
    lua_pushnumber(L, 8);
    lua_setfield(L, -2, "FIELD_LENGTHS_DIFFERENT");
    lua_pushnumber(L, 9);
    lua_setfield(L, -2, "INVALID_STREAM_OFFSET");
    lua_pushnumber(L, 10);
    lua_setfield(L, -2, "INVALID_OFFSET");
    lua_pushnumber(L, 11);
    lua_setfield(L, -2, "PATH_NOT_FOUND");
    lua_pushnumber(L, 12);
    lua_setfield(L, -2, "LIMIT_EXCEEDED");
    lua_pushnumber(L, 13);
    lua_setfield(L, -2, "UNKNOWN_MESSAGE_FORMAT_VERSION");
    lua_pushnumber(L, 14);
    lua_setfield(L, -2, "INVALID_PATH");
    lua_pushnumber(L, 15);
    lua_setfield(L, -2, "UNSUPPORTED_OPERATION_MESSAGE_VERSION");
    lua_pushnumber(L, 16);
    lua_setfield(L, -2, "EMPTY_MESSAGE");
    lua_pushnumber(L, 17);
    lua_setfield(L, -2, "PROTOCOL_NO_ENVELOPE");
    lua_pushnumber(L, 18);
    lua_setfield(L, -2, "GENERAL_ERROR_PROCESSING");
    // define metatable on main table
    lua_newtable(L);
    lua_pushcfunction(L, lua_protobuf_enum_index);
    lua_setfield(L, -2, "__index");
    lua_setmetatable(L, -2);
    
    // define metatable on proxy table
    lua_newtable(L);
    lua_pushvalue(L, -2);
    lua_setfield(L, -2, "__index");
    lua_pushcfunction(L, lua_protobuf_enum_newindex);
    lua_setfield(L, -2, "__newindex");
    lua_remove(L, -2);
    lua_setmetatable(L, -2);
    lua_setfield(L, -2, "ErrorCode");
    // end ErrorCode enum
    lua_pop(L, 1);
    luaL_Reg funcs [] = { { NULL, NULL } };
    luaL_register(L, "protobuf.zippylog.protocol.response", funcs);
    lua_protobuf_zippylog_protocol_response_Pong_open(L);
    lua_protobuf_zippylog_protocol_response_FeatureSpecification_open(L);
    lua_protobuf_zippylog_protocol_response_StreamSegmentStart_open(L);
    lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_open(L);
    lua_protobuf_zippylog_protocol_response_SubscribeAck_open(L);
    lua_protobuf_zippylog_protocol_response_SubscriptionStart_open(L);
    lua_protobuf_zippylog_protocol_response_WriteAck_open(L);
    lua_protobuf_zippylog_protocol_response_Error_open(L);
    return 1;
}


static const struct luaL_Reg Pong_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_response_Pong_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_response_Pong_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg Pong_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_response_Pong_serialized},
    {"clear", lua_protobuf_zippylog_protocol_response_Pong_clear},
    {"__gc", lua_protobuf_zippylog_protocol_response_Pong_gc},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_response_Pong_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.response.Pong");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, Pong_methods);
    luaL_register(L, "protobuf.zippylog.protocol.response.Pong", Pong_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_response_Pong_pushcopy(lua_State *L, const ::zippylog::protocol::response::Pong &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::Pong(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.Pong");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_response_Pong_pushreference(lua_State *L, ::zippylog::protocol::response::Pong *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.Pong");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_response_Pong_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::Pong();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.Pong");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_Pong_parsefromstring(lua_State *L)
{
    assert(0);
    return 1;
}
int lua_protobuf_zippylog_protocol_response_Pong_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Pong");
    ::zippylog::protocol::response::Pong *m = (::zippylog::protocol::response::Pong *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_response_Pong_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Pong");
    ::zippylog::protocol::response::Pong *m = (::zippylog::protocol::response::Pong *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_response_Pong_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Pong");
    ::zippylog::protocol::response::Pong *m = (::zippylog::protocol::response::Pong *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
static const struct luaL_Reg FeatureSpecification_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_response_FeatureSpecification_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_response_FeatureSpecification_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg FeatureSpecification_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_response_FeatureSpecification_serialized},
    {"clear", lua_protobuf_zippylog_protocol_response_FeatureSpecification_clear},
    {"__gc", lua_protobuf_zippylog_protocol_response_FeatureSpecification_gc},
    {"clear_supported_message_version", lua_protobuf_zippylog_protocol_response_FeatureSpecification_clear_supported_message_version},
    {"get_supported_message_version", lua_protobuf_zippylog_protocol_response_FeatureSpecification_get_supported_message_version},
    {"set_supported_message_version", lua_protobuf_zippylog_protocol_response_FeatureSpecification_set_supported_message_version},
    {"size_supported_message_version", lua_protobuf_zippylog_protocol_response_FeatureSpecification_size_supported_message_version},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_response_FeatureSpecification_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.response.FeatureSpecification");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, FeatureSpecification_methods);
    luaL_register(L, "protobuf.zippylog.protocol.response.FeatureSpecification", FeatureSpecification_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_response_FeatureSpecification_pushcopy(lua_State *L, const ::zippylog::protocol::response::FeatureSpecification &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::FeatureSpecification(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.FeatureSpecification");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_response_FeatureSpecification_pushreference(lua_State *L, ::zippylog::protocol::response::FeatureSpecification *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.FeatureSpecification");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_response_FeatureSpecification_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::FeatureSpecification();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.FeatureSpecification");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecification_parsefromstring(lua_State *L)
{
    assert(0);
    return 1;
}
int lua_protobuf_zippylog_protocol_response_FeatureSpecification_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecification");
    ::zippylog::protocol::response::FeatureSpecification *m = (::zippylog::protocol::response::FeatureSpecification *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_response_FeatureSpecification_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecification");
    ::zippylog::protocol::response::FeatureSpecification *m = (::zippylog::protocol::response::FeatureSpecification *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_response_FeatureSpecification_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecification");
    ::zippylog::protocol::response::FeatureSpecification *m = (::zippylog::protocol::response::FeatureSpecification *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_response_FeatureSpecification_clear_supported_message_version(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecification");
    ::zippylog::protocol::response::FeatureSpecification *m = (::zippylog::protocol::response::FeatureSpecification *)mud->msg;
    m->clear_supported_message_version();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecification_get_supported_message_version(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecification");
    ::zippylog::protocol::response::FeatureSpecification *m = (::zippylog::protocol::response::FeatureSpecification *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->supported_message_version_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->supported_message_version_size());
    }
    lua_pushinteger(L, m->supported_message_version(index-1));
    return 1;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecification_set_supported_message_version(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecification");
    ::zippylog::protocol::response::FeatureSpecification *m = (::zippylog::protocol::response::FeatureSpecification *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    size_t current_size = m->supported_message_version_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    lua_Integer i = lua_tointeger(L, 3);
    if (index == current_size + 1) {
        m->add_supported_message_version(i);
    }
    else {
        m->set_supported_message_version(index-1, i);
    }
    return 0;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecification_size_supported_message_version(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecification");
    ::zippylog::protocol::response::FeatureSpecification *m = (::zippylog::protocol::response::FeatureSpecification *)mud->msg;
    int size = m->supported_message_version_size();
    lua_pushinteger(L, size);
    return 1;
}

static const struct luaL_Reg StreamSegmentStart_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_response_StreamSegmentStart_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_response_StreamSegmentStart_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StreamSegmentStart_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_response_StreamSegmentStart_serialized},
    {"clear", lua_protobuf_zippylog_protocol_response_StreamSegmentStart_clear},
    {"__gc", lua_protobuf_zippylog_protocol_response_StreamSegmentStart_gc},
    {"clear_path", lua_protobuf_zippylog_protocol_response_StreamSegmentStart_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_response_StreamSegmentStart_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_response_StreamSegmentStart_set_path},
    {"has_path", lua_protobuf_zippylog_protocol_response_StreamSegmentStart_has_path},
    {"clear_offset", lua_protobuf_zippylog_protocol_response_StreamSegmentStart_clear_offset},
    {"get_offset", lua_protobuf_zippylog_protocol_response_StreamSegmentStart_get_offset},
    {"set_offset", lua_protobuf_zippylog_protocol_response_StreamSegmentStart_set_offset},
    {"has_offset", lua_protobuf_zippylog_protocol_response_StreamSegmentStart_has_offset},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_response_StreamSegmentStart_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.response.StreamSegmentStart");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StreamSegmentStart_methods);
    luaL_register(L, "protobuf.zippylog.protocol.response.StreamSegmentStart", StreamSegmentStart_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_response_StreamSegmentStart_pushcopy(lua_State *L, const ::zippylog::protocol::response::StreamSegmentStart &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::StreamSegmentStart(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.StreamSegmentStart");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_response_StreamSegmentStart_pushreference(lua_State *L, ::zippylog::protocol::response::StreamSegmentStart *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.StreamSegmentStart");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_response_StreamSegmentStart_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::StreamSegmentStart();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.StreamSegmentStart");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentStart_parsefromstring(lua_State *L)
{
    assert(0);
    return 1;
}
int lua_protobuf_zippylog_protocol_response_StreamSegmentStart_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentStart");
    ::zippylog::protocol::response::StreamSegmentStart *m = (::zippylog::protocol::response::StreamSegmentStart *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_response_StreamSegmentStart_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentStart");
    ::zippylog::protocol::response::StreamSegmentStart *m = (::zippylog::protocol::response::StreamSegmentStart *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_response_StreamSegmentStart_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentStart");
    ::zippylog::protocol::response::StreamSegmentStart *m = (::zippylog::protocol::response::StreamSegmentStart *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_response_StreamSegmentStart_clear_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentStart");
    ::zippylog::protocol::response::StreamSegmentStart *m = (::zippylog::protocol::response::StreamSegmentStart *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentStart_get_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentStart");
    ::zippylog::protocol::response::StreamSegmentStart *m = (::zippylog::protocol::response::StreamSegmentStart *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentStart_set_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentStart");
    ::zippylog::protocol::response::StreamSegmentStart *m = (::zippylog::protocol::response::StreamSegmentStart *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentStart_has_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentStart");
    ::zippylog::protocol::response::StreamSegmentStart *m = (::zippylog::protocol::response::StreamSegmentStart *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentStart_clear_offset(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentStart");
    ::zippylog::protocol::response::StreamSegmentStart *m = (::zippylog::protocol::response::StreamSegmentStart *)mud->msg;
    m->clear_offset();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentStart_get_offset(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentStart");
    ::zippylog::protocol::response::StreamSegmentStart *m = (::zippylog::protocol::response::StreamSegmentStart *)mud->msg;
    m->has_offset() ? lua_pushinteger(L, m->offset()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentStart_set_offset(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentStart");
    ::zippylog::protocol::response::StreamSegmentStart *m = (::zippylog::protocol::response::StreamSegmentStart *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_offset();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_offset(i);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentStart_has_offset(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentStart");
    ::zippylog::protocol::response::StreamSegmentStart *m = (::zippylog::protocol::response::StreamSegmentStart *)mud->msg;
    lua_pushboolean(L, m->has_offset());
    return 1;
}

static const struct luaL_Reg StreamSegmentEnd_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StreamSegmentEnd_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_serialized},
    {"clear", lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_clear},
    {"__gc", lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_gc},
    {"clear_offset", lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_clear_offset},
    {"get_offset", lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_get_offset},
    {"set_offset", lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_set_offset},
    {"has_offset", lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_has_offset},
    {"clear_bytes_sent", lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_clear_bytes_sent},
    {"get_bytes_sent", lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_get_bytes_sent},
    {"set_bytes_sent", lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_set_bytes_sent},
    {"has_bytes_sent", lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_has_bytes_sent},
    {"clear_envelopes_sent", lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_clear_envelopes_sent},
    {"get_envelopes_sent", lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_get_envelopes_sent},
    {"set_envelopes_sent", lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_set_envelopes_sent},
    {"has_envelopes_sent", lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_has_envelopes_sent},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.response.StreamSegmentEnd");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StreamSegmentEnd_methods);
    luaL_register(L, "protobuf.zippylog.protocol.response.StreamSegmentEnd", StreamSegmentEnd_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_pushcopy(lua_State *L, const ::zippylog::protocol::response::StreamSegmentEnd &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::StreamSegmentEnd(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.StreamSegmentEnd");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_pushreference(lua_State *L, ::zippylog::protocol::response::StreamSegmentEnd *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.StreamSegmentEnd");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::StreamSegmentEnd();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.StreamSegmentEnd");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_parsefromstring(lua_State *L)
{
    assert(0);
    return 1;
}
int lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEnd");
    ::zippylog::protocol::response::StreamSegmentEnd *m = (::zippylog::protocol::response::StreamSegmentEnd *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEnd");
    ::zippylog::protocol::response::StreamSegmentEnd *m = (::zippylog::protocol::response::StreamSegmentEnd *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEnd");
    ::zippylog::protocol::response::StreamSegmentEnd *m = (::zippylog::protocol::response::StreamSegmentEnd *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_clear_offset(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEnd");
    ::zippylog::protocol::response::StreamSegmentEnd *m = (::zippylog::protocol::response::StreamSegmentEnd *)mud->msg;
    m->clear_offset();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_get_offset(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEnd");
    ::zippylog::protocol::response::StreamSegmentEnd *m = (::zippylog::protocol::response::StreamSegmentEnd *)mud->msg;
    m->has_offset() ? lua_pushinteger(L, m->offset()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_set_offset(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEnd");
    ::zippylog::protocol::response::StreamSegmentEnd *m = (::zippylog::protocol::response::StreamSegmentEnd *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_offset();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_offset(i);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_has_offset(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEnd");
    ::zippylog::protocol::response::StreamSegmentEnd *m = (::zippylog::protocol::response::StreamSegmentEnd *)mud->msg;
    lua_pushboolean(L, m->has_offset());
    return 1;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_clear_bytes_sent(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEnd");
    ::zippylog::protocol::response::StreamSegmentEnd *m = (::zippylog::protocol::response::StreamSegmentEnd *)mud->msg;
    m->clear_bytes_sent();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_get_bytes_sent(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEnd");
    ::zippylog::protocol::response::StreamSegmentEnd *m = (::zippylog::protocol::response::StreamSegmentEnd *)mud->msg;
    m->has_bytes_sent() ? lua_pushinteger(L, m->bytes_sent()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_set_bytes_sent(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEnd");
    ::zippylog::protocol::response::StreamSegmentEnd *m = (::zippylog::protocol::response::StreamSegmentEnd *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_bytes_sent();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_bytes_sent(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_has_bytes_sent(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEnd");
    ::zippylog::protocol::response::StreamSegmentEnd *m = (::zippylog::protocol::response::StreamSegmentEnd *)mud->msg;
    lua_pushboolean(L, m->has_bytes_sent());
    return 1;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_clear_envelopes_sent(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEnd");
    ::zippylog::protocol::response::StreamSegmentEnd *m = (::zippylog::protocol::response::StreamSegmentEnd *)mud->msg;
    m->clear_envelopes_sent();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_get_envelopes_sent(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEnd");
    ::zippylog::protocol::response::StreamSegmentEnd *m = (::zippylog::protocol::response::StreamSegmentEnd *)mud->msg;
    m->has_envelopes_sent() ? lua_pushinteger(L, m->envelopes_sent()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_set_envelopes_sent(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEnd");
    ::zippylog::protocol::response::StreamSegmentEnd *m = (::zippylog::protocol::response::StreamSegmentEnd *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_envelopes_sent();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_envelopes_sent(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEnd_has_envelopes_sent(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEnd");
    ::zippylog::protocol::response::StreamSegmentEnd *m = (::zippylog::protocol::response::StreamSegmentEnd *)mud->msg;
    lua_pushboolean(L, m->has_envelopes_sent());
    return 1;
}

static const struct luaL_Reg SubscribeAck_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_response_SubscribeAck_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_response_SubscribeAck_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg SubscribeAck_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_response_SubscribeAck_serialized},
    {"clear", lua_protobuf_zippylog_protocol_response_SubscribeAck_clear},
    {"__gc", lua_protobuf_zippylog_protocol_response_SubscribeAck_gc},
    {"clear_id", lua_protobuf_zippylog_protocol_response_SubscribeAck_clear_id},
    {"get_id", lua_protobuf_zippylog_protocol_response_SubscribeAck_get_id},
    {"set_id", lua_protobuf_zippylog_protocol_response_SubscribeAck_set_id},
    {"has_id", lua_protobuf_zippylog_protocol_response_SubscribeAck_has_id},
    {"clear_ttl", lua_protobuf_zippylog_protocol_response_SubscribeAck_clear_ttl},
    {"get_ttl", lua_protobuf_zippylog_protocol_response_SubscribeAck_get_ttl},
    {"set_ttl", lua_protobuf_zippylog_protocol_response_SubscribeAck_set_ttl},
    {"has_ttl", lua_protobuf_zippylog_protocol_response_SubscribeAck_has_ttl},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_response_SubscribeAck_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.response.SubscribeAck");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, SubscribeAck_methods);
    luaL_register(L, "protobuf.zippylog.protocol.response.SubscribeAck", SubscribeAck_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_response_SubscribeAck_pushcopy(lua_State *L, const ::zippylog::protocol::response::SubscribeAck &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::SubscribeAck(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.SubscribeAck");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_response_SubscribeAck_pushreference(lua_State *L, ::zippylog::protocol::response::SubscribeAck *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.SubscribeAck");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_response_SubscribeAck_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::SubscribeAck();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.SubscribeAck");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_SubscribeAck_parsefromstring(lua_State *L)
{
    assert(0);
    return 1;
}
int lua_protobuf_zippylog_protocol_response_SubscribeAck_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscribeAck");
    ::zippylog::protocol::response::SubscribeAck *m = (::zippylog::protocol::response::SubscribeAck *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_response_SubscribeAck_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscribeAck");
    ::zippylog::protocol::response::SubscribeAck *m = (::zippylog::protocol::response::SubscribeAck *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_response_SubscribeAck_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscribeAck");
    ::zippylog::protocol::response::SubscribeAck *m = (::zippylog::protocol::response::SubscribeAck *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_response_SubscribeAck_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscribeAck");
    ::zippylog::protocol::response::SubscribeAck *m = (::zippylog::protocol::response::SubscribeAck *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_SubscribeAck_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscribeAck");
    ::zippylog::protocol::response::SubscribeAck *m = (::zippylog::protocol::response::SubscribeAck *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_SubscribeAck_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscribeAck");
    ::zippylog::protocol::response::SubscribeAck *m = (::zippylog::protocol::response::SubscribeAck *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_SubscribeAck_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscribeAck");
    ::zippylog::protocol::response::SubscribeAck *m = (::zippylog::protocol::response::SubscribeAck *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

int lua_protobuf_zippylog_protocol_response_SubscribeAck_clear_ttl(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscribeAck");
    ::zippylog::protocol::response::SubscribeAck *m = (::zippylog::protocol::response::SubscribeAck *)mud->msg;
    m->clear_ttl();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_SubscribeAck_get_ttl(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscribeAck");
    ::zippylog::protocol::response::SubscribeAck *m = (::zippylog::protocol::response::SubscribeAck *)mud->msg;
    m->has_ttl() ? lua_pushinteger(L, m->ttl()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_SubscribeAck_set_ttl(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscribeAck");
    ::zippylog::protocol::response::SubscribeAck *m = (::zippylog::protocol::response::SubscribeAck *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_ttl();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_ttl(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_SubscribeAck_has_ttl(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscribeAck");
    ::zippylog::protocol::response::SubscribeAck *m = (::zippylog::protocol::response::SubscribeAck *)mud->msg;
    lua_pushboolean(L, m->has_ttl());
    return 1;
}

static const struct luaL_Reg SubscriptionStart_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_response_SubscriptionStart_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_response_SubscriptionStart_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg SubscriptionStart_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_response_SubscriptionStart_serialized},
    {"clear", lua_protobuf_zippylog_protocol_response_SubscriptionStart_clear},
    {"__gc", lua_protobuf_zippylog_protocol_response_SubscriptionStart_gc},
    {"clear_id", lua_protobuf_zippylog_protocol_response_SubscriptionStart_clear_id},
    {"get_id", lua_protobuf_zippylog_protocol_response_SubscriptionStart_get_id},
    {"set_id", lua_protobuf_zippylog_protocol_response_SubscriptionStart_set_id},
    {"has_id", lua_protobuf_zippylog_protocol_response_SubscriptionStart_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_response_SubscriptionStart_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.response.SubscriptionStart");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, SubscriptionStart_methods);
    luaL_register(L, "protobuf.zippylog.protocol.response.SubscriptionStart", SubscriptionStart_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_response_SubscriptionStart_pushcopy(lua_State *L, const ::zippylog::protocol::response::SubscriptionStart &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::SubscriptionStart(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.SubscriptionStart");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_response_SubscriptionStart_pushreference(lua_State *L, ::zippylog::protocol::response::SubscriptionStart *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.SubscriptionStart");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_response_SubscriptionStart_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::SubscriptionStart();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.SubscriptionStart");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_SubscriptionStart_parsefromstring(lua_State *L)
{
    assert(0);
    return 1;
}
int lua_protobuf_zippylog_protocol_response_SubscriptionStart_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscriptionStart");
    ::zippylog::protocol::response::SubscriptionStart *m = (::zippylog::protocol::response::SubscriptionStart *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_response_SubscriptionStart_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscriptionStart");
    ::zippylog::protocol::response::SubscriptionStart *m = (::zippylog::protocol::response::SubscriptionStart *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_response_SubscriptionStart_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscriptionStart");
    ::zippylog::protocol::response::SubscriptionStart *m = (::zippylog::protocol::response::SubscriptionStart *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_response_SubscriptionStart_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscriptionStart");
    ::zippylog::protocol::response::SubscriptionStart *m = (::zippylog::protocol::response::SubscriptionStart *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_SubscriptionStart_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscriptionStart");
    ::zippylog::protocol::response::SubscriptionStart *m = (::zippylog::protocol::response::SubscriptionStart *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_SubscriptionStart_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscriptionStart");
    ::zippylog::protocol::response::SubscriptionStart *m = (::zippylog::protocol::response::SubscriptionStart *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_SubscriptionStart_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscriptionStart");
    ::zippylog::protocol::response::SubscriptionStart *m = (::zippylog::protocol::response::SubscriptionStart *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg WriteAck_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_response_WriteAck_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_response_WriteAck_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg WriteAck_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_response_WriteAck_serialized},
    {"clear", lua_protobuf_zippylog_protocol_response_WriteAck_clear},
    {"__gc", lua_protobuf_zippylog_protocol_response_WriteAck_gc},
    {"clear_envelopes_written", lua_protobuf_zippylog_protocol_response_WriteAck_clear_envelopes_written},
    {"get_envelopes_written", lua_protobuf_zippylog_protocol_response_WriteAck_get_envelopes_written},
    {"set_envelopes_written", lua_protobuf_zippylog_protocol_response_WriteAck_set_envelopes_written},
    {"has_envelopes_written", lua_protobuf_zippylog_protocol_response_WriteAck_has_envelopes_written},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_response_WriteAck_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.response.WriteAck");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, WriteAck_methods);
    luaL_register(L, "protobuf.zippylog.protocol.response.WriteAck", WriteAck_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_response_WriteAck_pushcopy(lua_State *L, const ::zippylog::protocol::response::WriteAck &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::WriteAck(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.WriteAck");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_response_WriteAck_pushreference(lua_State *L, ::zippylog::protocol::response::WriteAck *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.WriteAck");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_response_WriteAck_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::WriteAck();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.WriteAck");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_WriteAck_parsefromstring(lua_State *L)
{
    assert(0);
    return 1;
}
int lua_protobuf_zippylog_protocol_response_WriteAck_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.WriteAck");
    ::zippylog::protocol::response::WriteAck *m = (::zippylog::protocol::response::WriteAck *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_response_WriteAck_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.WriteAck");
    ::zippylog::protocol::response::WriteAck *m = (::zippylog::protocol::response::WriteAck *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_response_WriteAck_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.WriteAck");
    ::zippylog::protocol::response::WriteAck *m = (::zippylog::protocol::response::WriteAck *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_response_WriteAck_clear_envelopes_written(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.WriteAck");
    ::zippylog::protocol::response::WriteAck *m = (::zippylog::protocol::response::WriteAck *)mud->msg;
    m->clear_envelopes_written();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_WriteAck_get_envelopes_written(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.WriteAck");
    ::zippylog::protocol::response::WriteAck *m = (::zippylog::protocol::response::WriteAck *)mud->msg;
    m->has_envelopes_written() ? lua_pushinteger(L, m->envelopes_written()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_WriteAck_set_envelopes_written(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.WriteAck");
    ::zippylog::protocol::response::WriteAck *m = (::zippylog::protocol::response::WriteAck *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_envelopes_written();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_envelopes_written(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_WriteAck_has_envelopes_written(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.WriteAck");
    ::zippylog::protocol::response::WriteAck *m = (::zippylog::protocol::response::WriteAck *)mud->msg;
    lua_pushboolean(L, m->has_envelopes_written());
    return 1;
}

static const struct luaL_Reg Error_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_response_Error_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_response_Error_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg Error_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_response_Error_serialized},
    {"clear", lua_protobuf_zippylog_protocol_response_Error_clear},
    {"__gc", lua_protobuf_zippylog_protocol_response_Error_gc},
    {"clear_code", lua_protobuf_zippylog_protocol_response_Error_clear_code},
    {"get_code", lua_protobuf_zippylog_protocol_response_Error_get_code},
    {"set_code", lua_protobuf_zippylog_protocol_response_Error_set_code},
    {"has_code", lua_protobuf_zippylog_protocol_response_Error_has_code},
    {"clear_msg", lua_protobuf_zippylog_protocol_response_Error_clear_msg},
    {"get_msg", lua_protobuf_zippylog_protocol_response_Error_get_msg},
    {"set_msg", lua_protobuf_zippylog_protocol_response_Error_set_msg},
    {"has_msg", lua_protobuf_zippylog_protocol_response_Error_has_msg},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_response_Error_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.response.Error");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, Error_methods);
    luaL_register(L, "protobuf.zippylog.protocol.response.Error", Error_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_response_Error_pushcopy(lua_State *L, const ::zippylog::protocol::response::Error &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::Error(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.Error");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_response_Error_pushreference(lua_State *L, ::zippylog::protocol::response::Error *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.Error");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_response_Error_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::Error();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.Error");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_Error_parsefromstring(lua_State *L)
{
    assert(0);
    return 1;
}
int lua_protobuf_zippylog_protocol_response_Error_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Error");
    ::zippylog::protocol::response::Error *m = (::zippylog::protocol::response::Error *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_response_Error_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Error");
    ::zippylog::protocol::response::Error *m = (::zippylog::protocol::response::Error *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_response_Error_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Error");
    ::zippylog::protocol::response::Error *m = (::zippylog::protocol::response::Error *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_response_Error_clear_code(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Error");
    ::zippylog::protocol::response::Error *m = (::zippylog::protocol::response::Error *)mud->msg;
    m->clear_code();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_Error_get_code(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Error");
    ::zippylog::protocol::response::Error *m = (::zippylog::protocol::response::Error *)mud->msg;
    m->has_code() ? lua_pushinteger(L, m->code()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_Error_set_code(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Error");
    ::zippylog::protocol::response::Error *m = (::zippylog::protocol::response::Error *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_code();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_code((::zippylog::protocol::response::ErrorCode)i);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_Error_has_code(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Error");
    ::zippylog::protocol::response::Error *m = (::zippylog::protocol::response::Error *)mud->msg;
    lua_pushboolean(L, m->has_code());
    return 1;
}

int lua_protobuf_zippylog_protocol_response_Error_clear_msg(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Error");
    ::zippylog::protocol::response::Error *m = (::zippylog::protocol::response::Error *)mud->msg;
    m->clear_msg();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_Error_get_msg(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Error");
    ::zippylog::protocol::response::Error *m = (::zippylog::protocol::response::Error *)mud->msg;
    string s = m->msg();
    m->has_msg() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_Error_set_msg(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Error");
    ::zippylog::protocol::response::Error *m = (::zippylog::protocol::response::Error *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_msg();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_msg(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_Error_has_msg(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Error");
    ::zippylog::protocol::response::Error *m = (::zippylog::protocol::response::Error *)mud->msg;
    lua_pushboolean(L, m->has_msg());
    return 1;
}
