// Generated by the lua-protobuf compiler
// You shouldn't edit this file manually
//
// source proto file: zippylog/protocol/response.proto

#include "zippylog/protocol/response.pb-lua.h"

#ifdef __cplusplus
extern "C" { // make sure functions treated with C naming
#endif

#include <lauxlib.h>

#ifdef __cplusplus
}
#endif

#include <string>

// this represents Lua udata for a protocol buffer message
// we record where a message came from so we can GC it properly
typedef struct msg_udata { // confuse over-simplified pretty-printer
    ::google::protobuf::Message * msg;
    bool lua_owns;
    lua_protobuf_gc_callback gc_callback;
    void * callback_data;
} msg_udata;

using ::std::string;

int lua_protobuf_zippylog_protocol_response_open(lua_State *L)
{
    const char *table = luaL_findtable(L, LUA_GLOBALSINDEX, "protobuf.zippylog.protocol.response", 1);
    if (table) {
        return luaL_error(L, "could not create parent Lua tables");
    }
    if (!lua_istable(L, -1)) {
        lua_newtable(L);
        lua_setfield(L, -2, "zippylog.protocol.response");
    }
    // ErrorCode enum
    lua_newtable(L); // proxy table
    lua_newtable(L); // main table
    lua_pushnumber(L, 1);
    lua_setfield(L, -2, "ENVELOPE_PARSE_FAILURE");
    lua_pushnumber(L, 2);
    lua_setfield(L, -2, "INVALID_MESSAGE_NAMESPACE");
    lua_pushnumber(L, 3);
    lua_setfield(L, -2, "UNKNOWN_REQUEST_TYPE");
    lua_pushnumber(L, 4);
    lua_setfield(L, -2, "EMPTY_ENVELOPE");
    lua_pushnumber(L, 5);
    lua_setfield(L, -2, "MISSING_ENUMERATIONS");
    lua_pushnumber(L, 6);
    lua_setfield(L, -2, "REQUEST_NOT_IMPLEMENTED");
    lua_pushnumber(L, 7);
    lua_setfield(L, -2, "EMPTY_FIELD");
    lua_pushnumber(L, 8);
    lua_setfield(L, -2, "FIELD_LENGTHS_DIFFERENT");
    lua_pushnumber(L, 9);
    lua_setfield(L, -2, "INVALID_STREAM_OFFSET");
    lua_pushnumber(L, 10);
    lua_setfield(L, -2, "INVALID_OFFSET");
    lua_pushnumber(L, 11);
    lua_setfield(L, -2, "PATH_NOT_FOUND");
    lua_pushnumber(L, 12);
    lua_setfield(L, -2, "LIMIT_EXCEEDED");
    lua_pushnumber(L, 13);
    lua_setfield(L, -2, "UNKNOWN_MESSAGE_FORMAT_VERSION");
    lua_pushnumber(L, 14);
    lua_setfield(L, -2, "INVALID_PATH");
    lua_pushnumber(L, 15);
    lua_setfield(L, -2, "UNSUPPORTED_OPERATION_MESSAGE_VERSION");
    lua_pushnumber(L, 16);
    lua_setfield(L, -2, "EMPTY_MESSAGE");
    lua_pushnumber(L, 17);
    lua_setfield(L, -2, "PROTOCOL_NO_ENVELOPE");
    lua_pushnumber(L, 18);
    lua_setfield(L, -2, "GENERAL_ERROR_PROCESSING");
    lua_pushnumber(L, 19);
    lua_setfield(L, -2, "LUA_ERROR");
    // define metatable on main table
    lua_newtable(L);
    lua_pushcfunction(L, lua_protobuf_enum_index);
    lua_setfield(L, -2, "__index");
    lua_setmetatable(L, -2);
    
    // define metatable on proxy table
    lua_newtable(L);
    lua_pushvalue(L, -2);
    lua_setfield(L, -2, "__index");
    lua_pushcfunction(L, lua_protobuf_enum_newindex);
    lua_setfield(L, -2, "__newindex");
    lua_remove(L, -2);
    lua_setmetatable(L, -2);
    lua_setfield(L, -2, "ErrorCode");
    // end ErrorCode enum
    lua_pop(L, 1);
    luaL_Reg funcs [] = { { NULL, NULL } };
    luaL_register(L, "protobuf.zippylog.protocol.response", funcs);
    lua_protobuf_zippylog_protocol_response_PongV1_open(L);
    lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_open(L);
    lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_open(L);
    lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_open(L);
    lua_protobuf_zippylog_protocol_response_SubscribeAckV1_open(L);
    lua_protobuf_zippylog_protocol_response_SubscriptionStartV1_open(L);
    lua_protobuf_zippylog_protocol_response_WriteAckV1_open(L);
    lua_protobuf_zippylog_protocol_response_Error_open(L);
    return 1;
}


static const struct luaL_Reg PongV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_response_PongV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_response_PongV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg PongV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_response_PongV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_response_PongV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_response_PongV1_gc},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_response_PongV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.response.PongV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, PongV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.response.PongV1", PongV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_response_PongV1_pushcopy(lua_State *L, const ::zippylog::protocol::response::PongV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::PongV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.PongV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_response_PongV1_pushreference(lua_State *L, ::zippylog::protocol::response::PongV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.PongV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_response_PongV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::PongV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.PongV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_PongV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::response::PongV1 * msg = new ::zippylog::protocol::response::PongV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.PongV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_response_PongV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.PongV1");
    ::zippylog::protocol::response::PongV1 *m = (::zippylog::protocol::response::PongV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_response_PongV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.PongV1");
    ::zippylog::protocol::response::PongV1 *m = (::zippylog::protocol::response::PongV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_response_PongV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.PongV1");
    ::zippylog::protocol::response::PongV1 *m = (::zippylog::protocol::response::PongV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
static const struct luaL_Reg FeatureSpecificationV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg FeatureSpecificationV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_gc},
    {"clear_supported_message_formats", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_clear_supported_message_formats},
    {"get_supported_message_formats", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_get_supported_message_formats},
    {"set_supported_message_formats", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_set_supported_message_formats},
    {"size_supported_message_formats", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_size_supported_message_formats},
    {"clear_supported_request_types", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_clear_supported_request_types},
    {"get_supported_request_types", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_get_supported_request_types},
    {"set_supported_request_types", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_set_supported_request_types},
    {"size_supported_request_types", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_size_supported_request_types},
    {"clear_supported_request_names", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_clear_supported_request_names},
    {"get_supported_request_names", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_get_supported_request_names},
    {"set_supported_request_names", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_set_supported_request_names},
    {"size_supported_request_names", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_size_supported_request_names},
    {"clear_max_stream_segment_bytes", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_clear_max_stream_segment_bytes},
    {"get_max_stream_segment_bytes", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_get_max_stream_segment_bytes},
    {"set_max_stream_segment_bytes", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_set_max_stream_segment_bytes},
    {"has_max_stream_segment_bytes", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_has_max_stream_segment_bytes},
    {"clear_max_stream_segment_envelopes", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_clear_max_stream_segment_envelopes},
    {"get_max_stream_segment_envelopes", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_get_max_stream_segment_envelopes},
    {"set_max_stream_segment_envelopes", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_set_max_stream_segment_envelopes},
    {"has_max_stream_segment_envelopes", lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_has_max_stream_segment_envelopes},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, FeatureSpecificationV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.response.FeatureSpecificationV1", FeatureSpecificationV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_pushcopy(lua_State *L, const ::zippylog::protocol::response::FeatureSpecificationV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::FeatureSpecificationV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_pushreference(lua_State *L, ::zippylog::protocol::response::FeatureSpecificationV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::FeatureSpecificationV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::response::FeatureSpecificationV1 * msg = new ::zippylog::protocol::response::FeatureSpecificationV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    ::zippylog::protocol::response::FeatureSpecificationV1 *m = (::zippylog::protocol::response::FeatureSpecificationV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    ::zippylog::protocol::response::FeatureSpecificationV1 *m = (::zippylog::protocol::response::FeatureSpecificationV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    ::zippylog::protocol::response::FeatureSpecificationV1 *m = (::zippylog::protocol::response::FeatureSpecificationV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_clear_supported_message_formats(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    ::zippylog::protocol::response::FeatureSpecificationV1 *m = (::zippylog::protocol::response::FeatureSpecificationV1 *)mud->msg;
    m->clear_supported_message_formats();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_get_supported_message_formats(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    ::zippylog::protocol::response::FeatureSpecificationV1 *m = (::zippylog::protocol::response::FeatureSpecificationV1 *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->supported_message_formats_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->supported_message_formats_size());
    }
    lua_pushinteger(L, m->supported_message_formats(index-1));
    return 1;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_set_supported_message_formats(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    ::zippylog::protocol::response::FeatureSpecificationV1 *m = (::zippylog::protocol::response::FeatureSpecificationV1 *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->supported_message_formats_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    lua_Integer i = lua_tointeger(L, 3);
    if (index == current_size + 1) {
        m->add_supported_message_formats(i);
    }
    else {
        m->set_supported_message_formats(index-1, i);
    }
    return 0;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_size_supported_message_formats(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    ::zippylog::protocol::response::FeatureSpecificationV1 *m = (::zippylog::protocol::response::FeatureSpecificationV1 *)mud->msg;
    int size = m->supported_message_formats_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_clear_supported_request_types(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    ::zippylog::protocol::response::FeatureSpecificationV1 *m = (::zippylog::protocol::response::FeatureSpecificationV1 *)mud->msg;
    m->clear_supported_request_types();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_get_supported_request_types(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    ::zippylog::protocol::response::FeatureSpecificationV1 *m = (::zippylog::protocol::response::FeatureSpecificationV1 *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->supported_request_types_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->supported_request_types_size());
    }
    lua_pushinteger(L, m->supported_request_types(index-1));
    return 1;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_set_supported_request_types(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    ::zippylog::protocol::response::FeatureSpecificationV1 *m = (::zippylog::protocol::response::FeatureSpecificationV1 *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->supported_request_types_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    lua_Integer i = lua_tointeger(L, 3);
    if (index == current_size + 1) {
        m->add_supported_request_types(i);
    }
    else {
        m->set_supported_request_types(index-1, i);
    }
    return 0;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_size_supported_request_types(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    ::zippylog::protocol::response::FeatureSpecificationV1 *m = (::zippylog::protocol::response::FeatureSpecificationV1 *)mud->msg;
    int size = m->supported_request_types_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_clear_supported_request_names(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    ::zippylog::protocol::response::FeatureSpecificationV1 *m = (::zippylog::protocol::response::FeatureSpecificationV1 *)mud->msg;
    m->clear_supported_request_names();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_get_supported_request_names(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    ::zippylog::protocol::response::FeatureSpecificationV1 *m = (::zippylog::protocol::response::FeatureSpecificationV1 *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->supported_request_names_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->supported_request_names_size());
    }
    string s = m->supported_request_names(index - 1);
    lua_pushlstring(L, s.c_str(), s.size());
    return 1;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_set_supported_request_names(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    ::zippylog::protocol::response::FeatureSpecificationV1 *m = (::zippylog::protocol::response::FeatureSpecificationV1 *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->supported_request_names_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    size_t length = 0;
    const char *s = luaL_checklstring(L, 3, &length);
    if (index == current_size + 1) {
        m->add_supported_request_names(s, length);
    }
    else {
        m->set_supported_request_names(index-1, s, length);
    }
    return 0;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_size_supported_request_names(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    ::zippylog::protocol::response::FeatureSpecificationV1 *m = (::zippylog::protocol::response::FeatureSpecificationV1 *)mud->msg;
    int size = m->supported_request_names_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_clear_max_stream_segment_bytes(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    ::zippylog::protocol::response::FeatureSpecificationV1 *m = (::zippylog::protocol::response::FeatureSpecificationV1 *)mud->msg;
    m->clear_max_stream_segment_bytes();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_get_max_stream_segment_bytes(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    ::zippylog::protocol::response::FeatureSpecificationV1 *m = (::zippylog::protocol::response::FeatureSpecificationV1 *)mud->msg;
    m->has_max_stream_segment_bytes() ? lua_pushinteger(L, m->max_stream_segment_bytes()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_set_max_stream_segment_bytes(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    ::zippylog::protocol::response::FeatureSpecificationV1 *m = (::zippylog::protocol::response::FeatureSpecificationV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_max_stream_segment_bytes();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_max_stream_segment_bytes(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_has_max_stream_segment_bytes(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    ::zippylog::protocol::response::FeatureSpecificationV1 *m = (::zippylog::protocol::response::FeatureSpecificationV1 *)mud->msg;
    lua_pushboolean(L, m->has_max_stream_segment_bytes());
    return 1;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_clear_max_stream_segment_envelopes(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    ::zippylog::protocol::response::FeatureSpecificationV1 *m = (::zippylog::protocol::response::FeatureSpecificationV1 *)mud->msg;
    m->clear_max_stream_segment_envelopes();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_get_max_stream_segment_envelopes(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    ::zippylog::protocol::response::FeatureSpecificationV1 *m = (::zippylog::protocol::response::FeatureSpecificationV1 *)mud->msg;
    m->has_max_stream_segment_envelopes() ? lua_pushinteger(L, m->max_stream_segment_envelopes()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_set_max_stream_segment_envelopes(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    ::zippylog::protocol::response::FeatureSpecificationV1 *m = (::zippylog::protocol::response::FeatureSpecificationV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_max_stream_segment_envelopes();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_max_stream_segment_envelopes(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_FeatureSpecificationV1_has_max_stream_segment_envelopes(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.FeatureSpecificationV1");
    ::zippylog::protocol::response::FeatureSpecificationV1 *m = (::zippylog::protocol::response::FeatureSpecificationV1 *)mud->msg;
    lua_pushboolean(L, m->has_max_stream_segment_envelopes());
    return 1;
}

static const struct luaL_Reg StreamSegmentStartV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StreamSegmentStartV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_gc},
    {"clear_path", lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_clear_path},
    {"get_path", lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_get_path},
    {"set_path", lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_set_path},
    {"has_path", lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_has_path},
    {"clear_offset", lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_clear_offset},
    {"get_offset", lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_get_offset},
    {"set_offset", lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_set_offset},
    {"has_offset", lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_has_offset},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.response.StreamSegmentStartV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StreamSegmentStartV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.response.StreamSegmentStartV1", StreamSegmentStartV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_pushcopy(lua_State *L, const ::zippylog::protocol::response::StreamSegmentStartV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::StreamSegmentStartV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.StreamSegmentStartV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_pushreference(lua_State *L, ::zippylog::protocol::response::StreamSegmentStartV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.StreamSegmentStartV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::StreamSegmentStartV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.StreamSegmentStartV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::response::StreamSegmentStartV1 * msg = new ::zippylog::protocol::response::StreamSegmentStartV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.StreamSegmentStartV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentStartV1");
    ::zippylog::protocol::response::StreamSegmentStartV1 *m = (::zippylog::protocol::response::StreamSegmentStartV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentStartV1");
    ::zippylog::protocol::response::StreamSegmentStartV1 *m = (::zippylog::protocol::response::StreamSegmentStartV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentStartV1");
    ::zippylog::protocol::response::StreamSegmentStartV1 *m = (::zippylog::protocol::response::StreamSegmentStartV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_clear_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentStartV1");
    ::zippylog::protocol::response::StreamSegmentStartV1 *m = (::zippylog::protocol::response::StreamSegmentStartV1 *)mud->msg;
    m->clear_path();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_get_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentStartV1");
    ::zippylog::protocol::response::StreamSegmentStartV1 *m = (::zippylog::protocol::response::StreamSegmentStartV1 *)mud->msg;
    string s = m->path();
    m->has_path() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_set_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentStartV1");
    ::zippylog::protocol::response::StreamSegmentStartV1 *m = (::zippylog::protocol::response::StreamSegmentStartV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_path();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_path(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_has_path(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentStartV1");
    ::zippylog::protocol::response::StreamSegmentStartV1 *m = (::zippylog::protocol::response::StreamSegmentStartV1 *)mud->msg;
    lua_pushboolean(L, m->has_path());
    return 1;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_clear_offset(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentStartV1");
    ::zippylog::protocol::response::StreamSegmentStartV1 *m = (::zippylog::protocol::response::StreamSegmentStartV1 *)mud->msg;
    m->clear_offset();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_get_offset(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentStartV1");
    ::zippylog::protocol::response::StreamSegmentStartV1 *m = (::zippylog::protocol::response::StreamSegmentStartV1 *)mud->msg;
    m->has_offset() ? lua_pushinteger(L, m->offset()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_set_offset(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentStartV1");
    ::zippylog::protocol::response::StreamSegmentStartV1 *m = (::zippylog::protocol::response::StreamSegmentStartV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_offset();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_offset(i);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentStartV1_has_offset(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentStartV1");
    ::zippylog::protocol::response::StreamSegmentStartV1 *m = (::zippylog::protocol::response::StreamSegmentStartV1 *)mud->msg;
    lua_pushboolean(L, m->has_offset());
    return 1;
}

static const struct luaL_Reg StreamSegmentEndV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg StreamSegmentEndV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_gc},
    {"clear_offset", lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_clear_offset},
    {"get_offset", lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_get_offset},
    {"set_offset", lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_set_offset},
    {"has_offset", lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_has_offset},
    {"clear_bytes_sent", lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_clear_bytes_sent},
    {"get_bytes_sent", lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_get_bytes_sent},
    {"set_bytes_sent", lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_set_bytes_sent},
    {"has_bytes_sent", lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_has_bytes_sent},
    {"clear_envelopes_sent", lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_clear_envelopes_sent},
    {"get_envelopes_sent", lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_get_envelopes_sent},
    {"set_envelopes_sent", lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_set_envelopes_sent},
    {"has_envelopes_sent", lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_has_envelopes_sent},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.response.StreamSegmentEndV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, StreamSegmentEndV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.response.StreamSegmentEndV1", StreamSegmentEndV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_pushcopy(lua_State *L, const ::zippylog::protocol::response::StreamSegmentEndV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::StreamSegmentEndV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.StreamSegmentEndV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_pushreference(lua_State *L, ::zippylog::protocol::response::StreamSegmentEndV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.StreamSegmentEndV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::StreamSegmentEndV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.StreamSegmentEndV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::response::StreamSegmentEndV1 * msg = new ::zippylog::protocol::response::StreamSegmentEndV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.StreamSegmentEndV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEndV1");
    ::zippylog::protocol::response::StreamSegmentEndV1 *m = (::zippylog::protocol::response::StreamSegmentEndV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEndV1");
    ::zippylog::protocol::response::StreamSegmentEndV1 *m = (::zippylog::protocol::response::StreamSegmentEndV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEndV1");
    ::zippylog::protocol::response::StreamSegmentEndV1 *m = (::zippylog::protocol::response::StreamSegmentEndV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_clear_offset(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEndV1");
    ::zippylog::protocol::response::StreamSegmentEndV1 *m = (::zippylog::protocol::response::StreamSegmentEndV1 *)mud->msg;
    m->clear_offset();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_get_offset(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEndV1");
    ::zippylog::protocol::response::StreamSegmentEndV1 *m = (::zippylog::protocol::response::StreamSegmentEndV1 *)mud->msg;
    m->has_offset() ? lua_pushinteger(L, m->offset()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_set_offset(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEndV1");
    ::zippylog::protocol::response::StreamSegmentEndV1 *m = (::zippylog::protocol::response::StreamSegmentEndV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_offset();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_offset(i);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_has_offset(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEndV1");
    ::zippylog::protocol::response::StreamSegmentEndV1 *m = (::zippylog::protocol::response::StreamSegmentEndV1 *)mud->msg;
    lua_pushboolean(L, m->has_offset());
    return 1;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_clear_bytes_sent(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEndV1");
    ::zippylog::protocol::response::StreamSegmentEndV1 *m = (::zippylog::protocol::response::StreamSegmentEndV1 *)mud->msg;
    m->clear_bytes_sent();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_get_bytes_sent(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEndV1");
    ::zippylog::protocol::response::StreamSegmentEndV1 *m = (::zippylog::protocol::response::StreamSegmentEndV1 *)mud->msg;
    m->has_bytes_sent() ? lua_pushinteger(L, m->bytes_sent()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_set_bytes_sent(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEndV1");
    ::zippylog::protocol::response::StreamSegmentEndV1 *m = (::zippylog::protocol::response::StreamSegmentEndV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_bytes_sent();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_bytes_sent(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_has_bytes_sent(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEndV1");
    ::zippylog::protocol::response::StreamSegmentEndV1 *m = (::zippylog::protocol::response::StreamSegmentEndV1 *)mud->msg;
    lua_pushboolean(L, m->has_bytes_sent());
    return 1;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_clear_envelopes_sent(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEndV1");
    ::zippylog::protocol::response::StreamSegmentEndV1 *m = (::zippylog::protocol::response::StreamSegmentEndV1 *)mud->msg;
    m->clear_envelopes_sent();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_get_envelopes_sent(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEndV1");
    ::zippylog::protocol::response::StreamSegmentEndV1 *m = (::zippylog::protocol::response::StreamSegmentEndV1 *)mud->msg;
    m->has_envelopes_sent() ? lua_pushinteger(L, m->envelopes_sent()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_set_envelopes_sent(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEndV1");
    ::zippylog::protocol::response::StreamSegmentEndV1 *m = (::zippylog::protocol::response::StreamSegmentEndV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_envelopes_sent();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_envelopes_sent(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_StreamSegmentEndV1_has_envelopes_sent(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.StreamSegmentEndV1");
    ::zippylog::protocol::response::StreamSegmentEndV1 *m = (::zippylog::protocol::response::StreamSegmentEndV1 *)mud->msg;
    lua_pushboolean(L, m->has_envelopes_sent());
    return 1;
}

static const struct luaL_Reg SubscribeAckV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_response_SubscribeAckV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_response_SubscribeAckV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg SubscribeAckV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_response_SubscribeAckV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_response_SubscribeAckV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_response_SubscribeAckV1_gc},
    {"clear_id", lua_protobuf_zippylog_protocol_response_SubscribeAckV1_clear_id},
    {"get_id", lua_protobuf_zippylog_protocol_response_SubscribeAckV1_get_id},
    {"set_id", lua_protobuf_zippylog_protocol_response_SubscribeAckV1_set_id},
    {"has_id", lua_protobuf_zippylog_protocol_response_SubscribeAckV1_has_id},
    {"clear_ttl", lua_protobuf_zippylog_protocol_response_SubscribeAckV1_clear_ttl},
    {"get_ttl", lua_protobuf_zippylog_protocol_response_SubscribeAckV1_get_ttl},
    {"set_ttl", lua_protobuf_zippylog_protocol_response_SubscribeAckV1_set_ttl},
    {"has_ttl", lua_protobuf_zippylog_protocol_response_SubscribeAckV1_has_ttl},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_response_SubscribeAckV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.response.SubscribeAckV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, SubscribeAckV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.response.SubscribeAckV1", SubscribeAckV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_response_SubscribeAckV1_pushcopy(lua_State *L, const ::zippylog::protocol::response::SubscribeAckV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::SubscribeAckV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.SubscribeAckV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_response_SubscribeAckV1_pushreference(lua_State *L, ::zippylog::protocol::response::SubscribeAckV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.SubscribeAckV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_response_SubscribeAckV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::SubscribeAckV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.SubscribeAckV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_SubscribeAckV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::response::SubscribeAckV1 * msg = new ::zippylog::protocol::response::SubscribeAckV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.SubscribeAckV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_response_SubscribeAckV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscribeAckV1");
    ::zippylog::protocol::response::SubscribeAckV1 *m = (::zippylog::protocol::response::SubscribeAckV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_response_SubscribeAckV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscribeAckV1");
    ::zippylog::protocol::response::SubscribeAckV1 *m = (::zippylog::protocol::response::SubscribeAckV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_response_SubscribeAckV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscribeAckV1");
    ::zippylog::protocol::response::SubscribeAckV1 *m = (::zippylog::protocol::response::SubscribeAckV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_response_SubscribeAckV1_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscribeAckV1");
    ::zippylog::protocol::response::SubscribeAckV1 *m = (::zippylog::protocol::response::SubscribeAckV1 *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_SubscribeAckV1_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscribeAckV1");
    ::zippylog::protocol::response::SubscribeAckV1 *m = (::zippylog::protocol::response::SubscribeAckV1 *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_SubscribeAckV1_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscribeAckV1");
    ::zippylog::protocol::response::SubscribeAckV1 *m = (::zippylog::protocol::response::SubscribeAckV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_SubscribeAckV1_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscribeAckV1");
    ::zippylog::protocol::response::SubscribeAckV1 *m = (::zippylog::protocol::response::SubscribeAckV1 *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

int lua_protobuf_zippylog_protocol_response_SubscribeAckV1_clear_ttl(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscribeAckV1");
    ::zippylog::protocol::response::SubscribeAckV1 *m = (::zippylog::protocol::response::SubscribeAckV1 *)mud->msg;
    m->clear_ttl();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_SubscribeAckV1_get_ttl(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscribeAckV1");
    ::zippylog::protocol::response::SubscribeAckV1 *m = (::zippylog::protocol::response::SubscribeAckV1 *)mud->msg;
    m->has_ttl() ? lua_pushinteger(L, m->ttl()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_SubscribeAckV1_set_ttl(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscribeAckV1");
    ::zippylog::protocol::response::SubscribeAckV1 *m = (::zippylog::protocol::response::SubscribeAckV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_ttl();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_ttl(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_SubscribeAckV1_has_ttl(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscribeAckV1");
    ::zippylog::protocol::response::SubscribeAckV1 *m = (::zippylog::protocol::response::SubscribeAckV1 *)mud->msg;
    lua_pushboolean(L, m->has_ttl());
    return 1;
}

static const struct luaL_Reg SubscriptionStartV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_response_SubscriptionStartV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_response_SubscriptionStartV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg SubscriptionStartV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_response_SubscriptionStartV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_response_SubscriptionStartV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_response_SubscriptionStartV1_gc},
    {"clear_id", lua_protobuf_zippylog_protocol_response_SubscriptionStartV1_clear_id},
    {"get_id", lua_protobuf_zippylog_protocol_response_SubscriptionStartV1_get_id},
    {"set_id", lua_protobuf_zippylog_protocol_response_SubscriptionStartV1_set_id},
    {"has_id", lua_protobuf_zippylog_protocol_response_SubscriptionStartV1_has_id},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_response_SubscriptionStartV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.response.SubscriptionStartV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, SubscriptionStartV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.response.SubscriptionStartV1", SubscriptionStartV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_response_SubscriptionStartV1_pushcopy(lua_State *L, const ::zippylog::protocol::response::SubscriptionStartV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::SubscriptionStartV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.SubscriptionStartV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_response_SubscriptionStartV1_pushreference(lua_State *L, ::zippylog::protocol::response::SubscriptionStartV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.SubscriptionStartV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_response_SubscriptionStartV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::SubscriptionStartV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.SubscriptionStartV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_SubscriptionStartV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::response::SubscriptionStartV1 * msg = new ::zippylog::protocol::response::SubscriptionStartV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.SubscriptionStartV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_response_SubscriptionStartV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscriptionStartV1");
    ::zippylog::protocol::response::SubscriptionStartV1 *m = (::zippylog::protocol::response::SubscriptionStartV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_response_SubscriptionStartV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscriptionStartV1");
    ::zippylog::protocol::response::SubscriptionStartV1 *m = (::zippylog::protocol::response::SubscriptionStartV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_response_SubscriptionStartV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscriptionStartV1");
    ::zippylog::protocol::response::SubscriptionStartV1 *m = (::zippylog::protocol::response::SubscriptionStartV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_response_SubscriptionStartV1_clear_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscriptionStartV1");
    ::zippylog::protocol::response::SubscriptionStartV1 *m = (::zippylog::protocol::response::SubscriptionStartV1 *)mud->msg;
    m->clear_id();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_SubscriptionStartV1_get_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscriptionStartV1");
    ::zippylog::protocol::response::SubscriptionStartV1 *m = (::zippylog::protocol::response::SubscriptionStartV1 *)mud->msg;
    string s = m->id();
    m->has_id() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_SubscriptionStartV1_set_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscriptionStartV1");
    ::zippylog::protocol::response::SubscriptionStartV1 *m = (::zippylog::protocol::response::SubscriptionStartV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_id(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_SubscriptionStartV1_has_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.SubscriptionStartV1");
    ::zippylog::protocol::response::SubscriptionStartV1 *m = (::zippylog::protocol::response::SubscriptionStartV1 *)mud->msg;
    lua_pushboolean(L, m->has_id());
    return 1;
}

static const struct luaL_Reg WriteAckV1_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_response_WriteAckV1_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_response_WriteAckV1_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg WriteAckV1_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_response_WriteAckV1_serialized},
    {"clear", lua_protobuf_zippylog_protocol_response_WriteAckV1_clear},
    {"__gc", lua_protobuf_zippylog_protocol_response_WriteAckV1_gc},
    {"clear_envelopes_written", lua_protobuf_zippylog_protocol_response_WriteAckV1_clear_envelopes_written},
    {"get_envelopes_written", lua_protobuf_zippylog_protocol_response_WriteAckV1_get_envelopes_written},
    {"set_envelopes_written", lua_protobuf_zippylog_protocol_response_WriteAckV1_set_envelopes_written},
    {"has_envelopes_written", lua_protobuf_zippylog_protocol_response_WriteAckV1_has_envelopes_written},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_response_WriteAckV1_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.response.WriteAckV1");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, WriteAckV1_methods);
    luaL_register(L, "protobuf.zippylog.protocol.response.WriteAckV1", WriteAckV1_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_response_WriteAckV1_pushcopy(lua_State *L, const ::zippylog::protocol::response::WriteAckV1 &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::WriteAckV1(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.WriteAckV1");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_response_WriteAckV1_pushreference(lua_State *L, ::zippylog::protocol::response::WriteAckV1 *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.WriteAckV1");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_response_WriteAckV1_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::WriteAckV1();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.WriteAckV1");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_WriteAckV1_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::response::WriteAckV1 * msg = new ::zippylog::protocol::response::WriteAckV1();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.WriteAckV1");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_response_WriteAckV1_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.WriteAckV1");
    ::zippylog::protocol::response::WriteAckV1 *m = (::zippylog::protocol::response::WriteAckV1 *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_response_WriteAckV1_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.WriteAckV1");
    ::zippylog::protocol::response::WriteAckV1 *m = (::zippylog::protocol::response::WriteAckV1 *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_response_WriteAckV1_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.WriteAckV1");
    ::zippylog::protocol::response::WriteAckV1 *m = (::zippylog::protocol::response::WriteAckV1 *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_response_WriteAckV1_clear_envelopes_written(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.WriteAckV1");
    ::zippylog::protocol::response::WriteAckV1 *m = (::zippylog::protocol::response::WriteAckV1 *)mud->msg;
    m->clear_envelopes_written();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_WriteAckV1_get_envelopes_written(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.WriteAckV1");
    ::zippylog::protocol::response::WriteAckV1 *m = (::zippylog::protocol::response::WriteAckV1 *)mud->msg;
    m->has_envelopes_written() ? lua_pushinteger(L, m->envelopes_written()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_WriteAckV1_set_envelopes_written(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.WriteAckV1");
    ::zippylog::protocol::response::WriteAckV1 *m = (::zippylog::protocol::response::WriteAckV1 *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_envelopes_written();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_envelopes_written(v);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_WriteAckV1_has_envelopes_written(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.WriteAckV1");
    ::zippylog::protocol::response::WriteAckV1 *m = (::zippylog::protocol::response::WriteAckV1 *)mud->msg;
    lua_pushboolean(L, m->has_envelopes_written());
    return 1;
}

static const struct luaL_Reg Error_functions [] = {
    {"new", lua_protobuf_zippylog_protocol_response_Error_new},
    {"parsefromstring", lua_protobuf_zippylog_protocol_response_Error_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg Error_methods [] = {
    {"serialized", lua_protobuf_zippylog_protocol_response_Error_serialized},
    {"clear", lua_protobuf_zippylog_protocol_response_Error_clear},
    {"__gc", lua_protobuf_zippylog_protocol_response_Error_gc},
    {"clear_code", lua_protobuf_zippylog_protocol_response_Error_clear_code},
    {"get_code", lua_protobuf_zippylog_protocol_response_Error_get_code},
    {"set_code", lua_protobuf_zippylog_protocol_response_Error_set_code},
    {"has_code", lua_protobuf_zippylog_protocol_response_Error_has_code},
    {"clear_msg", lua_protobuf_zippylog_protocol_response_Error_clear_msg},
    {"get_msg", lua_protobuf_zippylog_protocol_response_Error_get_msg},
    {"set_msg", lua_protobuf_zippylog_protocol_response_Error_set_msg},
    {"has_msg", lua_protobuf_zippylog_protocol_response_Error_has_msg},
    {NULL, NULL},
};

int lua_protobuf_zippylog_protocol_response_Error_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.zippylog.protocol.response.Error");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, Error_methods);
    luaL_register(L, "protobuf.zippylog.protocol.response.Error", Error_functions);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_zippylog_protocol_response_Error_pushcopy(lua_State *L, const ::zippylog::protocol::response::Error &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::Error(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.Error");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_zippylog_protocol_response_Error_pushreference(lua_State *L, ::zippylog::protocol::response::Error *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.Error");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_zippylog_protocol_response_Error_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::zippylog::protocol::response::Error();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.Error");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_Error_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::zippylog::protocol::response::Error * msg = new ::zippylog::protocol::response::Error();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.zippylog.protocol.response.Error");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_zippylog_protocol_response_Error_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Error");
    ::zippylog::protocol::response::Error *m = (::zippylog::protocol::response::Error *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_zippylog_protocol_response_Error_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Error");
    ::zippylog::protocol::response::Error *m = (::zippylog::protocol::response::Error *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_zippylog_protocol_response_Error_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Error");
    ::zippylog::protocol::response::Error *m = (::zippylog::protocol::response::Error *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_zippylog_protocol_response_Error_clear_code(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Error");
    ::zippylog::protocol::response::Error *m = (::zippylog::protocol::response::Error *)mud->msg;
    m->clear_code();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_Error_get_code(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Error");
    ::zippylog::protocol::response::Error *m = (::zippylog::protocol::response::Error *)mud->msg;
    m->has_code() ? lua_pushinteger(L, m->code()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_Error_set_code(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Error");
    ::zippylog::protocol::response::Error *m = (::zippylog::protocol::response::Error *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_code();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_code((::zippylog::protocol::response::ErrorCode)i);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_Error_has_code(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Error");
    ::zippylog::protocol::response::Error *m = (::zippylog::protocol::response::Error *)mud->msg;
    lua_pushboolean(L, m->has_code());
    return 1;
}

int lua_protobuf_zippylog_protocol_response_Error_clear_msg(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Error");
    ::zippylog::protocol::response::Error *m = (::zippylog::protocol::response::Error *)mud->msg;
    m->clear_msg();
    return 0;
}

int lua_protobuf_zippylog_protocol_response_Error_get_msg(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Error");
    ::zippylog::protocol::response::Error *m = (::zippylog::protocol::response::Error *)mud->msg;
    string s = m->msg();
    m->has_msg() ? lua_pushlstring(L, s.c_str(), s.size()) : lua_pushnil(L);
    return 1;
}

int lua_protobuf_zippylog_protocol_response_Error_set_msg(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Error");
    ::zippylog::protocol::response::Error *m = (::zippylog::protocol::response::Error *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_msg();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_msg(s, len);
    return 0;
}

int lua_protobuf_zippylog_protocol_response_Error_has_msg(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.zippylog.protocol.response.Error");
    ::zippylog::protocol::response::Error *m = (::zippylog::protocol::response::Error *)mud->msg;
    lua_pushboolean(L, m->has_msg());
    return 1;
}
