// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zippylog/protocol/request.proto

#ifndef PROTOBUF_zippylog_2fprotocol_2frequest_2eproto__INCLUDED
#define PROTOBUF_zippylog_2fprotocol_2frequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <zippylog/envelope.hpp>
// @@protoc_insertion_point(includes)

namespace zippylog {
namespace protocol {
namespace request {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();
void protobuf_AssignDesc_zippylog_2fprotocol_2frequest_2eproto();
void protobuf_ShutdownFile_zippylog_2fprotocol_2frequest_2eproto();

class PingV1;
class GetFeaturesV1;
class GetStoreInfoV1;
class GetBucketInfoV1;
class GetStreamSetInfoV1;
class GetStreamInfoV1;
class GetStreamSegmentV1;
class WriteEnvelopeV1;
class WriteEnvelopeFromMessagesV1;
class WriteEnvelopeFromStringV1;
class SubscribeStoreChangesV1;
class SubscribeEnvelopesV1;
class SubscribeKeepaliveV1;
class SubscribeCancelV1;
class RegisterPluginV1;
class UnregisterPluginV1;
class GetPluginStatusV1;

// ===================================================================

class PingV1 : public ::google::protobuf::Message {
 public:
  PingV1();
  virtual ~PingV1();
  
  PingV1(const PingV1& from);
  
  inline PingV1& operator=(const PingV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PingV1& default_instance();
  
  void Swap(PingV1* other);
  
  // implements Message ----------------------------------------------
  
  PingV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PingV1& from);
  void MergeFrom(const PingV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 91;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.request.PingV1)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2frequest_2eproto();
  
  void InitAsDefaultInstance();
  static PingV1* default_instance_;
};
// -------------------------------------------------------------------

class GetFeaturesV1 : public ::google::protobuf::Message {
 public:
  GetFeaturesV1();
  virtual ~GetFeaturesV1();
  
  GetFeaturesV1(const GetFeaturesV1& from);
  
  inline GetFeaturesV1& operator=(const GetFeaturesV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFeaturesV1& default_instance();
  
  void Swap(GetFeaturesV1* other);
  
  // implements Message ----------------------------------------------
  
  GetFeaturesV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFeaturesV1& from);
  void MergeFrom(const GetFeaturesV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 72;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.request.GetFeaturesV1)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2frequest_2eproto();
  
  void InitAsDefaultInstance();
  static GetFeaturesV1* default_instance_;
};
// -------------------------------------------------------------------

class GetStoreInfoV1 : public ::google::protobuf::Message {
 public:
  GetStoreInfoV1();
  virtual ~GetStoreInfoV1();
  
  GetStoreInfoV1(const GetStoreInfoV1& from);
  
  inline GetStoreInfoV1& operator=(const GetStoreInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStoreInfoV1& default_instance();
  
  void Swap(GetStoreInfoV1* other);
  
  // implements Message ----------------------------------------------
  
  GetStoreInfoV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetStoreInfoV1& from);
  void MergeFrom(const GetStoreInfoV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 73;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.request.GetStoreInfoV1)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2frequest_2eproto();
  
  void InitAsDefaultInstance();
  static GetStoreInfoV1* default_instance_;
};
// -------------------------------------------------------------------

class GetBucketInfoV1 : public ::google::protobuf::Message {
 public:
  GetBucketInfoV1();
  virtual ~GetBucketInfoV1();
  
  GetBucketInfoV1(const GetBucketInfoV1& from);
  
  inline GetBucketInfoV1& operator=(const GetBucketInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBucketInfoV1& default_instance();
  
  void Swap(GetBucketInfoV1* other);
  
  // implements Message ----------------------------------------------
  
  GetBucketInfoV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetBucketInfoV1& from);
  void MergeFrom(const GetBucketInfoV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 74;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.request.GetBucketInfoV1)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* path_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2frequest_2eproto();
  
  void InitAsDefaultInstance();
  static GetBucketInfoV1* default_instance_;
};
// -------------------------------------------------------------------

class GetStreamSetInfoV1 : public ::google::protobuf::Message {
 public:
  GetStreamSetInfoV1();
  virtual ~GetStreamSetInfoV1();
  
  GetStreamSetInfoV1(const GetStreamSetInfoV1& from);
  
  inline GetStreamSetInfoV1& operator=(const GetStreamSetInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStreamSetInfoV1& default_instance();
  
  void Swap(GetStreamSetInfoV1* other);
  
  // implements Message ----------------------------------------------
  
  GetStreamSetInfoV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetStreamSetInfoV1& from);
  void MergeFrom(const GetStreamSetInfoV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 75;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.request.GetStreamSetInfoV1)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* path_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2frequest_2eproto();
  
  void InitAsDefaultInstance();
  static GetStreamSetInfoV1* default_instance_;
};
// -------------------------------------------------------------------

class GetStreamInfoV1 : public ::google::protobuf::Message {
 public:
  GetStreamInfoV1();
  virtual ~GetStreamInfoV1();
  
  GetStreamInfoV1(const GetStreamInfoV1& from);
  
  inline GetStreamInfoV1& operator=(const GetStreamInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStreamInfoV1& default_instance();
  
  void Swap(GetStreamInfoV1* other);
  
  // implements Message ----------------------------------------------
  
  GetStreamInfoV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetStreamInfoV1& from);
  void MergeFrom(const GetStreamInfoV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 76;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.request.GetStreamInfoV1)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* path_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2frequest_2eproto();
  
  void InitAsDefaultInstance();
  static GetStreamInfoV1* default_instance_;
};
// -------------------------------------------------------------------

class GetStreamSegmentV1 : public ::google::protobuf::Message {
 public:
  GetStreamSegmentV1();
  virtual ~GetStreamSegmentV1();
  
  GetStreamSegmentV1(const GetStreamSegmentV1& from);
  
  inline GetStreamSegmentV1& operator=(const GetStreamSegmentV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStreamSegmentV1& default_instance();
  
  void Swap(GetStreamSegmentV1* other);
  
  // implements Message ----------------------------------------------
  
  GetStreamSegmentV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetStreamSegmentV1& from);
  void MergeFrom(const GetStreamSegmentV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // required uint64 start_offset = 2;
  inline bool has_start_offset() const;
  inline void clear_start_offset();
  static const int kStartOffsetFieldNumber = 2;
  inline ::google::protobuf::uint64 start_offset() const;
  inline void set_start_offset(::google::protobuf::uint64 value);
  
  // optional uint32 max_response_bytes = 3;
  inline bool has_max_response_bytes() const;
  inline void clear_max_response_bytes();
  static const int kMaxResponseBytesFieldNumber = 3;
  inline ::google::protobuf::uint32 max_response_bytes() const;
  inline void set_max_response_bytes(::google::protobuf::uint32 value);
  
  // optional uint32 max_response_envelopes = 4;
  inline bool has_max_response_envelopes() const;
  inline void clear_max_response_envelopes();
  static const int kMaxResponseEnvelopesFieldNumber = 4;
  inline ::google::protobuf::uint32 max_response_envelopes() const;
  inline void set_max_response_envelopes(::google::protobuf::uint32 value);
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 92;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.request.GetStreamSegmentV1)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_start_offset();
  inline void clear_has_start_offset();
  inline void set_has_max_response_bytes();
  inline void clear_has_max_response_bytes();
  inline void set_has_max_response_envelopes();
  inline void clear_has_max_response_envelopes();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* path_;
  ::google::protobuf::uint64 start_offset_;
  ::google::protobuf::uint32 max_response_bytes_;
  ::google::protobuf::uint32 max_response_envelopes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2frequest_2eproto();
  
  void InitAsDefaultInstance();
  static GetStreamSegmentV1* default_instance_;
};
// -------------------------------------------------------------------

class WriteEnvelopeV1 : public ::google::protobuf::Message {
 public:
  WriteEnvelopeV1();
  virtual ~WriteEnvelopeV1();
  
  WriteEnvelopeV1(const WriteEnvelopeV1& from);
  
  inline WriteEnvelopeV1& operator=(const WriteEnvelopeV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteEnvelopeV1& default_instance();
  
  void Swap(WriteEnvelopeV1* other);
  
  // implements Message ----------------------------------------------
  
  WriteEnvelopeV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteEnvelopeV1& from);
  void MergeFrom(const WriteEnvelopeV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // repeated bytes envelope = 2;
  inline int envelope_size() const;
  inline void clear_envelope();
  static const int kEnvelopeFieldNumber = 2;
  inline const ::std::string& envelope(int index) const;
  inline ::std::string* mutable_envelope(int index);
  inline void set_envelope(int index, const ::std::string& value);
  inline void set_envelope(int index, const char* value);
  inline void set_envelope(int index, const void* value, size_t size);
  inline ::std::string* add_envelope();
  inline void add_envelope(const ::std::string& value);
  inline void add_envelope(const char* value);
  inline void add_envelope(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& envelope() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_envelope();
  
  // optional bool acknowledge = 3 [default = true];
  inline bool has_acknowledge() const;
  inline void clear_acknowledge();
  static const int kAcknowledgeFieldNumber = 3;
  inline bool acknowledge() const;
  inline void set_acknowledge(bool value);
  
  // optional bool synchronous = 4 [default = false];
  inline bool has_synchronous() const;
  inline void clear_synchronous();
  static const int kSynchronousFieldNumber = 4;
  inline bool synchronous() const;
  inline void set_synchronous(bool value);
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 78;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.request.WriteEnvelopeV1)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_acknowledge();
  inline void clear_has_acknowledge();
  inline void set_has_synchronous();
  inline void clear_has_synchronous();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* path_;
  ::google::protobuf::RepeatedPtrField< ::std::string> envelope_;
  bool acknowledge_;
  bool synchronous_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2frequest_2eproto();
  
  void InitAsDefaultInstance();
  static WriteEnvelopeV1* default_instance_;
};
// -------------------------------------------------------------------

class WriteEnvelopeFromMessagesV1 : public ::google::protobuf::Message {
 public:
  WriteEnvelopeFromMessagesV1();
  virtual ~WriteEnvelopeFromMessagesV1();
  
  WriteEnvelopeFromMessagesV1(const WriteEnvelopeFromMessagesV1& from);
  
  inline WriteEnvelopeFromMessagesV1& operator=(const WriteEnvelopeFromMessagesV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteEnvelopeFromMessagesV1& default_instance();
  
  void Swap(WriteEnvelopeFromMessagesV1* other);
  
  // implements Message ----------------------------------------------
  
  WriteEnvelopeFromMessagesV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteEnvelopeFromMessagesV1& from);
  void MergeFrom(const WriteEnvelopeFromMessagesV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // repeated bytes message = 2;
  inline int message_size() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message(int index) const;
  inline ::std::string* mutable_message(int index);
  inline void set_message(int index, const ::std::string& value);
  inline void set_message(int index, const char* value);
  inline void set_message(int index, const void* value, size_t size);
  inline ::std::string* add_message();
  inline void add_message(const ::std::string& value);
  inline void add_message(const char* value);
  inline void add_message(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& message() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_message();
  
  // repeated uint32 message_namespace = 3 [packed = true];
  inline int message_namespace_size() const;
  inline void clear_message_namespace();
  static const int kMessageNamespaceFieldNumber = 3;
  inline ::google::protobuf::uint32 message_namespace(int index) const;
  inline void set_message_namespace(int index, ::google::protobuf::uint32 value);
  inline void add_message_namespace(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      message_namespace() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_message_namespace();
  
  // repeated uint32 message_type = 4 [packed = true];
  inline int message_type_size() const;
  inline void clear_message_type();
  static const int kMessageTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 message_type(int index) const;
  inline void set_message_type(int index, ::google::protobuf::uint32 value);
  inline void add_message_type(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      message_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_message_type();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 79;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.request.WriteEnvelopeFromMessagesV1)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* path_;
  ::google::protobuf::RepeatedPtrField< ::std::string> message_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > message_namespace_;
  mutable int _message_namespace_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > message_type_;
  mutable int _message_type_cached_byte_size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2frequest_2eproto();
  
  void InitAsDefaultInstance();
  static WriteEnvelopeFromMessagesV1* default_instance_;
};
// -------------------------------------------------------------------

class WriteEnvelopeFromStringV1 : public ::google::protobuf::Message {
 public:
  WriteEnvelopeFromStringV1();
  virtual ~WriteEnvelopeFromStringV1();
  
  WriteEnvelopeFromStringV1(const WriteEnvelopeFromStringV1& from);
  
  inline WriteEnvelopeFromStringV1& operator=(const WriteEnvelopeFromStringV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteEnvelopeFromStringV1& default_instance();
  
  void Swap(WriteEnvelopeFromStringV1* other);
  
  // implements Message ----------------------------------------------
  
  WriteEnvelopeFromStringV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteEnvelopeFromStringV1& from);
  void MergeFrom(const WriteEnvelopeFromStringV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // repeated string data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data(int index) const;
  inline ::std::string* mutable_data(int index);
  inline void set_data(int index, const ::std::string& value);
  inline void set_data(int index, const char* value);
  inline void set_data(int index, const char* value, size_t size);
  inline ::std::string* add_data();
  inline void add_data(const ::std::string& value);
  inline void add_data(const char* value);
  inline void add_data(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_data();
  
  // optional bool acknowledge = 3 [default = true];
  inline bool has_acknowledge() const;
  inline void clear_acknowledge();
  static const int kAcknowledgeFieldNumber = 3;
  inline bool acknowledge() const;
  inline void set_acknowledge(bool value);
  
  // optional bool synchronous = 4 [default = false];
  inline bool has_synchronous() const;
  inline void clear_synchronous();
  static const int kSynchronousFieldNumber = 4;
  inline bool synchronous() const;
  inline void set_synchronous(bool value);
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 131;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.request.WriteEnvelopeFromStringV1)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_acknowledge();
  inline void clear_has_acknowledge();
  inline void set_has_synchronous();
  inline void clear_has_synchronous();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* path_;
  ::google::protobuf::RepeatedPtrField< ::std::string> data_;
  bool acknowledge_;
  bool synchronous_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2frequest_2eproto();
  
  void InitAsDefaultInstance();
  static WriteEnvelopeFromStringV1* default_instance_;
};
// -------------------------------------------------------------------

class SubscribeStoreChangesV1 : public ::google::protobuf::Message {
 public:
  SubscribeStoreChangesV1();
  virtual ~SubscribeStoreChangesV1();
  
  SubscribeStoreChangesV1(const SubscribeStoreChangesV1& from);
  
  inline SubscribeStoreChangesV1& operator=(const SubscribeStoreChangesV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeStoreChangesV1& default_instance();
  
  void Swap(SubscribeStoreChangesV1* other);
  
  // implements Message ----------------------------------------------
  
  SubscribeStoreChangesV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeStoreChangesV1& from);
  void MergeFrom(const SubscribeStoreChangesV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string path = 1;
  inline int path_size() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path(int index) const;
  inline ::std::string* mutable_path(int index);
  inline void set_path(int index, const ::std::string& value);
  inline void set_path(int index, const char* value);
  inline void set_path(int index, const char* value, size_t size);
  inline ::std::string* add_path();
  inline void add_path(const ::std::string& value);
  inline void add_path(const char* value);
  inline void add_path(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& path() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_path();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 80;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.request.SubscribeStoreChangesV1)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> path_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2frequest_2eproto();
  
  void InitAsDefaultInstance();
  static SubscribeStoreChangesV1* default_instance_;
};
// -------------------------------------------------------------------

class SubscribeEnvelopesV1 : public ::google::protobuf::Message {
 public:
  SubscribeEnvelopesV1();
  virtual ~SubscribeEnvelopesV1();
  
  SubscribeEnvelopesV1(const SubscribeEnvelopesV1& from);
  
  inline SubscribeEnvelopesV1& operator=(const SubscribeEnvelopesV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeEnvelopesV1& default_instance();
  
  void Swap(SubscribeEnvelopesV1* other);
  
  // implements Message ----------------------------------------------
  
  SubscribeEnvelopesV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeEnvelopesV1& from);
  void MergeFrom(const SubscribeEnvelopesV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string path = 1;
  inline int path_size() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path(int index) const;
  inline ::std::string* mutable_path(int index);
  inline void set_path(int index, const ::std::string& value);
  inline void set_path(int index, const char* value);
  inline void set_path(int index, const char* value, size_t size);
  inline ::std::string* add_path();
  inline void add_path(const ::std::string& value);
  inline void add_path(const char* value);
  inline void add_path(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& path() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_path();
  
  // optional string lua_code = 5;
  inline bool has_lua_code() const;
  inline void clear_lua_code();
  static const int kLuaCodeFieldNumber = 5;
  inline const ::std::string& lua_code() const;
  inline void set_lua_code(const ::std::string& value);
  inline void set_lua_code(const char* value);
  inline void set_lua_code(const char* value, size_t size);
  inline ::std::string* mutable_lua_code();
  inline ::std::string* release_lua_code();
  
  // repeated uint32 filter_namespace = 2 [packed = true];
  inline int filter_namespace_size() const;
  inline void clear_filter_namespace();
  static const int kFilterNamespaceFieldNumber = 2;
  inline ::google::protobuf::uint32 filter_namespace(int index) const;
  inline void set_filter_namespace(int index, ::google::protobuf::uint32 value);
  inline void add_filter_namespace(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      filter_namespace() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_filter_namespace();
  
  // repeated uint32 filter_enumeration_namespace = 3 [packed = true];
  inline int filter_enumeration_namespace_size() const;
  inline void clear_filter_enumeration_namespace();
  static const int kFilterEnumerationNamespaceFieldNumber = 3;
  inline ::google::protobuf::uint32 filter_enumeration_namespace(int index) const;
  inline void set_filter_enumeration_namespace(int index, ::google::protobuf::uint32 value);
  inline void add_filter_enumeration_namespace(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      filter_enumeration_namespace() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_filter_enumeration_namespace();
  
  // repeated uint32 filter_enumeration_type = 4 [packed = true];
  inline int filter_enumeration_type_size() const;
  inline void clear_filter_enumeration_type();
  static const int kFilterEnumerationTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 filter_enumeration_type(int index) const;
  inline void set_filter_enumeration_type(int index, ::google::protobuf::uint32 value);
  inline void add_filter_enumeration_type(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      filter_enumeration_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_filter_enumeration_type();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 81;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.request.SubscribeEnvelopesV1)
 private:
  inline void set_has_lua_code();
  inline void clear_has_lua_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> path_;
  ::std::string* lua_code_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > filter_namespace_;
  mutable int _filter_namespace_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > filter_enumeration_namespace_;
  mutable int _filter_enumeration_namespace_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > filter_enumeration_type_;
  mutable int _filter_enumeration_type_cached_byte_size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2frequest_2eproto();
  
  void InitAsDefaultInstance();
  static SubscribeEnvelopesV1* default_instance_;
};
// -------------------------------------------------------------------

class SubscribeKeepaliveV1 : public ::google::protobuf::Message {
 public:
  SubscribeKeepaliveV1();
  virtual ~SubscribeKeepaliveV1();
  
  SubscribeKeepaliveV1(const SubscribeKeepaliveV1& from);
  
  inline SubscribeKeepaliveV1& operator=(const SubscribeKeepaliveV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeKeepaliveV1& default_instance();
  
  void Swap(SubscribeKeepaliveV1* other);
  
  // implements Message ----------------------------------------------
  
  SubscribeKeepaliveV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeKeepaliveV1& from);
  void MergeFrom(const SubscribeKeepaliveV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated bytes id = 1;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id(int index) const;
  inline ::std::string* mutable_id(int index);
  inline void set_id(int index, const ::std::string& value);
  inline void set_id(int index, const char* value);
  inline void set_id(int index, const void* value, size_t size);
  inline ::std::string* add_id();
  inline void add_id(const ::std::string& value);
  inline void add_id(const char* value);
  inline void add_id(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 82;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.request.SubscribeKeepaliveV1)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2frequest_2eproto();
  
  void InitAsDefaultInstance();
  static SubscribeKeepaliveV1* default_instance_;
};
// -------------------------------------------------------------------

class SubscribeCancelV1 : public ::google::protobuf::Message {
 public:
  SubscribeCancelV1();
  virtual ~SubscribeCancelV1();
  
  SubscribeCancelV1(const SubscribeCancelV1& from);
  
  inline SubscribeCancelV1& operator=(const SubscribeCancelV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeCancelV1& default_instance();
  
  void Swap(SubscribeCancelV1* other);
  
  // implements Message ----------------------------------------------
  
  SubscribeCancelV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeCancelV1& from);
  void MergeFrom(const SubscribeCancelV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 83;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.request.SubscribeCancelV1)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2frequest_2eproto();
  
  void InitAsDefaultInstance();
  static SubscribeCancelV1* default_instance_;
};
// -------------------------------------------------------------------

class RegisterPluginV1 : public ::google::protobuf::Message {
 public:
  RegisterPluginV1();
  virtual ~RegisterPluginV1();
  
  RegisterPluginV1(const RegisterPluginV1& from);
  
  inline RegisterPluginV1& operator=(const RegisterPluginV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterPluginV1& default_instance();
  
  void Swap(RegisterPluginV1* other);
  
  // implements Message ----------------------------------------------
  
  RegisterPluginV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterPluginV1& from);
  void MergeFrom(const RegisterPluginV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string lua_code = 2;
  inline bool has_lua_code() const;
  inline void clear_lua_code();
  static const int kLuaCodeFieldNumber = 2;
  inline const ::std::string& lua_code() const;
  inline void set_lua_code(const ::std::string& value);
  inline void set_lua_code(const char* value);
  inline void set_lua_code(const char* value, size_t size);
  inline ::std::string* mutable_lua_code();
  inline ::std::string* release_lua_code();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 111;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.request.RegisterPluginV1)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_lua_code();
  inline void clear_has_lua_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* lua_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2frequest_2eproto();
  
  void InitAsDefaultInstance();
  static RegisterPluginV1* default_instance_;
};
// -------------------------------------------------------------------

class UnregisterPluginV1 : public ::google::protobuf::Message {
 public:
  UnregisterPluginV1();
  virtual ~UnregisterPluginV1();
  
  UnregisterPluginV1(const UnregisterPluginV1& from);
  
  inline UnregisterPluginV1& operator=(const UnregisterPluginV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnregisterPluginV1& default_instance();
  
  void Swap(UnregisterPluginV1* other);
  
  // implements Message ----------------------------------------------
  
  UnregisterPluginV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnregisterPluginV1& from);
  void MergeFrom(const UnregisterPluginV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 112;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.request.UnregisterPluginV1)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2frequest_2eproto();
  
  void InitAsDefaultInstance();
  static UnregisterPluginV1* default_instance_;
};
// -------------------------------------------------------------------

class GetPluginStatusV1 : public ::google::protobuf::Message {
 public:
  GetPluginStatusV1();
  virtual ~GetPluginStatusV1();
  
  GetPluginStatusV1(const GetPluginStatusV1& from);
  
  inline GetPluginStatusV1& operator=(const GetPluginStatusV1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPluginStatusV1& default_instance();
  
  void Swap(GetPluginStatusV1* other);
  
  // implements Message ----------------------------------------------
  
  GetPluginStatusV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPluginStatusV1& from);
  void MergeFrom(const GetPluginStatusV1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string name = 1;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name(int index) const;
  inline ::std::string* mutable_name(int index);
  inline void set_name(int index, const ::std::string& value);
  inline void set_name(int index, const char* value);
  inline void set_name(int index, const char* value, size_t size);
  inline ::std::string* add_name();
  inline void add_name(const ::std::string& value);
  inline void add_name(const char* value);
  inline void add_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 116;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.protocol.request.GetPluginStatusV1)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fprotocol_2frequest_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fprotocol_2frequest_2eproto();
  
  void InitAsDefaultInstance();
  static GetPluginStatusV1* default_instance_;
};
// ===================================================================


// ===================================================================

// PingV1

// -------------------------------------------------------------------

// GetFeaturesV1

// -------------------------------------------------------------------

// GetStoreInfoV1

// -------------------------------------------------------------------

// GetBucketInfoV1

// required string path = 1;
inline bool GetBucketInfoV1::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetBucketInfoV1::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetBucketInfoV1::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetBucketInfoV1::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& GetBucketInfoV1::path() const {
  return *path_;
}
inline void GetBucketInfoV1::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void GetBucketInfoV1::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void GetBucketInfoV1::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetBucketInfoV1::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* GetBucketInfoV1::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// GetStreamSetInfoV1

// required string path = 1;
inline bool GetStreamSetInfoV1::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetStreamSetInfoV1::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetStreamSetInfoV1::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetStreamSetInfoV1::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& GetStreamSetInfoV1::path() const {
  return *path_;
}
inline void GetStreamSetInfoV1::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void GetStreamSetInfoV1::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void GetStreamSetInfoV1::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetStreamSetInfoV1::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* GetStreamSetInfoV1::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// GetStreamInfoV1

// required string path = 1;
inline bool GetStreamInfoV1::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetStreamInfoV1::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetStreamInfoV1::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetStreamInfoV1::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& GetStreamInfoV1::path() const {
  return *path_;
}
inline void GetStreamInfoV1::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void GetStreamInfoV1::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void GetStreamInfoV1::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetStreamInfoV1::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* GetStreamInfoV1::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// GetStreamSegmentV1

// required string path = 1;
inline bool GetStreamSegmentV1::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetStreamSegmentV1::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetStreamSegmentV1::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetStreamSegmentV1::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& GetStreamSegmentV1::path() const {
  return *path_;
}
inline void GetStreamSegmentV1::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void GetStreamSegmentV1::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void GetStreamSegmentV1::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetStreamSegmentV1::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* GetStreamSegmentV1::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 start_offset = 2;
inline bool GetStreamSegmentV1::has_start_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetStreamSegmentV1::set_has_start_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetStreamSegmentV1::clear_has_start_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetStreamSegmentV1::clear_start_offset() {
  start_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_start_offset();
}
inline ::google::protobuf::uint64 GetStreamSegmentV1::start_offset() const {
  return start_offset_;
}
inline void GetStreamSegmentV1::set_start_offset(::google::protobuf::uint64 value) {
  set_has_start_offset();
  start_offset_ = value;
}

// optional uint32 max_response_bytes = 3;
inline bool GetStreamSegmentV1::has_max_response_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetStreamSegmentV1::set_has_max_response_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetStreamSegmentV1::clear_has_max_response_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetStreamSegmentV1::clear_max_response_bytes() {
  max_response_bytes_ = 0u;
  clear_has_max_response_bytes();
}
inline ::google::protobuf::uint32 GetStreamSegmentV1::max_response_bytes() const {
  return max_response_bytes_;
}
inline void GetStreamSegmentV1::set_max_response_bytes(::google::protobuf::uint32 value) {
  set_has_max_response_bytes();
  max_response_bytes_ = value;
}

// optional uint32 max_response_envelopes = 4;
inline bool GetStreamSegmentV1::has_max_response_envelopes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetStreamSegmentV1::set_has_max_response_envelopes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetStreamSegmentV1::clear_has_max_response_envelopes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetStreamSegmentV1::clear_max_response_envelopes() {
  max_response_envelopes_ = 0u;
  clear_has_max_response_envelopes();
}
inline ::google::protobuf::uint32 GetStreamSegmentV1::max_response_envelopes() const {
  return max_response_envelopes_;
}
inline void GetStreamSegmentV1::set_max_response_envelopes(::google::protobuf::uint32 value) {
  set_has_max_response_envelopes();
  max_response_envelopes_ = value;
}

// -------------------------------------------------------------------

// WriteEnvelopeV1

// required string path = 1;
inline bool WriteEnvelopeV1::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WriteEnvelopeV1::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WriteEnvelopeV1::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WriteEnvelopeV1::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& WriteEnvelopeV1::path() const {
  return *path_;
}
inline void WriteEnvelopeV1::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void WriteEnvelopeV1::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void WriteEnvelopeV1::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WriteEnvelopeV1::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* WriteEnvelopeV1::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated bytes envelope = 2;
inline int WriteEnvelopeV1::envelope_size() const {
  return envelope_.size();
}
inline void WriteEnvelopeV1::clear_envelope() {
  envelope_.Clear();
}
inline const ::std::string& WriteEnvelopeV1::envelope(int index) const {
  return envelope_.Get(index);
}
inline ::std::string* WriteEnvelopeV1::mutable_envelope(int index) {
  return envelope_.Mutable(index);
}
inline void WriteEnvelopeV1::set_envelope(int index, const ::std::string& value) {
  envelope_.Mutable(index)->assign(value);
}
inline void WriteEnvelopeV1::set_envelope(int index, const char* value) {
  envelope_.Mutable(index)->assign(value);
}
inline void WriteEnvelopeV1::set_envelope(int index, const void* value, size_t size) {
  envelope_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WriteEnvelopeV1::add_envelope() {
  return envelope_.Add();
}
inline void WriteEnvelopeV1::add_envelope(const ::std::string& value) {
  envelope_.Add()->assign(value);
}
inline void WriteEnvelopeV1::add_envelope(const char* value) {
  envelope_.Add()->assign(value);
}
inline void WriteEnvelopeV1::add_envelope(const void* value, size_t size) {
  envelope_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WriteEnvelopeV1::envelope() const {
  return envelope_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WriteEnvelopeV1::mutable_envelope() {
  return &envelope_;
}

// optional bool acknowledge = 3 [default = true];
inline bool WriteEnvelopeV1::has_acknowledge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WriteEnvelopeV1::set_has_acknowledge() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WriteEnvelopeV1::clear_has_acknowledge() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WriteEnvelopeV1::clear_acknowledge() {
  acknowledge_ = true;
  clear_has_acknowledge();
}
inline bool WriteEnvelopeV1::acknowledge() const {
  return acknowledge_;
}
inline void WriteEnvelopeV1::set_acknowledge(bool value) {
  set_has_acknowledge();
  acknowledge_ = value;
}

// optional bool synchronous = 4 [default = false];
inline bool WriteEnvelopeV1::has_synchronous() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WriteEnvelopeV1::set_has_synchronous() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WriteEnvelopeV1::clear_has_synchronous() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WriteEnvelopeV1::clear_synchronous() {
  synchronous_ = false;
  clear_has_synchronous();
}
inline bool WriteEnvelopeV1::synchronous() const {
  return synchronous_;
}
inline void WriteEnvelopeV1::set_synchronous(bool value) {
  set_has_synchronous();
  synchronous_ = value;
}

// -------------------------------------------------------------------

// WriteEnvelopeFromMessagesV1

// required string path = 1;
inline bool WriteEnvelopeFromMessagesV1::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WriteEnvelopeFromMessagesV1::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WriteEnvelopeFromMessagesV1::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WriteEnvelopeFromMessagesV1::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& WriteEnvelopeFromMessagesV1::path() const {
  return *path_;
}
inline void WriteEnvelopeFromMessagesV1::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void WriteEnvelopeFromMessagesV1::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void WriteEnvelopeFromMessagesV1::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WriteEnvelopeFromMessagesV1::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* WriteEnvelopeFromMessagesV1::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated bytes message = 2;
inline int WriteEnvelopeFromMessagesV1::message_size() const {
  return message_.size();
}
inline void WriteEnvelopeFromMessagesV1::clear_message() {
  message_.Clear();
}
inline const ::std::string& WriteEnvelopeFromMessagesV1::message(int index) const {
  return message_.Get(index);
}
inline ::std::string* WriteEnvelopeFromMessagesV1::mutable_message(int index) {
  return message_.Mutable(index);
}
inline void WriteEnvelopeFromMessagesV1::set_message(int index, const ::std::string& value) {
  message_.Mutable(index)->assign(value);
}
inline void WriteEnvelopeFromMessagesV1::set_message(int index, const char* value) {
  message_.Mutable(index)->assign(value);
}
inline void WriteEnvelopeFromMessagesV1::set_message(int index, const void* value, size_t size) {
  message_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WriteEnvelopeFromMessagesV1::add_message() {
  return message_.Add();
}
inline void WriteEnvelopeFromMessagesV1::add_message(const ::std::string& value) {
  message_.Add()->assign(value);
}
inline void WriteEnvelopeFromMessagesV1::add_message(const char* value) {
  message_.Add()->assign(value);
}
inline void WriteEnvelopeFromMessagesV1::add_message(const void* value, size_t size) {
  message_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WriteEnvelopeFromMessagesV1::message() const {
  return message_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WriteEnvelopeFromMessagesV1::mutable_message() {
  return &message_;
}

// repeated uint32 message_namespace = 3 [packed = true];
inline int WriteEnvelopeFromMessagesV1::message_namespace_size() const {
  return message_namespace_.size();
}
inline void WriteEnvelopeFromMessagesV1::clear_message_namespace() {
  message_namespace_.Clear();
}
inline ::google::protobuf::uint32 WriteEnvelopeFromMessagesV1::message_namespace(int index) const {
  return message_namespace_.Get(index);
}
inline void WriteEnvelopeFromMessagesV1::set_message_namespace(int index, ::google::protobuf::uint32 value) {
  message_namespace_.Set(index, value);
}
inline void WriteEnvelopeFromMessagesV1::add_message_namespace(::google::protobuf::uint32 value) {
  message_namespace_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
WriteEnvelopeFromMessagesV1::message_namespace() const {
  return message_namespace_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
WriteEnvelopeFromMessagesV1::mutable_message_namespace() {
  return &message_namespace_;
}

// repeated uint32 message_type = 4 [packed = true];
inline int WriteEnvelopeFromMessagesV1::message_type_size() const {
  return message_type_.size();
}
inline void WriteEnvelopeFromMessagesV1::clear_message_type() {
  message_type_.Clear();
}
inline ::google::protobuf::uint32 WriteEnvelopeFromMessagesV1::message_type(int index) const {
  return message_type_.Get(index);
}
inline void WriteEnvelopeFromMessagesV1::set_message_type(int index, ::google::protobuf::uint32 value) {
  message_type_.Set(index, value);
}
inline void WriteEnvelopeFromMessagesV1::add_message_type(::google::protobuf::uint32 value) {
  message_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
WriteEnvelopeFromMessagesV1::message_type() const {
  return message_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
WriteEnvelopeFromMessagesV1::mutable_message_type() {
  return &message_type_;
}

// -------------------------------------------------------------------

// WriteEnvelopeFromStringV1

// required string path = 1;
inline bool WriteEnvelopeFromStringV1::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WriteEnvelopeFromStringV1::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WriteEnvelopeFromStringV1::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WriteEnvelopeFromStringV1::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& WriteEnvelopeFromStringV1::path() const {
  return *path_;
}
inline void WriteEnvelopeFromStringV1::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void WriteEnvelopeFromStringV1::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void WriteEnvelopeFromStringV1::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WriteEnvelopeFromStringV1::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* WriteEnvelopeFromStringV1::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string data = 2;
inline int WriteEnvelopeFromStringV1::data_size() const {
  return data_.size();
}
inline void WriteEnvelopeFromStringV1::clear_data() {
  data_.Clear();
}
inline const ::std::string& WriteEnvelopeFromStringV1::data(int index) const {
  return data_.Get(index);
}
inline ::std::string* WriteEnvelopeFromStringV1::mutable_data(int index) {
  return data_.Mutable(index);
}
inline void WriteEnvelopeFromStringV1::set_data(int index, const ::std::string& value) {
  data_.Mutable(index)->assign(value);
}
inline void WriteEnvelopeFromStringV1::set_data(int index, const char* value) {
  data_.Mutable(index)->assign(value);
}
inline void WriteEnvelopeFromStringV1::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WriteEnvelopeFromStringV1::add_data() {
  return data_.Add();
}
inline void WriteEnvelopeFromStringV1::add_data(const ::std::string& value) {
  data_.Add()->assign(value);
}
inline void WriteEnvelopeFromStringV1::add_data(const char* value) {
  data_.Add()->assign(value);
}
inline void WriteEnvelopeFromStringV1::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WriteEnvelopeFromStringV1::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WriteEnvelopeFromStringV1::mutable_data() {
  return &data_;
}

// optional bool acknowledge = 3 [default = true];
inline bool WriteEnvelopeFromStringV1::has_acknowledge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WriteEnvelopeFromStringV1::set_has_acknowledge() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WriteEnvelopeFromStringV1::clear_has_acknowledge() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WriteEnvelopeFromStringV1::clear_acknowledge() {
  acknowledge_ = true;
  clear_has_acknowledge();
}
inline bool WriteEnvelopeFromStringV1::acknowledge() const {
  return acknowledge_;
}
inline void WriteEnvelopeFromStringV1::set_acknowledge(bool value) {
  set_has_acknowledge();
  acknowledge_ = value;
}

// optional bool synchronous = 4 [default = false];
inline bool WriteEnvelopeFromStringV1::has_synchronous() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WriteEnvelopeFromStringV1::set_has_synchronous() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WriteEnvelopeFromStringV1::clear_has_synchronous() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WriteEnvelopeFromStringV1::clear_synchronous() {
  synchronous_ = false;
  clear_has_synchronous();
}
inline bool WriteEnvelopeFromStringV1::synchronous() const {
  return synchronous_;
}
inline void WriteEnvelopeFromStringV1::set_synchronous(bool value) {
  set_has_synchronous();
  synchronous_ = value;
}

// -------------------------------------------------------------------

// SubscribeStoreChangesV1

// repeated string path = 1;
inline int SubscribeStoreChangesV1::path_size() const {
  return path_.size();
}
inline void SubscribeStoreChangesV1::clear_path() {
  path_.Clear();
}
inline const ::std::string& SubscribeStoreChangesV1::path(int index) const {
  return path_.Get(index);
}
inline ::std::string* SubscribeStoreChangesV1::mutable_path(int index) {
  return path_.Mutable(index);
}
inline void SubscribeStoreChangesV1::set_path(int index, const ::std::string& value) {
  path_.Mutable(index)->assign(value);
}
inline void SubscribeStoreChangesV1::set_path(int index, const char* value) {
  path_.Mutable(index)->assign(value);
}
inline void SubscribeStoreChangesV1::set_path(int index, const char* value, size_t size) {
  path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubscribeStoreChangesV1::add_path() {
  return path_.Add();
}
inline void SubscribeStoreChangesV1::add_path(const ::std::string& value) {
  path_.Add()->assign(value);
}
inline void SubscribeStoreChangesV1::add_path(const char* value) {
  path_.Add()->assign(value);
}
inline void SubscribeStoreChangesV1::add_path(const char* value, size_t size) {
  path_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SubscribeStoreChangesV1::path() const {
  return path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SubscribeStoreChangesV1::mutable_path() {
  return &path_;
}

// -------------------------------------------------------------------

// SubscribeEnvelopesV1

// repeated string path = 1;
inline int SubscribeEnvelopesV1::path_size() const {
  return path_.size();
}
inline void SubscribeEnvelopesV1::clear_path() {
  path_.Clear();
}
inline const ::std::string& SubscribeEnvelopesV1::path(int index) const {
  return path_.Get(index);
}
inline ::std::string* SubscribeEnvelopesV1::mutable_path(int index) {
  return path_.Mutable(index);
}
inline void SubscribeEnvelopesV1::set_path(int index, const ::std::string& value) {
  path_.Mutable(index)->assign(value);
}
inline void SubscribeEnvelopesV1::set_path(int index, const char* value) {
  path_.Mutable(index)->assign(value);
}
inline void SubscribeEnvelopesV1::set_path(int index, const char* value, size_t size) {
  path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubscribeEnvelopesV1::add_path() {
  return path_.Add();
}
inline void SubscribeEnvelopesV1::add_path(const ::std::string& value) {
  path_.Add()->assign(value);
}
inline void SubscribeEnvelopesV1::add_path(const char* value) {
  path_.Add()->assign(value);
}
inline void SubscribeEnvelopesV1::add_path(const char* value, size_t size) {
  path_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SubscribeEnvelopesV1::path() const {
  return path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SubscribeEnvelopesV1::mutable_path() {
  return &path_;
}

// optional string lua_code = 5;
inline bool SubscribeEnvelopesV1::has_lua_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubscribeEnvelopesV1::set_has_lua_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubscribeEnvelopesV1::clear_has_lua_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubscribeEnvelopesV1::clear_lua_code() {
  if (lua_code_ != &::google::protobuf::internal::kEmptyString) {
    lua_code_->clear();
  }
  clear_has_lua_code();
}
inline const ::std::string& SubscribeEnvelopesV1::lua_code() const {
  return *lua_code_;
}
inline void SubscribeEnvelopesV1::set_lua_code(const ::std::string& value) {
  set_has_lua_code();
  if (lua_code_ == &::google::protobuf::internal::kEmptyString) {
    lua_code_ = new ::std::string;
  }
  lua_code_->assign(value);
}
inline void SubscribeEnvelopesV1::set_lua_code(const char* value) {
  set_has_lua_code();
  if (lua_code_ == &::google::protobuf::internal::kEmptyString) {
    lua_code_ = new ::std::string;
  }
  lua_code_->assign(value);
}
inline void SubscribeEnvelopesV1::set_lua_code(const char* value, size_t size) {
  set_has_lua_code();
  if (lua_code_ == &::google::protobuf::internal::kEmptyString) {
    lua_code_ = new ::std::string;
  }
  lua_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubscribeEnvelopesV1::mutable_lua_code() {
  set_has_lua_code();
  if (lua_code_ == &::google::protobuf::internal::kEmptyString) {
    lua_code_ = new ::std::string;
  }
  return lua_code_;
}
inline ::std::string* SubscribeEnvelopesV1::release_lua_code() {
  clear_has_lua_code();
  if (lua_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lua_code_;
    lua_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated uint32 filter_namespace = 2 [packed = true];
inline int SubscribeEnvelopesV1::filter_namespace_size() const {
  return filter_namespace_.size();
}
inline void SubscribeEnvelopesV1::clear_filter_namespace() {
  filter_namespace_.Clear();
}
inline ::google::protobuf::uint32 SubscribeEnvelopesV1::filter_namespace(int index) const {
  return filter_namespace_.Get(index);
}
inline void SubscribeEnvelopesV1::set_filter_namespace(int index, ::google::protobuf::uint32 value) {
  filter_namespace_.Set(index, value);
}
inline void SubscribeEnvelopesV1::add_filter_namespace(::google::protobuf::uint32 value) {
  filter_namespace_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SubscribeEnvelopesV1::filter_namespace() const {
  return filter_namespace_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SubscribeEnvelopesV1::mutable_filter_namespace() {
  return &filter_namespace_;
}

// repeated uint32 filter_enumeration_namespace = 3 [packed = true];
inline int SubscribeEnvelopesV1::filter_enumeration_namespace_size() const {
  return filter_enumeration_namespace_.size();
}
inline void SubscribeEnvelopesV1::clear_filter_enumeration_namespace() {
  filter_enumeration_namespace_.Clear();
}
inline ::google::protobuf::uint32 SubscribeEnvelopesV1::filter_enumeration_namespace(int index) const {
  return filter_enumeration_namespace_.Get(index);
}
inline void SubscribeEnvelopesV1::set_filter_enumeration_namespace(int index, ::google::protobuf::uint32 value) {
  filter_enumeration_namespace_.Set(index, value);
}
inline void SubscribeEnvelopesV1::add_filter_enumeration_namespace(::google::protobuf::uint32 value) {
  filter_enumeration_namespace_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SubscribeEnvelopesV1::filter_enumeration_namespace() const {
  return filter_enumeration_namespace_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SubscribeEnvelopesV1::mutable_filter_enumeration_namespace() {
  return &filter_enumeration_namespace_;
}

// repeated uint32 filter_enumeration_type = 4 [packed = true];
inline int SubscribeEnvelopesV1::filter_enumeration_type_size() const {
  return filter_enumeration_type_.size();
}
inline void SubscribeEnvelopesV1::clear_filter_enumeration_type() {
  filter_enumeration_type_.Clear();
}
inline ::google::protobuf::uint32 SubscribeEnvelopesV1::filter_enumeration_type(int index) const {
  return filter_enumeration_type_.Get(index);
}
inline void SubscribeEnvelopesV1::set_filter_enumeration_type(int index, ::google::protobuf::uint32 value) {
  filter_enumeration_type_.Set(index, value);
}
inline void SubscribeEnvelopesV1::add_filter_enumeration_type(::google::protobuf::uint32 value) {
  filter_enumeration_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SubscribeEnvelopesV1::filter_enumeration_type() const {
  return filter_enumeration_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SubscribeEnvelopesV1::mutable_filter_enumeration_type() {
  return &filter_enumeration_type_;
}

// -------------------------------------------------------------------

// SubscribeKeepaliveV1

// repeated bytes id = 1;
inline int SubscribeKeepaliveV1::id_size() const {
  return id_.size();
}
inline void SubscribeKeepaliveV1::clear_id() {
  id_.Clear();
}
inline const ::std::string& SubscribeKeepaliveV1::id(int index) const {
  return id_.Get(index);
}
inline ::std::string* SubscribeKeepaliveV1::mutable_id(int index) {
  return id_.Mutable(index);
}
inline void SubscribeKeepaliveV1::set_id(int index, const ::std::string& value) {
  id_.Mutable(index)->assign(value);
}
inline void SubscribeKeepaliveV1::set_id(int index, const char* value) {
  id_.Mutable(index)->assign(value);
}
inline void SubscribeKeepaliveV1::set_id(int index, const void* value, size_t size) {
  id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubscribeKeepaliveV1::add_id() {
  return id_.Add();
}
inline void SubscribeKeepaliveV1::add_id(const ::std::string& value) {
  id_.Add()->assign(value);
}
inline void SubscribeKeepaliveV1::add_id(const char* value) {
  id_.Add()->assign(value);
}
inline void SubscribeKeepaliveV1::add_id(const void* value, size_t size) {
  id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SubscribeKeepaliveV1::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SubscribeKeepaliveV1::mutable_id() {
  return &id_;
}

// -------------------------------------------------------------------

// SubscribeCancelV1

// required bytes id = 1;
inline bool SubscribeCancelV1::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscribeCancelV1::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscribeCancelV1::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscribeCancelV1::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SubscribeCancelV1::id() const {
  return *id_;
}
inline void SubscribeCancelV1::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SubscribeCancelV1::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SubscribeCancelV1::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubscribeCancelV1::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SubscribeCancelV1::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RegisterPluginV1

// required string name = 1;
inline bool RegisterPluginV1::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterPluginV1::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterPluginV1::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterPluginV1::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RegisterPluginV1::name() const {
  return *name_;
}
inline void RegisterPluginV1::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RegisterPluginV1::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RegisterPluginV1::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterPluginV1::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RegisterPluginV1::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string lua_code = 2;
inline bool RegisterPluginV1::has_lua_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterPluginV1::set_has_lua_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterPluginV1::clear_has_lua_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterPluginV1::clear_lua_code() {
  if (lua_code_ != &::google::protobuf::internal::kEmptyString) {
    lua_code_->clear();
  }
  clear_has_lua_code();
}
inline const ::std::string& RegisterPluginV1::lua_code() const {
  return *lua_code_;
}
inline void RegisterPluginV1::set_lua_code(const ::std::string& value) {
  set_has_lua_code();
  if (lua_code_ == &::google::protobuf::internal::kEmptyString) {
    lua_code_ = new ::std::string;
  }
  lua_code_->assign(value);
}
inline void RegisterPluginV1::set_lua_code(const char* value) {
  set_has_lua_code();
  if (lua_code_ == &::google::protobuf::internal::kEmptyString) {
    lua_code_ = new ::std::string;
  }
  lua_code_->assign(value);
}
inline void RegisterPluginV1::set_lua_code(const char* value, size_t size) {
  set_has_lua_code();
  if (lua_code_ == &::google::protobuf::internal::kEmptyString) {
    lua_code_ = new ::std::string;
  }
  lua_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterPluginV1::mutable_lua_code() {
  set_has_lua_code();
  if (lua_code_ == &::google::protobuf::internal::kEmptyString) {
    lua_code_ = new ::std::string;
  }
  return lua_code_;
}
inline ::std::string* RegisterPluginV1::release_lua_code() {
  clear_has_lua_code();
  if (lua_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lua_code_;
    lua_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// UnregisterPluginV1

// required string name = 1;
inline bool UnregisterPluginV1::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnregisterPluginV1::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnregisterPluginV1::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnregisterPluginV1::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& UnregisterPluginV1::name() const {
  return *name_;
}
inline void UnregisterPluginV1::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UnregisterPluginV1::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UnregisterPluginV1::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnregisterPluginV1::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* UnregisterPluginV1::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// GetPluginStatusV1

// repeated string name = 1;
inline int GetPluginStatusV1::name_size() const {
  return name_.size();
}
inline void GetPluginStatusV1::clear_name() {
  name_.Clear();
}
inline const ::std::string& GetPluginStatusV1::name(int index) const {
  return name_.Get(index);
}
inline ::std::string* GetPluginStatusV1::mutable_name(int index) {
  return name_.Mutable(index);
}
inline void GetPluginStatusV1::set_name(int index, const ::std::string& value) {
  name_.Mutable(index)->assign(value);
}
inline void GetPluginStatusV1::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
}
inline void GetPluginStatusV1::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetPluginStatusV1::add_name() {
  return name_.Add();
}
inline void GetPluginStatusV1::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
}
inline void GetPluginStatusV1::add_name(const char* value) {
  name_.Add()->assign(value);
}
inline void GetPluginStatusV1::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetPluginStatusV1::name() const {
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetPluginStatusV1::mutable_name() {
  return &name_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace request
}  // namespace protocol
}  // namespace zippylog

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zippylog_2fprotocol_2frequest_2eproto__INCLUDED
