// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zippylog/zippylogd.proto

#ifndef PROTOBUF_zippylog_2fzippylogd_2eproto__INCLUDED
#define PROTOBUF_zippylog_2fzippylogd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <zippylog/envelope.hpp>
// @@protoc_insertion_point(includes)

namespace zippylog {
namespace zippylogd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();

class BrokerStartup;
class BrokerShutdown;
class BrokerReceiveClientMessage;
class BrokerFlushOutputStreams;
class StreamerStartup;
class StreamerShutdown;
class StreamerSubscriptionExpired;
class StreamerReceiveKeepalive;
class StreamerSubscriptionRenewedFromKeepalive;
class StreamerRejectKeepaliveUnknownSubscription;
class StreamerErrorRenewingSubscription;
class StoreWatcherStartup;
class StoreWatcherShutdown;

// ===================================================================

class BrokerStartup : public ::google::protobuf::Message {
 public:
  BrokerStartup();
  virtual ~BrokerStartup();
  
  BrokerStartup(const BrokerStartup& from);
  
  inline BrokerStartup& operator=(const BrokerStartup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrokerStartup& default_instance();
  
  void Swap(BrokerStartup* other);
  
  // implements Message ----------------------------------------------
  
  BrokerStartup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BrokerStartup& from);
  void MergeFrom(const BrokerStartup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  // optional string store_path = 2;
  inline bool has_store_path() const;
  inline void clear_store_path();
  static const int kStorePathFieldNumber = 2;
  inline const ::std::string& store_path() const;
  inline void set_store_path(const ::std::string& value);
  inline void set_store_path(const char* value);
  inline void set_store_path(const char* value, size_t size);
  inline ::std::string* mutable_store_path();
  
  // repeated string listen_endpoints = 3;
  inline int listen_endpoints_size() const;
  inline void clear_listen_endpoints();
  static const int kListenEndpointsFieldNumber = 3;
  inline const ::std::string& listen_endpoints(int index) const;
  inline ::std::string* mutable_listen_endpoints(int index);
  inline void set_listen_endpoints(int index, const ::std::string& value);
  inline void set_listen_endpoints(int index, const char* value);
  inline void set_listen_endpoints(int index, const char* value, size_t size);
  inline ::std::string* add_listen_endpoints();
  inline void add_listen_endpoints(const ::std::string& value);
  inline void add_listen_endpoints(const char* value);
  inline void add_listen_endpoints(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& listen_endpoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_listen_endpoints();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 12;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.BrokerStartup)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  ::std::string* store_path_;
  static const ::std::string _default_store_path_;
  ::google::protobuf::RepeatedPtrField< ::std::string> listen_endpoints_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BrokerStartup* default_instance_;
};
// -------------------------------------------------------------------

class BrokerShutdown : public ::google::protobuf::Message {
 public:
  BrokerShutdown();
  virtual ~BrokerShutdown();
  
  BrokerShutdown(const BrokerShutdown& from);
  
  inline BrokerShutdown& operator=(const BrokerShutdown& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrokerShutdown& default_instance();
  
  void Swap(BrokerShutdown* other);
  
  // implements Message ----------------------------------------------
  
  BrokerShutdown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BrokerShutdown& from);
  void MergeFrom(const BrokerShutdown& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 13;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.BrokerShutdown)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BrokerShutdown* default_instance_;
};
// -------------------------------------------------------------------

class BrokerReceiveClientMessage : public ::google::protobuf::Message {
 public:
  BrokerReceiveClientMessage();
  virtual ~BrokerReceiveClientMessage();
  
  BrokerReceiveClientMessage(const BrokerReceiveClientMessage& from);
  
  inline BrokerReceiveClientMessage& operator=(const BrokerReceiveClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrokerReceiveClientMessage& default_instance();
  
  void Swap(BrokerReceiveClientMessage* other);
  
  // implements Message ----------------------------------------------
  
  BrokerReceiveClientMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BrokerReceiveClientMessage& from);
  void MergeFrom(const BrokerReceiveClientMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 14;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.BrokerReceiveClientMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BrokerReceiveClientMessage* default_instance_;
};
// -------------------------------------------------------------------

class BrokerFlushOutputStreams : public ::google::protobuf::Message {
 public:
  BrokerFlushOutputStreams();
  virtual ~BrokerFlushOutputStreams();
  
  BrokerFlushOutputStreams(const BrokerFlushOutputStreams& from);
  
  inline BrokerFlushOutputStreams& operator=(const BrokerFlushOutputStreams& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrokerFlushOutputStreams& default_instance();
  
  void Swap(BrokerFlushOutputStreams* other);
  
  // implements Message ----------------------------------------------
  
  BrokerFlushOutputStreams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BrokerFlushOutputStreams& from);
  void MergeFrom(const BrokerFlushOutputStreams& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 53;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.BrokerFlushOutputStreams)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BrokerFlushOutputStreams* default_instance_;
};
// -------------------------------------------------------------------

class StreamerStartup : public ::google::protobuf::Message {
 public:
  StreamerStartup();
  virtual ~StreamerStartup();
  
  StreamerStartup(const StreamerStartup& from);
  
  inline StreamerStartup& operator=(const StreamerStartup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamerStartup& default_instance();
  
  void Swap(StreamerStartup* other);
  
  // implements Message ----------------------------------------------
  
  StreamerStartup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamerStartup& from);
  void MergeFrom(const StreamerStartup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 49;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.StreamerStartup)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StreamerStartup* default_instance_;
};
// -------------------------------------------------------------------

class StreamerShutdown : public ::google::protobuf::Message {
 public:
  StreamerShutdown();
  virtual ~StreamerShutdown();
  
  StreamerShutdown(const StreamerShutdown& from);
  
  inline StreamerShutdown& operator=(const StreamerShutdown& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamerShutdown& default_instance();
  
  void Swap(StreamerShutdown* other);
  
  // implements Message ----------------------------------------------
  
  StreamerShutdown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamerShutdown& from);
  void MergeFrom(const StreamerShutdown& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 50;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.StreamerShutdown)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StreamerShutdown* default_instance_;
};
// -------------------------------------------------------------------

class StreamerSubscriptionExpired : public ::google::protobuf::Message {
 public:
  StreamerSubscriptionExpired();
  virtual ~StreamerSubscriptionExpired();
  
  StreamerSubscriptionExpired(const StreamerSubscriptionExpired& from);
  
  inline StreamerSubscriptionExpired& operator=(const StreamerSubscriptionExpired& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamerSubscriptionExpired& default_instance();
  
  void Swap(StreamerSubscriptionExpired* other);
  
  // implements Message ----------------------------------------------
  
  StreamerSubscriptionExpired* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamerSubscriptionExpired& from);
  void MergeFrom(const StreamerSubscriptionExpired& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  // optional bytes subscription = 2;
  inline bool has_subscription() const;
  inline void clear_subscription();
  static const int kSubscriptionFieldNumber = 2;
  inline const ::std::string& subscription() const;
  inline void set_subscription(const ::std::string& value);
  inline void set_subscription(const char* value);
  inline void set_subscription(const void* value, size_t size);
  inline ::std::string* mutable_subscription();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 40;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.StreamerSubscriptionExpired)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  ::std::string* subscription_;
  static const ::std::string _default_subscription_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StreamerSubscriptionExpired* default_instance_;
};
// -------------------------------------------------------------------

class StreamerReceiveKeepalive : public ::google::protobuf::Message {
 public:
  StreamerReceiveKeepalive();
  virtual ~StreamerReceiveKeepalive();
  
  StreamerReceiveKeepalive(const StreamerReceiveKeepalive& from);
  
  inline StreamerReceiveKeepalive& operator=(const StreamerReceiveKeepalive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamerReceiveKeepalive& default_instance();
  
  void Swap(StreamerReceiveKeepalive* other);
  
  // implements Message ----------------------------------------------
  
  StreamerReceiveKeepalive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamerReceiveKeepalive& from);
  void MergeFrom(const StreamerReceiveKeepalive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  // optional bytes subscription = 2;
  inline bool has_subscription() const;
  inline void clear_subscription();
  static const int kSubscriptionFieldNumber = 2;
  inline const ::std::string& subscription() const;
  inline void set_subscription(const ::std::string& value);
  inline void set_subscription(const char* value);
  inline void set_subscription(const void* value, size_t size);
  inline ::std::string* mutable_subscription();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 41;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.StreamerReceiveKeepalive)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  ::std::string* subscription_;
  static const ::std::string _default_subscription_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StreamerReceiveKeepalive* default_instance_;
};
// -------------------------------------------------------------------

class StreamerSubscriptionRenewedFromKeepalive : public ::google::protobuf::Message {
 public:
  StreamerSubscriptionRenewedFromKeepalive();
  virtual ~StreamerSubscriptionRenewedFromKeepalive();
  
  StreamerSubscriptionRenewedFromKeepalive(const StreamerSubscriptionRenewedFromKeepalive& from);
  
  inline StreamerSubscriptionRenewedFromKeepalive& operator=(const StreamerSubscriptionRenewedFromKeepalive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamerSubscriptionRenewedFromKeepalive& default_instance();
  
  void Swap(StreamerSubscriptionRenewedFromKeepalive* other);
  
  // implements Message ----------------------------------------------
  
  StreamerSubscriptionRenewedFromKeepalive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamerSubscriptionRenewedFromKeepalive& from);
  void MergeFrom(const StreamerSubscriptionRenewedFromKeepalive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  // optional bytes subscription = 2;
  inline bool has_subscription() const;
  inline void clear_subscription();
  static const int kSubscriptionFieldNumber = 2;
  inline const ::std::string& subscription() const;
  inline void set_subscription(const ::std::string& value);
  inline void set_subscription(const char* value);
  inline void set_subscription(const void* value, size_t size);
  inline ::std::string* mutable_subscription();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 42;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.StreamerSubscriptionRenewedFromKeepalive)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  ::std::string* subscription_;
  static const ::std::string _default_subscription_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StreamerSubscriptionRenewedFromKeepalive* default_instance_;
};
// -------------------------------------------------------------------

class StreamerRejectKeepaliveUnknownSubscription : public ::google::protobuf::Message {
 public:
  StreamerRejectKeepaliveUnknownSubscription();
  virtual ~StreamerRejectKeepaliveUnknownSubscription();
  
  StreamerRejectKeepaliveUnknownSubscription(const StreamerRejectKeepaliveUnknownSubscription& from);
  
  inline StreamerRejectKeepaliveUnknownSubscription& operator=(const StreamerRejectKeepaliveUnknownSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamerRejectKeepaliveUnknownSubscription& default_instance();
  
  void Swap(StreamerRejectKeepaliveUnknownSubscription* other);
  
  // implements Message ----------------------------------------------
  
  StreamerRejectKeepaliveUnknownSubscription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamerRejectKeepaliveUnknownSubscription& from);
  void MergeFrom(const StreamerRejectKeepaliveUnknownSubscription& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  // optional bytes subscription = 2;
  inline bool has_subscription() const;
  inline void clear_subscription();
  static const int kSubscriptionFieldNumber = 2;
  inline const ::std::string& subscription() const;
  inline void set_subscription(const ::std::string& value);
  inline void set_subscription(const char* value);
  inline void set_subscription(const void* value, size_t size);
  inline ::std::string* mutable_subscription();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 43;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.StreamerRejectKeepaliveUnknownSubscription)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  ::std::string* subscription_;
  static const ::std::string _default_subscription_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StreamerRejectKeepaliveUnknownSubscription* default_instance_;
};
// -------------------------------------------------------------------

class StreamerErrorRenewingSubscription : public ::google::protobuf::Message {
 public:
  StreamerErrorRenewingSubscription();
  virtual ~StreamerErrorRenewingSubscription();
  
  StreamerErrorRenewingSubscription(const StreamerErrorRenewingSubscription& from);
  
  inline StreamerErrorRenewingSubscription& operator=(const StreamerErrorRenewingSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamerErrorRenewingSubscription& default_instance();
  
  void Swap(StreamerErrorRenewingSubscription* other);
  
  // implements Message ----------------------------------------------
  
  StreamerErrorRenewingSubscription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamerErrorRenewingSubscription& from);
  void MergeFrom(const StreamerErrorRenewingSubscription& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  // optional bytes subscription = 2;
  inline bool has_subscription() const;
  inline void clear_subscription();
  static const int kSubscriptionFieldNumber = 2;
  inline const ::std::string& subscription() const;
  inline void set_subscription(const ::std::string& value);
  inline void set_subscription(const char* value);
  inline void set_subscription(const void* value, size_t size);
  inline ::std::string* mutable_subscription();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 44;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.StreamerErrorRenewingSubscription)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  ::std::string* subscription_;
  static const ::std::string _default_subscription_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StreamerErrorRenewingSubscription* default_instance_;
};
// -------------------------------------------------------------------

class StoreWatcherStartup : public ::google::protobuf::Message {
 public:
  StoreWatcherStartup();
  virtual ~StoreWatcherStartup();
  
  StoreWatcherStartup(const StoreWatcherStartup& from);
  
  inline StoreWatcherStartup& operator=(const StoreWatcherStartup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreWatcherStartup& default_instance();
  
  void Swap(StoreWatcherStartup* other);
  
  // implements Message ----------------------------------------------
  
  StoreWatcherStartup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreWatcherStartup& from);
  void MergeFrom(const StoreWatcherStartup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 51;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.StoreWatcherStartup)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StoreWatcherStartup* default_instance_;
};
// -------------------------------------------------------------------

class StoreWatcherShutdown : public ::google::protobuf::Message {
 public:
  StoreWatcherShutdown();
  virtual ~StoreWatcherShutdown();
  
  StoreWatcherShutdown(const StoreWatcherShutdown& from);
  
  inline StoreWatcherShutdown& operator=(const StoreWatcherShutdown& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreWatcherShutdown& default_instance();
  
  void Swap(StoreWatcherShutdown* other);
  
  // implements Message ----------------------------------------------
  
  StoreWatcherShutdown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreWatcherShutdown& from);
  void MergeFrom(const StoreWatcherShutdown& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 52;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.StoreWatcherShutdown)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StoreWatcherShutdown* default_instance_;
};
// ===================================================================


// ===================================================================

// BrokerStartup

// optional bytes id = 1;
inline bool BrokerStartup::has_id() const {
  return _has_bit(0);
}
inline void BrokerStartup::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& BrokerStartup::id() const {
  return *id_;
}
inline void BrokerStartup::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BrokerStartup::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BrokerStartup::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BrokerStartup::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// optional string store_path = 2;
inline bool BrokerStartup::has_store_path() const {
  return _has_bit(1);
}
inline void BrokerStartup::clear_store_path() {
  if (store_path_ != &_default_store_path_) {
    store_path_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& BrokerStartup::store_path() const {
  return *store_path_;
}
inline void BrokerStartup::set_store_path(const ::std::string& value) {
  _set_bit(1);
  if (store_path_ == &_default_store_path_) {
    store_path_ = new ::std::string;
  }
  store_path_->assign(value);
}
inline void BrokerStartup::set_store_path(const char* value) {
  _set_bit(1);
  if (store_path_ == &_default_store_path_) {
    store_path_ = new ::std::string;
  }
  store_path_->assign(value);
}
inline void BrokerStartup::set_store_path(const char* value, size_t size) {
  _set_bit(1);
  if (store_path_ == &_default_store_path_) {
    store_path_ = new ::std::string;
  }
  store_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BrokerStartup::mutable_store_path() {
  _set_bit(1);
  if (store_path_ == &_default_store_path_) {
    store_path_ = new ::std::string;
  }
  return store_path_;
}

// repeated string listen_endpoints = 3;
inline int BrokerStartup::listen_endpoints_size() const {
  return listen_endpoints_.size();
}
inline void BrokerStartup::clear_listen_endpoints() {
  listen_endpoints_.Clear();
}
inline const ::std::string& BrokerStartup::listen_endpoints(int index) const {
  return listen_endpoints_.Get(index);
}
inline ::std::string* BrokerStartup::mutable_listen_endpoints(int index) {
  return listen_endpoints_.Mutable(index);
}
inline void BrokerStartup::set_listen_endpoints(int index, const ::std::string& value) {
  listen_endpoints_.Mutable(index)->assign(value);
}
inline void BrokerStartup::set_listen_endpoints(int index, const char* value) {
  listen_endpoints_.Mutable(index)->assign(value);
}
inline void BrokerStartup::set_listen_endpoints(int index, const char* value, size_t size) {
  listen_endpoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BrokerStartup::add_listen_endpoints() {
  return listen_endpoints_.Add();
}
inline void BrokerStartup::add_listen_endpoints(const ::std::string& value) {
  listen_endpoints_.Add()->assign(value);
}
inline void BrokerStartup::add_listen_endpoints(const char* value) {
  listen_endpoints_.Add()->assign(value);
}
inline void BrokerStartup::add_listen_endpoints(const char* value, size_t size) {
  listen_endpoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BrokerStartup::listen_endpoints() const {
  return listen_endpoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BrokerStartup::mutable_listen_endpoints() {
  return &listen_endpoints_;
}

// -------------------------------------------------------------------

// BrokerShutdown

// optional bytes id = 1;
inline bool BrokerShutdown::has_id() const {
  return _has_bit(0);
}
inline void BrokerShutdown::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& BrokerShutdown::id() const {
  return *id_;
}
inline void BrokerShutdown::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BrokerShutdown::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BrokerShutdown::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BrokerShutdown::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// BrokerReceiveClientMessage

// -------------------------------------------------------------------

// BrokerFlushOutputStreams

// optional bytes id = 1;
inline bool BrokerFlushOutputStreams::has_id() const {
  return _has_bit(0);
}
inline void BrokerFlushOutputStreams::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& BrokerFlushOutputStreams::id() const {
  return *id_;
}
inline void BrokerFlushOutputStreams::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BrokerFlushOutputStreams::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BrokerFlushOutputStreams::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BrokerFlushOutputStreams::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// StreamerStartup

// optional bytes id = 1;
inline bool StreamerStartup::has_id() const {
  return _has_bit(0);
}
inline void StreamerStartup::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& StreamerStartup::id() const {
  return *id_;
}
inline void StreamerStartup::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerStartup::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerStartup::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerStartup::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// StreamerShutdown

// optional bytes id = 1;
inline bool StreamerShutdown::has_id() const {
  return _has_bit(0);
}
inline void StreamerShutdown::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& StreamerShutdown::id() const {
  return *id_;
}
inline void StreamerShutdown::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerShutdown::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerShutdown::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerShutdown::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// StreamerSubscriptionExpired

// optional bytes id = 1;
inline bool StreamerSubscriptionExpired::has_id() const {
  return _has_bit(0);
}
inline void StreamerSubscriptionExpired::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& StreamerSubscriptionExpired::id() const {
  return *id_;
}
inline void StreamerSubscriptionExpired::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerSubscriptionExpired::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerSubscriptionExpired::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerSubscriptionExpired::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// optional bytes subscription = 2;
inline bool StreamerSubscriptionExpired::has_subscription() const {
  return _has_bit(1);
}
inline void StreamerSubscriptionExpired::clear_subscription() {
  if (subscription_ != &_default_subscription_) {
    subscription_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& StreamerSubscriptionExpired::subscription() const {
  return *subscription_;
}
inline void StreamerSubscriptionExpired::set_subscription(const ::std::string& value) {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void StreamerSubscriptionExpired::set_subscription(const char* value) {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void StreamerSubscriptionExpired::set_subscription(const void* value, size_t size) {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerSubscriptionExpired::mutable_subscription() {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  return subscription_;
}

// -------------------------------------------------------------------

// StreamerReceiveKeepalive

// optional bytes id = 1;
inline bool StreamerReceiveKeepalive::has_id() const {
  return _has_bit(0);
}
inline void StreamerReceiveKeepalive::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& StreamerReceiveKeepalive::id() const {
  return *id_;
}
inline void StreamerReceiveKeepalive::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerReceiveKeepalive::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerReceiveKeepalive::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerReceiveKeepalive::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// optional bytes subscription = 2;
inline bool StreamerReceiveKeepalive::has_subscription() const {
  return _has_bit(1);
}
inline void StreamerReceiveKeepalive::clear_subscription() {
  if (subscription_ != &_default_subscription_) {
    subscription_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& StreamerReceiveKeepalive::subscription() const {
  return *subscription_;
}
inline void StreamerReceiveKeepalive::set_subscription(const ::std::string& value) {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void StreamerReceiveKeepalive::set_subscription(const char* value) {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void StreamerReceiveKeepalive::set_subscription(const void* value, size_t size) {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerReceiveKeepalive::mutable_subscription() {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  return subscription_;
}

// -------------------------------------------------------------------

// StreamerSubscriptionRenewedFromKeepalive

// optional bytes id = 1;
inline bool StreamerSubscriptionRenewedFromKeepalive::has_id() const {
  return _has_bit(0);
}
inline void StreamerSubscriptionRenewedFromKeepalive::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& StreamerSubscriptionRenewedFromKeepalive::id() const {
  return *id_;
}
inline void StreamerSubscriptionRenewedFromKeepalive::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerSubscriptionRenewedFromKeepalive::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerSubscriptionRenewedFromKeepalive::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerSubscriptionRenewedFromKeepalive::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// optional bytes subscription = 2;
inline bool StreamerSubscriptionRenewedFromKeepalive::has_subscription() const {
  return _has_bit(1);
}
inline void StreamerSubscriptionRenewedFromKeepalive::clear_subscription() {
  if (subscription_ != &_default_subscription_) {
    subscription_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& StreamerSubscriptionRenewedFromKeepalive::subscription() const {
  return *subscription_;
}
inline void StreamerSubscriptionRenewedFromKeepalive::set_subscription(const ::std::string& value) {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void StreamerSubscriptionRenewedFromKeepalive::set_subscription(const char* value) {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void StreamerSubscriptionRenewedFromKeepalive::set_subscription(const void* value, size_t size) {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerSubscriptionRenewedFromKeepalive::mutable_subscription() {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  return subscription_;
}

// -------------------------------------------------------------------

// StreamerRejectKeepaliveUnknownSubscription

// optional bytes id = 1;
inline bool StreamerRejectKeepaliveUnknownSubscription::has_id() const {
  return _has_bit(0);
}
inline void StreamerRejectKeepaliveUnknownSubscription::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& StreamerRejectKeepaliveUnknownSubscription::id() const {
  return *id_;
}
inline void StreamerRejectKeepaliveUnknownSubscription::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerRejectKeepaliveUnknownSubscription::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerRejectKeepaliveUnknownSubscription::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerRejectKeepaliveUnknownSubscription::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// optional bytes subscription = 2;
inline bool StreamerRejectKeepaliveUnknownSubscription::has_subscription() const {
  return _has_bit(1);
}
inline void StreamerRejectKeepaliveUnknownSubscription::clear_subscription() {
  if (subscription_ != &_default_subscription_) {
    subscription_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& StreamerRejectKeepaliveUnknownSubscription::subscription() const {
  return *subscription_;
}
inline void StreamerRejectKeepaliveUnknownSubscription::set_subscription(const ::std::string& value) {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void StreamerRejectKeepaliveUnknownSubscription::set_subscription(const char* value) {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void StreamerRejectKeepaliveUnknownSubscription::set_subscription(const void* value, size_t size) {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerRejectKeepaliveUnknownSubscription::mutable_subscription() {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  return subscription_;
}

// -------------------------------------------------------------------

// StreamerErrorRenewingSubscription

// optional bytes id = 1;
inline bool StreamerErrorRenewingSubscription::has_id() const {
  return _has_bit(0);
}
inline void StreamerErrorRenewingSubscription::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& StreamerErrorRenewingSubscription::id() const {
  return *id_;
}
inline void StreamerErrorRenewingSubscription::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerErrorRenewingSubscription::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerErrorRenewingSubscription::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerErrorRenewingSubscription::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// optional bytes subscription = 2;
inline bool StreamerErrorRenewingSubscription::has_subscription() const {
  return _has_bit(1);
}
inline void StreamerErrorRenewingSubscription::clear_subscription() {
  if (subscription_ != &_default_subscription_) {
    subscription_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& StreamerErrorRenewingSubscription::subscription() const {
  return *subscription_;
}
inline void StreamerErrorRenewingSubscription::set_subscription(const ::std::string& value) {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void StreamerErrorRenewingSubscription::set_subscription(const char* value) {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void StreamerErrorRenewingSubscription::set_subscription(const void* value, size_t size) {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerErrorRenewingSubscription::mutable_subscription() {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  return subscription_;
}

// -------------------------------------------------------------------

// StoreWatcherStartup

// optional bytes id = 1;
inline bool StoreWatcherStartup::has_id() const {
  return _has_bit(0);
}
inline void StoreWatcherStartup::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& StoreWatcherStartup::id() const {
  return *id_;
}
inline void StoreWatcherStartup::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StoreWatcherStartup::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StoreWatcherStartup::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreWatcherStartup::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// StoreWatcherShutdown

// optional bytes id = 1;
inline bool StoreWatcherShutdown::has_id() const {
  return _has_bit(0);
}
inline void StoreWatcherShutdown::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& StoreWatcherShutdown::id() const {
  return *id_;
}
inline void StoreWatcherShutdown::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StoreWatcherShutdown::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StoreWatcherShutdown::set_id(const void* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreWatcherShutdown::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace zippylogd
}  // namespace zippylog

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zippylog_2fzippylogd_2eproto__INCLUDED
