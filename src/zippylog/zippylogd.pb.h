// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zippylog/zippylogd.proto

#ifndef PROTOBUF_zippylog_2fzippylogd_2eproto__INCLUDED
#define PROTOBUF_zippylog_2fzippylogd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <zippylog/envelope.hpp>
// @@protoc_insertion_point(includes)

namespace zippylog {
namespace zippylogd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();

class BrokerStartup;
class BrokerShutdown;
class BrokerReceiveClientMessage;
class WorkerStartup;
class WorkerShutdown;
class WorkerFailReceiveMessage;
class WorkerReceiveEmptyMessage;
class WorkerReceiveUnknownRequestType;
class WorkerRequestParseFailure;
class WorkerRequestEmptyEnvelope;
class WorkerInvalidMessageEnumeration;
class WorkerBeginProcessStoreInfo;
class WorkerEndProcessStoreInfo;
class WorkerReceiveInvalidGet;
class WorkerGetInvalidStream;
class WorkerGetInvalidOffset;
class WorkerBeginProcessGet;
class WorkerEndProcessGet;
class WorkerSendErrorResponse;
class WorkerForwardSubscribeKeepalive;
class StreamerStartup;
class StreamerShutdown;
class StreamerSubscriptionExpired;
class StreamerReceiveKeepalive;
class StreamerSubscriptionRenewedFromKeepalive;
class StreamerRejectKeepaliveUnknownSubscription;
class StreamerErrorRenewingSubscription;

// ===================================================================

class BrokerStartup : public ::google::protobuf::Message {
 public:
  BrokerStartup();
  virtual ~BrokerStartup();
  
  BrokerStartup(const BrokerStartup& from);
  
  inline BrokerStartup& operator=(const BrokerStartup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrokerStartup& default_instance();
  
  void Swap(BrokerStartup* other);
  
  // implements Message ----------------------------------------------
  
  BrokerStartup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BrokerStartup& from);
  void MergeFrom(const BrokerStartup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string store_path = 1;
  inline bool has_store_path() const;
  inline void clear_store_path();
  static const int kStorePathFieldNumber = 1;
  inline const ::std::string& store_path() const;
  inline void set_store_path(const ::std::string& value);
  inline void set_store_path(const char* value);
  inline void set_store_path(const char* value, size_t size);
  inline ::std::string* mutable_store_path();
  
  // repeated string listen_endpoints = 2;
  inline int listen_endpoints_size() const;
  inline void clear_listen_endpoints();
  static const int kListenEndpointsFieldNumber = 2;
  inline const ::std::string& listen_endpoints(int index) const;
  inline ::std::string* mutable_listen_endpoints(int index);
  inline void set_listen_endpoints(int index, const ::std::string& value);
  inline void set_listen_endpoints(int index, const char* value);
  inline void set_listen_endpoints(int index, const char* value, size_t size);
  inline ::std::string* add_listen_endpoints();
  inline void add_listen_endpoints(const ::std::string& value);
  inline void add_listen_endpoints(const char* value);
  inline void add_listen_endpoints(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& listen_endpoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_listen_endpoints();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 12;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.BrokerStartup)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* store_path_;
  static const ::std::string _default_store_path_;
  ::google::protobuf::RepeatedPtrField< ::std::string> listen_endpoints_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BrokerStartup* default_instance_;
};
// -------------------------------------------------------------------

class BrokerShutdown : public ::google::protobuf::Message {
 public:
  BrokerShutdown();
  virtual ~BrokerShutdown();
  
  BrokerShutdown(const BrokerShutdown& from);
  
  inline BrokerShutdown& operator=(const BrokerShutdown& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrokerShutdown& default_instance();
  
  void Swap(BrokerShutdown* other);
  
  // implements Message ----------------------------------------------
  
  BrokerShutdown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BrokerShutdown& from);
  void MergeFrom(const BrokerShutdown& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 13;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.BrokerShutdown)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BrokerShutdown* default_instance_;
};
// -------------------------------------------------------------------

class BrokerReceiveClientMessage : public ::google::protobuf::Message {
 public:
  BrokerReceiveClientMessage();
  virtual ~BrokerReceiveClientMessage();
  
  BrokerReceiveClientMessage(const BrokerReceiveClientMessage& from);
  
  inline BrokerReceiveClientMessage& operator=(const BrokerReceiveClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrokerReceiveClientMessage& default_instance();
  
  void Swap(BrokerReceiveClientMessage* other);
  
  // implements Message ----------------------------------------------
  
  BrokerReceiveClientMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BrokerReceiveClientMessage& from);
  void MergeFrom(const BrokerReceiveClientMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 14;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.BrokerReceiveClientMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BrokerReceiveClientMessage* default_instance_;
};
// -------------------------------------------------------------------

class WorkerStartup : public ::google::protobuf::Message {
 public:
  WorkerStartup();
  virtual ~WorkerStartup();
  
  WorkerStartup(const WorkerStartup& from);
  
  inline WorkerStartup& operator=(const WorkerStartup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerStartup& default_instance();
  
  void Swap(WorkerStartup* other);
  
  // implements Message ----------------------------------------------
  
  WorkerStartup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerStartup& from);
  void MergeFrom(const WorkerStartup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes worker = 1;
  inline bool has_worker() const;
  inline void clear_worker();
  static const int kWorkerFieldNumber = 1;
  inline const ::std::string& worker() const;
  inline void set_worker(const ::std::string& value);
  inline void set_worker(const char* value);
  inline void set_worker(const void* value, size_t size);
  inline ::std::string* mutable_worker();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 45;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.WorkerStartup)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* worker_;
  static const ::std::string _default_worker_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerStartup* default_instance_;
};
// -------------------------------------------------------------------

class WorkerShutdown : public ::google::protobuf::Message {
 public:
  WorkerShutdown();
  virtual ~WorkerShutdown();
  
  WorkerShutdown(const WorkerShutdown& from);
  
  inline WorkerShutdown& operator=(const WorkerShutdown& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerShutdown& default_instance();
  
  void Swap(WorkerShutdown* other);
  
  // implements Message ----------------------------------------------
  
  WorkerShutdown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerShutdown& from);
  void MergeFrom(const WorkerShutdown& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes worker = 1;
  inline bool has_worker() const;
  inline void clear_worker();
  static const int kWorkerFieldNumber = 1;
  inline const ::std::string& worker() const;
  inline void set_worker(const ::std::string& value);
  inline void set_worker(const char* value);
  inline void set_worker(const void* value, size_t size);
  inline ::std::string* mutable_worker();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 46;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.WorkerShutdown)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* worker_;
  static const ::std::string _default_worker_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerShutdown* default_instance_;
};
// -------------------------------------------------------------------

class WorkerFailReceiveMessage : public ::google::protobuf::Message {
 public:
  WorkerFailReceiveMessage();
  virtual ~WorkerFailReceiveMessage();
  
  WorkerFailReceiveMessage(const WorkerFailReceiveMessage& from);
  
  inline WorkerFailReceiveMessage& operator=(const WorkerFailReceiveMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerFailReceiveMessage& default_instance();
  
  void Swap(WorkerFailReceiveMessage* other);
  
  // implements Message ----------------------------------------------
  
  WorkerFailReceiveMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerFailReceiveMessage& from);
  void MergeFrom(const WorkerFailReceiveMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes worker = 1;
  inline bool has_worker() const;
  inline void clear_worker();
  static const int kWorkerFieldNumber = 1;
  inline const ::std::string& worker() const;
  inline void set_worker(const ::std::string& value);
  inline void set_worker(const char* value);
  inline void set_worker(const void* value, size_t size);
  inline ::std::string* mutable_worker();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 27;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.WorkerFailReceiveMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* worker_;
  static const ::std::string _default_worker_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerFailReceiveMessage* default_instance_;
};
// -------------------------------------------------------------------

class WorkerReceiveEmptyMessage : public ::google::protobuf::Message {
 public:
  WorkerReceiveEmptyMessage();
  virtual ~WorkerReceiveEmptyMessage();
  
  WorkerReceiveEmptyMessage(const WorkerReceiveEmptyMessage& from);
  
  inline WorkerReceiveEmptyMessage& operator=(const WorkerReceiveEmptyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerReceiveEmptyMessage& default_instance();
  
  void Swap(WorkerReceiveEmptyMessage* other);
  
  // implements Message ----------------------------------------------
  
  WorkerReceiveEmptyMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerReceiveEmptyMessage& from);
  void MergeFrom(const WorkerReceiveEmptyMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes worker = 1;
  inline bool has_worker() const;
  inline void clear_worker();
  static const int kWorkerFieldNumber = 1;
  inline const ::std::string& worker() const;
  inline void set_worker(const ::std::string& value);
  inline void set_worker(const char* value);
  inline void set_worker(const void* value, size_t size);
  inline ::std::string* mutable_worker();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 28;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.WorkerReceiveEmptyMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* worker_;
  static const ::std::string _default_worker_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerReceiveEmptyMessage* default_instance_;
};
// -------------------------------------------------------------------

class WorkerReceiveUnknownRequestType : public ::google::protobuf::Message {
 public:
  WorkerReceiveUnknownRequestType();
  virtual ~WorkerReceiveUnknownRequestType();
  
  WorkerReceiveUnknownRequestType(const WorkerReceiveUnknownRequestType& from);
  
  inline WorkerReceiveUnknownRequestType& operator=(const WorkerReceiveUnknownRequestType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerReceiveUnknownRequestType& default_instance();
  
  void Swap(WorkerReceiveUnknownRequestType* other);
  
  // implements Message ----------------------------------------------
  
  WorkerReceiveUnknownRequestType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerReceiveUnknownRequestType& from);
  void MergeFrom(const WorkerReceiveUnknownRequestType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes worker = 1;
  inline bool has_worker() const;
  inline void clear_worker();
  static const int kWorkerFieldNumber = 1;
  inline const ::std::string& worker() const;
  inline void set_worker(const ::std::string& value);
  inline void set_worker(const char* value);
  inline void set_worker(const void* value, size_t size);
  inline ::std::string* mutable_worker();
  
  // optional uint32 enumeration = 2;
  inline bool has_enumeration() const;
  inline void clear_enumeration();
  static const int kEnumerationFieldNumber = 2;
  inline ::google::protobuf::uint32 enumeration() const;
  inline void set_enumeration(::google::protobuf::uint32 value);
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 47;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.WorkerReceiveUnknownRequestType)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* worker_;
  static const ::std::string _default_worker_;
  ::google::protobuf::uint32 enumeration_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerReceiveUnknownRequestType* default_instance_;
};
// -------------------------------------------------------------------

class WorkerRequestParseFailure : public ::google::protobuf::Message {
 public:
  WorkerRequestParseFailure();
  virtual ~WorkerRequestParseFailure();
  
  WorkerRequestParseFailure(const WorkerRequestParseFailure& from);
  
  inline WorkerRequestParseFailure& operator=(const WorkerRequestParseFailure& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerRequestParseFailure& default_instance();
  
  void Swap(WorkerRequestParseFailure* other);
  
  // implements Message ----------------------------------------------
  
  WorkerRequestParseFailure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerRequestParseFailure& from);
  void MergeFrom(const WorkerRequestParseFailure& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes worker = 1;
  inline bool has_worker() const;
  inline void clear_worker();
  static const int kWorkerFieldNumber = 1;
  inline const ::std::string& worker() const;
  inline void set_worker(const ::std::string& value);
  inline void set_worker(const char* value);
  inline void set_worker(const void* value, size_t size);
  inline ::std::string* mutable_worker();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 29;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.WorkerRequestParseFailure)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* worker_;
  static const ::std::string _default_worker_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerRequestParseFailure* default_instance_;
};
// -------------------------------------------------------------------

class WorkerRequestEmptyEnvelope : public ::google::protobuf::Message {
 public:
  WorkerRequestEmptyEnvelope();
  virtual ~WorkerRequestEmptyEnvelope();
  
  WorkerRequestEmptyEnvelope(const WorkerRequestEmptyEnvelope& from);
  
  inline WorkerRequestEmptyEnvelope& operator=(const WorkerRequestEmptyEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerRequestEmptyEnvelope& default_instance();
  
  void Swap(WorkerRequestEmptyEnvelope* other);
  
  // implements Message ----------------------------------------------
  
  WorkerRequestEmptyEnvelope* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerRequestEmptyEnvelope& from);
  void MergeFrom(const WorkerRequestEmptyEnvelope& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes worker = 1;
  inline bool has_worker() const;
  inline void clear_worker();
  static const int kWorkerFieldNumber = 1;
  inline const ::std::string& worker() const;
  inline void set_worker(const ::std::string& value);
  inline void set_worker(const char* value);
  inline void set_worker(const void* value, size_t size);
  inline ::std::string* mutable_worker();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 30;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.WorkerRequestEmptyEnvelope)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* worker_;
  static const ::std::string _default_worker_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerRequestEmptyEnvelope* default_instance_;
};
// -------------------------------------------------------------------

class WorkerInvalidMessageEnumeration : public ::google::protobuf::Message {
 public:
  WorkerInvalidMessageEnumeration();
  virtual ~WorkerInvalidMessageEnumeration();
  
  WorkerInvalidMessageEnumeration(const WorkerInvalidMessageEnumeration& from);
  
  inline WorkerInvalidMessageEnumeration& operator=(const WorkerInvalidMessageEnumeration& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerInvalidMessageEnumeration& default_instance();
  
  void Swap(WorkerInvalidMessageEnumeration* other);
  
  // implements Message ----------------------------------------------
  
  WorkerInvalidMessageEnumeration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerInvalidMessageEnumeration& from);
  void MergeFrom(const WorkerInvalidMessageEnumeration& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes worker = 1;
  inline bool has_worker() const;
  inline void clear_worker();
  static const int kWorkerFieldNumber = 1;
  inline const ::std::string& worker() const;
  inline void set_worker(const ::std::string& value);
  inline void set_worker(const char* value);
  inline void set_worker(const void* value, size_t size);
  inline ::std::string* mutable_worker();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 31;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.WorkerInvalidMessageEnumeration)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* worker_;
  static const ::std::string _default_worker_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerInvalidMessageEnumeration* default_instance_;
};
// -------------------------------------------------------------------

class WorkerBeginProcessStoreInfo : public ::google::protobuf::Message {
 public:
  WorkerBeginProcessStoreInfo();
  virtual ~WorkerBeginProcessStoreInfo();
  
  WorkerBeginProcessStoreInfo(const WorkerBeginProcessStoreInfo& from);
  
  inline WorkerBeginProcessStoreInfo& operator=(const WorkerBeginProcessStoreInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerBeginProcessStoreInfo& default_instance();
  
  void Swap(WorkerBeginProcessStoreInfo* other);
  
  // implements Message ----------------------------------------------
  
  WorkerBeginProcessStoreInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerBeginProcessStoreInfo& from);
  void MergeFrom(const WorkerBeginProcessStoreInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes worker = 1;
  inline bool has_worker() const;
  inline void clear_worker();
  static const int kWorkerFieldNumber = 1;
  inline const ::std::string& worker() const;
  inline void set_worker(const ::std::string& value);
  inline void set_worker(const char* value);
  inline void set_worker(const void* value, size_t size);
  inline ::std::string* mutable_worker();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 32;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.WorkerBeginProcessStoreInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* worker_;
  static const ::std::string _default_worker_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerBeginProcessStoreInfo* default_instance_;
};
// -------------------------------------------------------------------

class WorkerEndProcessStoreInfo : public ::google::protobuf::Message {
 public:
  WorkerEndProcessStoreInfo();
  virtual ~WorkerEndProcessStoreInfo();
  
  WorkerEndProcessStoreInfo(const WorkerEndProcessStoreInfo& from);
  
  inline WorkerEndProcessStoreInfo& operator=(const WorkerEndProcessStoreInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerEndProcessStoreInfo& default_instance();
  
  void Swap(WorkerEndProcessStoreInfo* other);
  
  // implements Message ----------------------------------------------
  
  WorkerEndProcessStoreInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerEndProcessStoreInfo& from);
  void MergeFrom(const WorkerEndProcessStoreInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes worker = 1;
  inline bool has_worker() const;
  inline void clear_worker();
  static const int kWorkerFieldNumber = 1;
  inline const ::std::string& worker() const;
  inline void set_worker(const ::std::string& value);
  inline void set_worker(const char* value);
  inline void set_worker(const void* value, size_t size);
  inline ::std::string* mutable_worker();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 33;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.WorkerEndProcessStoreInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* worker_;
  static const ::std::string _default_worker_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerEndProcessStoreInfo* default_instance_;
};
// -------------------------------------------------------------------

class WorkerReceiveInvalidGet : public ::google::protobuf::Message {
 public:
  WorkerReceiveInvalidGet();
  virtual ~WorkerReceiveInvalidGet();
  
  WorkerReceiveInvalidGet(const WorkerReceiveInvalidGet& from);
  
  inline WorkerReceiveInvalidGet& operator=(const WorkerReceiveInvalidGet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerReceiveInvalidGet& default_instance();
  
  void Swap(WorkerReceiveInvalidGet* other);
  
  // implements Message ----------------------------------------------
  
  WorkerReceiveInvalidGet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerReceiveInvalidGet& from);
  void MergeFrom(const WorkerReceiveInvalidGet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes worker = 1;
  inline bool has_worker() const;
  inline void clear_worker();
  static const int kWorkerFieldNumber = 1;
  inline const ::std::string& worker() const;
  inline void set_worker(const ::std::string& value);
  inline void set_worker(const char* value);
  inline void set_worker(const void* value, size_t size);
  inline ::std::string* mutable_worker();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 34;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.WorkerReceiveInvalidGet)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* worker_;
  static const ::std::string _default_worker_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerReceiveInvalidGet* default_instance_;
};
// -------------------------------------------------------------------

class WorkerGetInvalidStream : public ::google::protobuf::Message {
 public:
  WorkerGetInvalidStream();
  virtual ~WorkerGetInvalidStream();
  
  WorkerGetInvalidStream(const WorkerGetInvalidStream& from);
  
  inline WorkerGetInvalidStream& operator=(const WorkerGetInvalidStream& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerGetInvalidStream& default_instance();
  
  void Swap(WorkerGetInvalidStream* other);
  
  // implements Message ----------------------------------------------
  
  WorkerGetInvalidStream* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerGetInvalidStream& from);
  void MergeFrom(const WorkerGetInvalidStream& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes worker = 1;
  inline bool has_worker() const;
  inline void clear_worker();
  static const int kWorkerFieldNumber = 1;
  inline const ::std::string& worker() const;
  inline void set_worker(const ::std::string& value);
  inline void set_worker(const char* value);
  inline void set_worker(const void* value, size_t size);
  inline ::std::string* mutable_worker();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 35;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.WorkerGetInvalidStream)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* worker_;
  static const ::std::string _default_worker_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerGetInvalidStream* default_instance_;
};
// -------------------------------------------------------------------

class WorkerGetInvalidOffset : public ::google::protobuf::Message {
 public:
  WorkerGetInvalidOffset();
  virtual ~WorkerGetInvalidOffset();
  
  WorkerGetInvalidOffset(const WorkerGetInvalidOffset& from);
  
  inline WorkerGetInvalidOffset& operator=(const WorkerGetInvalidOffset& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerGetInvalidOffset& default_instance();
  
  void Swap(WorkerGetInvalidOffset* other);
  
  // implements Message ----------------------------------------------
  
  WorkerGetInvalidOffset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerGetInvalidOffset& from);
  void MergeFrom(const WorkerGetInvalidOffset& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes worker = 1;
  inline bool has_worker() const;
  inline void clear_worker();
  static const int kWorkerFieldNumber = 1;
  inline const ::std::string& worker() const;
  inline void set_worker(const ::std::string& value);
  inline void set_worker(const char* value);
  inline void set_worker(const void* value, size_t size);
  inline ::std::string* mutable_worker();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 36;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.WorkerGetInvalidOffset)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* worker_;
  static const ::std::string _default_worker_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerGetInvalidOffset* default_instance_;
};
// -------------------------------------------------------------------

class WorkerBeginProcessGet : public ::google::protobuf::Message {
 public:
  WorkerBeginProcessGet();
  virtual ~WorkerBeginProcessGet();
  
  WorkerBeginProcessGet(const WorkerBeginProcessGet& from);
  
  inline WorkerBeginProcessGet& operator=(const WorkerBeginProcessGet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerBeginProcessGet& default_instance();
  
  void Swap(WorkerBeginProcessGet* other);
  
  // implements Message ----------------------------------------------
  
  WorkerBeginProcessGet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerBeginProcessGet& from);
  void MergeFrom(const WorkerBeginProcessGet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes worker = 1;
  inline bool has_worker() const;
  inline void clear_worker();
  static const int kWorkerFieldNumber = 1;
  inline const ::std::string& worker() const;
  inline void set_worker(const ::std::string& value);
  inline void set_worker(const char* value);
  inline void set_worker(const void* value, size_t size);
  inline ::std::string* mutable_worker();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 37;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.WorkerBeginProcessGet)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* worker_;
  static const ::std::string _default_worker_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerBeginProcessGet* default_instance_;
};
// -------------------------------------------------------------------

class WorkerEndProcessGet : public ::google::protobuf::Message {
 public:
  WorkerEndProcessGet();
  virtual ~WorkerEndProcessGet();
  
  WorkerEndProcessGet(const WorkerEndProcessGet& from);
  
  inline WorkerEndProcessGet& operator=(const WorkerEndProcessGet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerEndProcessGet& default_instance();
  
  void Swap(WorkerEndProcessGet* other);
  
  // implements Message ----------------------------------------------
  
  WorkerEndProcessGet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerEndProcessGet& from);
  void MergeFrom(const WorkerEndProcessGet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes worker = 1;
  inline bool has_worker() const;
  inline void clear_worker();
  static const int kWorkerFieldNumber = 1;
  inline const ::std::string& worker() const;
  inline void set_worker(const ::std::string& value);
  inline void set_worker(const char* value);
  inline void set_worker(const void* value, size_t size);
  inline ::std::string* mutable_worker();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 38;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.WorkerEndProcessGet)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* worker_;
  static const ::std::string _default_worker_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerEndProcessGet* default_instance_;
};
// -------------------------------------------------------------------

class WorkerSendErrorResponse : public ::google::protobuf::Message {
 public:
  WorkerSendErrorResponse();
  virtual ~WorkerSendErrorResponse();
  
  WorkerSendErrorResponse(const WorkerSendErrorResponse& from);
  
  inline WorkerSendErrorResponse& operator=(const WorkerSendErrorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerSendErrorResponse& default_instance();
  
  void Swap(WorkerSendErrorResponse* other);
  
  // implements Message ----------------------------------------------
  
  WorkerSendErrorResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerSendErrorResponse& from);
  void MergeFrom(const WorkerSendErrorResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes worker = 1;
  inline bool has_worker() const;
  inline void clear_worker();
  static const int kWorkerFieldNumber = 1;
  inline const ::std::string& worker() const;
  inline void set_worker(const ::std::string& value);
  inline void set_worker(const char* value);
  inline void set_worker(const void* value, size_t size);
  inline ::std::string* mutable_worker();
  
  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 39;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.WorkerSendErrorResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* worker_;
  static const ::std::string _default_worker_;
  ::std::string* message_;
  static const ::std::string _default_message_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerSendErrorResponse* default_instance_;
};
// -------------------------------------------------------------------

class WorkerForwardSubscribeKeepalive : public ::google::protobuf::Message {
 public:
  WorkerForwardSubscribeKeepalive();
  virtual ~WorkerForwardSubscribeKeepalive();
  
  WorkerForwardSubscribeKeepalive(const WorkerForwardSubscribeKeepalive& from);
  
  inline WorkerForwardSubscribeKeepalive& operator=(const WorkerForwardSubscribeKeepalive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerForwardSubscribeKeepalive& default_instance();
  
  void Swap(WorkerForwardSubscribeKeepalive* other);
  
  // implements Message ----------------------------------------------
  
  WorkerForwardSubscribeKeepalive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerForwardSubscribeKeepalive& from);
  void MergeFrom(const WorkerForwardSubscribeKeepalive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes worker = 1;
  inline bool has_worker() const;
  inline void clear_worker();
  static const int kWorkerFieldNumber = 1;
  inline const ::std::string& worker() const;
  inline void set_worker(const ::std::string& value);
  inline void set_worker(const char* value);
  inline void set_worker(const void* value, size_t size);
  inline ::std::string* mutable_worker();
  
  // optional bytes subscription = 2;
  inline bool has_subscription() const;
  inline void clear_subscription();
  static const int kSubscriptionFieldNumber = 2;
  inline const ::std::string& subscription() const;
  inline void set_subscription(const ::std::string& value);
  inline void set_subscription(const char* value);
  inline void set_subscription(const void* value, size_t size);
  inline ::std::string* mutable_subscription();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 48;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.WorkerForwardSubscribeKeepalive)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* worker_;
  static const ::std::string _default_worker_;
  ::std::string* subscription_;
  static const ::std::string _default_subscription_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WorkerForwardSubscribeKeepalive* default_instance_;
};
// -------------------------------------------------------------------

class StreamerStartup : public ::google::protobuf::Message {
 public:
  StreamerStartup();
  virtual ~StreamerStartup();
  
  StreamerStartup(const StreamerStartup& from);
  
  inline StreamerStartup& operator=(const StreamerStartup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamerStartup& default_instance();
  
  void Swap(StreamerStartup* other);
  
  // implements Message ----------------------------------------------
  
  StreamerStartup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamerStartup& from);
  void MergeFrom(const StreamerStartup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes streamer = 1;
  inline bool has_streamer() const;
  inline void clear_streamer();
  static const int kStreamerFieldNumber = 1;
  inline const ::std::string& streamer() const;
  inline void set_streamer(const ::std::string& value);
  inline void set_streamer(const char* value);
  inline void set_streamer(const void* value, size_t size);
  inline ::std::string* mutable_streamer();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 49;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.StreamerStartup)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* streamer_;
  static const ::std::string _default_streamer_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StreamerStartup* default_instance_;
};
// -------------------------------------------------------------------

class StreamerShutdown : public ::google::protobuf::Message {
 public:
  StreamerShutdown();
  virtual ~StreamerShutdown();
  
  StreamerShutdown(const StreamerShutdown& from);
  
  inline StreamerShutdown& operator=(const StreamerShutdown& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamerShutdown& default_instance();
  
  void Swap(StreamerShutdown* other);
  
  // implements Message ----------------------------------------------
  
  StreamerShutdown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamerShutdown& from);
  void MergeFrom(const StreamerShutdown& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes streamer = 1;
  inline bool has_streamer() const;
  inline void clear_streamer();
  static const int kStreamerFieldNumber = 1;
  inline const ::std::string& streamer() const;
  inline void set_streamer(const ::std::string& value);
  inline void set_streamer(const char* value);
  inline void set_streamer(const void* value, size_t size);
  inline ::std::string* mutable_streamer();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 50;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.StreamerShutdown)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* streamer_;
  static const ::std::string _default_streamer_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StreamerShutdown* default_instance_;
};
// -------------------------------------------------------------------

class StreamerSubscriptionExpired : public ::google::protobuf::Message {
 public:
  StreamerSubscriptionExpired();
  virtual ~StreamerSubscriptionExpired();
  
  StreamerSubscriptionExpired(const StreamerSubscriptionExpired& from);
  
  inline StreamerSubscriptionExpired& operator=(const StreamerSubscriptionExpired& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamerSubscriptionExpired& default_instance();
  
  void Swap(StreamerSubscriptionExpired* other);
  
  // implements Message ----------------------------------------------
  
  StreamerSubscriptionExpired* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamerSubscriptionExpired& from);
  void MergeFrom(const StreamerSubscriptionExpired& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes streamer = 1;
  inline bool has_streamer() const;
  inline void clear_streamer();
  static const int kStreamerFieldNumber = 1;
  inline const ::std::string& streamer() const;
  inline void set_streamer(const ::std::string& value);
  inline void set_streamer(const char* value);
  inline void set_streamer(const void* value, size_t size);
  inline ::std::string* mutable_streamer();
  
  // optional bytes id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 40;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.StreamerSubscriptionExpired)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* streamer_;
  static const ::std::string _default_streamer_;
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StreamerSubscriptionExpired* default_instance_;
};
// -------------------------------------------------------------------

class StreamerReceiveKeepalive : public ::google::protobuf::Message {
 public:
  StreamerReceiveKeepalive();
  virtual ~StreamerReceiveKeepalive();
  
  StreamerReceiveKeepalive(const StreamerReceiveKeepalive& from);
  
  inline StreamerReceiveKeepalive& operator=(const StreamerReceiveKeepalive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamerReceiveKeepalive& default_instance();
  
  void Swap(StreamerReceiveKeepalive* other);
  
  // implements Message ----------------------------------------------
  
  StreamerReceiveKeepalive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamerReceiveKeepalive& from);
  void MergeFrom(const StreamerReceiveKeepalive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes streamer = 1;
  inline bool has_streamer() const;
  inline void clear_streamer();
  static const int kStreamerFieldNumber = 1;
  inline const ::std::string& streamer() const;
  inline void set_streamer(const ::std::string& value);
  inline void set_streamer(const char* value);
  inline void set_streamer(const void* value, size_t size);
  inline ::std::string* mutable_streamer();
  
  // optional bytes id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 41;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.StreamerReceiveKeepalive)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* streamer_;
  static const ::std::string _default_streamer_;
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StreamerReceiveKeepalive* default_instance_;
};
// -------------------------------------------------------------------

class StreamerSubscriptionRenewedFromKeepalive : public ::google::protobuf::Message {
 public:
  StreamerSubscriptionRenewedFromKeepalive();
  virtual ~StreamerSubscriptionRenewedFromKeepalive();
  
  StreamerSubscriptionRenewedFromKeepalive(const StreamerSubscriptionRenewedFromKeepalive& from);
  
  inline StreamerSubscriptionRenewedFromKeepalive& operator=(const StreamerSubscriptionRenewedFromKeepalive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamerSubscriptionRenewedFromKeepalive& default_instance();
  
  void Swap(StreamerSubscriptionRenewedFromKeepalive* other);
  
  // implements Message ----------------------------------------------
  
  StreamerSubscriptionRenewedFromKeepalive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamerSubscriptionRenewedFromKeepalive& from);
  void MergeFrom(const StreamerSubscriptionRenewedFromKeepalive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes streamer = 1;
  inline bool has_streamer() const;
  inline void clear_streamer();
  static const int kStreamerFieldNumber = 1;
  inline const ::std::string& streamer() const;
  inline void set_streamer(const ::std::string& value);
  inline void set_streamer(const char* value);
  inline void set_streamer(const void* value, size_t size);
  inline ::std::string* mutable_streamer();
  
  // optional bytes id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 42;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.StreamerSubscriptionRenewedFromKeepalive)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* streamer_;
  static const ::std::string _default_streamer_;
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StreamerSubscriptionRenewedFromKeepalive* default_instance_;
};
// -------------------------------------------------------------------

class StreamerRejectKeepaliveUnknownSubscription : public ::google::protobuf::Message {
 public:
  StreamerRejectKeepaliveUnknownSubscription();
  virtual ~StreamerRejectKeepaliveUnknownSubscription();
  
  StreamerRejectKeepaliveUnknownSubscription(const StreamerRejectKeepaliveUnknownSubscription& from);
  
  inline StreamerRejectKeepaliveUnknownSubscription& operator=(const StreamerRejectKeepaliveUnknownSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamerRejectKeepaliveUnknownSubscription& default_instance();
  
  void Swap(StreamerRejectKeepaliveUnknownSubscription* other);
  
  // implements Message ----------------------------------------------
  
  StreamerRejectKeepaliveUnknownSubscription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamerRejectKeepaliveUnknownSubscription& from);
  void MergeFrom(const StreamerRejectKeepaliveUnknownSubscription& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes streamer = 1;
  inline bool has_streamer() const;
  inline void clear_streamer();
  static const int kStreamerFieldNumber = 1;
  inline const ::std::string& streamer() const;
  inline void set_streamer(const ::std::string& value);
  inline void set_streamer(const char* value);
  inline void set_streamer(const void* value, size_t size);
  inline ::std::string* mutable_streamer();
  
  // optional bytes id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 43;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.StreamerRejectKeepaliveUnknownSubscription)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* streamer_;
  static const ::std::string _default_streamer_;
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StreamerRejectKeepaliveUnknownSubscription* default_instance_;
};
// -------------------------------------------------------------------

class StreamerErrorRenewingSubscription : public ::google::protobuf::Message {
 public:
  StreamerErrorRenewingSubscription();
  virtual ~StreamerErrorRenewingSubscription();
  
  StreamerErrorRenewingSubscription(const StreamerErrorRenewingSubscription& from);
  
  inline StreamerErrorRenewingSubscription& operator=(const StreamerErrorRenewingSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamerErrorRenewingSubscription& default_instance();
  
  void Swap(StreamerErrorRenewingSubscription* other);
  
  // implements Message ----------------------------------------------
  
  StreamerErrorRenewingSubscription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamerErrorRenewingSubscription& from);
  void MergeFrom(const StreamerErrorRenewingSubscription& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes streamer = 1;
  inline bool has_streamer() const;
  inline void clear_streamer();
  static const int kStreamerFieldNumber = 1;
  inline const ::std::string& streamer() const;
  inline void set_streamer(const ::std::string& value);
  inline void set_streamer(const char* value);
  inline void set_streamer(const void* value, size_t size);
  inline ::std::string* mutable_streamer();
  
  // optional bytes id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 44;
  bool add_to_envelope(::zippylog::Envelope *envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.StreamerErrorRenewingSubscription)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* streamer_;
  static const ::std::string _default_streamer_;
  ::std::string* id_;
  static const ::std::string _default_id_;
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StreamerErrorRenewingSubscription* default_instance_;
};
// ===================================================================


// ===================================================================

// BrokerStartup

// optional string store_path = 1;
inline bool BrokerStartup::has_store_path() const {
  return _has_bit(0);
}
inline void BrokerStartup::clear_store_path() {
  if (store_path_ != &_default_store_path_) {
    store_path_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& BrokerStartup::store_path() const {
  return *store_path_;
}
inline void BrokerStartup::set_store_path(const ::std::string& value) {
  _set_bit(0);
  if (store_path_ == &_default_store_path_) {
    store_path_ = new ::std::string;
  }
  store_path_->assign(value);
}
inline void BrokerStartup::set_store_path(const char* value) {
  _set_bit(0);
  if (store_path_ == &_default_store_path_) {
    store_path_ = new ::std::string;
  }
  store_path_->assign(value);
}
inline void BrokerStartup::set_store_path(const char* value, size_t size) {
  _set_bit(0);
  if (store_path_ == &_default_store_path_) {
    store_path_ = new ::std::string;
  }
  store_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BrokerStartup::mutable_store_path() {
  _set_bit(0);
  if (store_path_ == &_default_store_path_) {
    store_path_ = new ::std::string;
  }
  return store_path_;
}

// repeated string listen_endpoints = 2;
inline int BrokerStartup::listen_endpoints_size() const {
  return listen_endpoints_.size();
}
inline void BrokerStartup::clear_listen_endpoints() {
  listen_endpoints_.Clear();
}
inline const ::std::string& BrokerStartup::listen_endpoints(int index) const {
  return listen_endpoints_.Get(index);
}
inline ::std::string* BrokerStartup::mutable_listen_endpoints(int index) {
  return listen_endpoints_.Mutable(index);
}
inline void BrokerStartup::set_listen_endpoints(int index, const ::std::string& value) {
  listen_endpoints_.Mutable(index)->assign(value);
}
inline void BrokerStartup::set_listen_endpoints(int index, const char* value) {
  listen_endpoints_.Mutable(index)->assign(value);
}
inline void BrokerStartup::set_listen_endpoints(int index, const char* value, size_t size) {
  listen_endpoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BrokerStartup::add_listen_endpoints() {
  return listen_endpoints_.Add();
}
inline void BrokerStartup::add_listen_endpoints(const ::std::string& value) {
  listen_endpoints_.Add()->assign(value);
}
inline void BrokerStartup::add_listen_endpoints(const char* value) {
  listen_endpoints_.Add()->assign(value);
}
inline void BrokerStartup::add_listen_endpoints(const char* value, size_t size) {
  listen_endpoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BrokerStartup::listen_endpoints() const {
  return listen_endpoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BrokerStartup::mutable_listen_endpoints() {
  return &listen_endpoints_;
}

// -------------------------------------------------------------------

// BrokerShutdown

// -------------------------------------------------------------------

// BrokerReceiveClientMessage

// -------------------------------------------------------------------

// WorkerStartup

// optional bytes worker = 1;
inline bool WorkerStartup::has_worker() const {
  return _has_bit(0);
}
inline void WorkerStartup::clear_worker() {
  if (worker_ != &_default_worker_) {
    worker_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& WorkerStartup::worker() const {
  return *worker_;
}
inline void WorkerStartup::set_worker(const ::std::string& value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerStartup::set_worker(const char* value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerStartup::set_worker(const void* value, size_t size) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerStartup::mutable_worker() {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  return worker_;
}

// -------------------------------------------------------------------

// WorkerShutdown

// optional bytes worker = 1;
inline bool WorkerShutdown::has_worker() const {
  return _has_bit(0);
}
inline void WorkerShutdown::clear_worker() {
  if (worker_ != &_default_worker_) {
    worker_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& WorkerShutdown::worker() const {
  return *worker_;
}
inline void WorkerShutdown::set_worker(const ::std::string& value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerShutdown::set_worker(const char* value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerShutdown::set_worker(const void* value, size_t size) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerShutdown::mutable_worker() {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  return worker_;
}

// -------------------------------------------------------------------

// WorkerFailReceiveMessage

// optional bytes worker = 1;
inline bool WorkerFailReceiveMessage::has_worker() const {
  return _has_bit(0);
}
inline void WorkerFailReceiveMessage::clear_worker() {
  if (worker_ != &_default_worker_) {
    worker_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& WorkerFailReceiveMessage::worker() const {
  return *worker_;
}
inline void WorkerFailReceiveMessage::set_worker(const ::std::string& value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerFailReceiveMessage::set_worker(const char* value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerFailReceiveMessage::set_worker(const void* value, size_t size) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerFailReceiveMessage::mutable_worker() {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  return worker_;
}

// -------------------------------------------------------------------

// WorkerReceiveEmptyMessage

// optional bytes worker = 1;
inline bool WorkerReceiveEmptyMessage::has_worker() const {
  return _has_bit(0);
}
inline void WorkerReceiveEmptyMessage::clear_worker() {
  if (worker_ != &_default_worker_) {
    worker_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& WorkerReceiveEmptyMessage::worker() const {
  return *worker_;
}
inline void WorkerReceiveEmptyMessage::set_worker(const ::std::string& value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerReceiveEmptyMessage::set_worker(const char* value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerReceiveEmptyMessage::set_worker(const void* value, size_t size) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerReceiveEmptyMessage::mutable_worker() {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  return worker_;
}

// -------------------------------------------------------------------

// WorkerReceiveUnknownRequestType

// optional bytes worker = 1;
inline bool WorkerReceiveUnknownRequestType::has_worker() const {
  return _has_bit(0);
}
inline void WorkerReceiveUnknownRequestType::clear_worker() {
  if (worker_ != &_default_worker_) {
    worker_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& WorkerReceiveUnknownRequestType::worker() const {
  return *worker_;
}
inline void WorkerReceiveUnknownRequestType::set_worker(const ::std::string& value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerReceiveUnknownRequestType::set_worker(const char* value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerReceiveUnknownRequestType::set_worker(const void* value, size_t size) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerReceiveUnknownRequestType::mutable_worker() {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  return worker_;
}

// optional uint32 enumeration = 2;
inline bool WorkerReceiveUnknownRequestType::has_enumeration() const {
  return _has_bit(1);
}
inline void WorkerReceiveUnknownRequestType::clear_enumeration() {
  enumeration_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 WorkerReceiveUnknownRequestType::enumeration() const {
  return enumeration_;
}
inline void WorkerReceiveUnknownRequestType::set_enumeration(::google::protobuf::uint32 value) {
  _set_bit(1);
  enumeration_ = value;
}

// -------------------------------------------------------------------

// WorkerRequestParseFailure

// optional bytes worker = 1;
inline bool WorkerRequestParseFailure::has_worker() const {
  return _has_bit(0);
}
inline void WorkerRequestParseFailure::clear_worker() {
  if (worker_ != &_default_worker_) {
    worker_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& WorkerRequestParseFailure::worker() const {
  return *worker_;
}
inline void WorkerRequestParseFailure::set_worker(const ::std::string& value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerRequestParseFailure::set_worker(const char* value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerRequestParseFailure::set_worker(const void* value, size_t size) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerRequestParseFailure::mutable_worker() {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  return worker_;
}

// -------------------------------------------------------------------

// WorkerRequestEmptyEnvelope

// optional bytes worker = 1;
inline bool WorkerRequestEmptyEnvelope::has_worker() const {
  return _has_bit(0);
}
inline void WorkerRequestEmptyEnvelope::clear_worker() {
  if (worker_ != &_default_worker_) {
    worker_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& WorkerRequestEmptyEnvelope::worker() const {
  return *worker_;
}
inline void WorkerRequestEmptyEnvelope::set_worker(const ::std::string& value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerRequestEmptyEnvelope::set_worker(const char* value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerRequestEmptyEnvelope::set_worker(const void* value, size_t size) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerRequestEmptyEnvelope::mutable_worker() {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  return worker_;
}

// -------------------------------------------------------------------

// WorkerInvalidMessageEnumeration

// optional bytes worker = 1;
inline bool WorkerInvalidMessageEnumeration::has_worker() const {
  return _has_bit(0);
}
inline void WorkerInvalidMessageEnumeration::clear_worker() {
  if (worker_ != &_default_worker_) {
    worker_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& WorkerInvalidMessageEnumeration::worker() const {
  return *worker_;
}
inline void WorkerInvalidMessageEnumeration::set_worker(const ::std::string& value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerInvalidMessageEnumeration::set_worker(const char* value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerInvalidMessageEnumeration::set_worker(const void* value, size_t size) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerInvalidMessageEnumeration::mutable_worker() {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  return worker_;
}

// -------------------------------------------------------------------

// WorkerBeginProcessStoreInfo

// optional bytes worker = 1;
inline bool WorkerBeginProcessStoreInfo::has_worker() const {
  return _has_bit(0);
}
inline void WorkerBeginProcessStoreInfo::clear_worker() {
  if (worker_ != &_default_worker_) {
    worker_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& WorkerBeginProcessStoreInfo::worker() const {
  return *worker_;
}
inline void WorkerBeginProcessStoreInfo::set_worker(const ::std::string& value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerBeginProcessStoreInfo::set_worker(const char* value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerBeginProcessStoreInfo::set_worker(const void* value, size_t size) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerBeginProcessStoreInfo::mutable_worker() {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  return worker_;
}

// -------------------------------------------------------------------

// WorkerEndProcessStoreInfo

// optional bytes worker = 1;
inline bool WorkerEndProcessStoreInfo::has_worker() const {
  return _has_bit(0);
}
inline void WorkerEndProcessStoreInfo::clear_worker() {
  if (worker_ != &_default_worker_) {
    worker_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& WorkerEndProcessStoreInfo::worker() const {
  return *worker_;
}
inline void WorkerEndProcessStoreInfo::set_worker(const ::std::string& value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerEndProcessStoreInfo::set_worker(const char* value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerEndProcessStoreInfo::set_worker(const void* value, size_t size) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerEndProcessStoreInfo::mutable_worker() {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  return worker_;
}

// -------------------------------------------------------------------

// WorkerReceiveInvalidGet

// optional bytes worker = 1;
inline bool WorkerReceiveInvalidGet::has_worker() const {
  return _has_bit(0);
}
inline void WorkerReceiveInvalidGet::clear_worker() {
  if (worker_ != &_default_worker_) {
    worker_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& WorkerReceiveInvalidGet::worker() const {
  return *worker_;
}
inline void WorkerReceiveInvalidGet::set_worker(const ::std::string& value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerReceiveInvalidGet::set_worker(const char* value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerReceiveInvalidGet::set_worker(const void* value, size_t size) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerReceiveInvalidGet::mutable_worker() {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  return worker_;
}

// -------------------------------------------------------------------

// WorkerGetInvalidStream

// optional bytes worker = 1;
inline bool WorkerGetInvalidStream::has_worker() const {
  return _has_bit(0);
}
inline void WorkerGetInvalidStream::clear_worker() {
  if (worker_ != &_default_worker_) {
    worker_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& WorkerGetInvalidStream::worker() const {
  return *worker_;
}
inline void WorkerGetInvalidStream::set_worker(const ::std::string& value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerGetInvalidStream::set_worker(const char* value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerGetInvalidStream::set_worker(const void* value, size_t size) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerGetInvalidStream::mutable_worker() {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  return worker_;
}

// -------------------------------------------------------------------

// WorkerGetInvalidOffset

// optional bytes worker = 1;
inline bool WorkerGetInvalidOffset::has_worker() const {
  return _has_bit(0);
}
inline void WorkerGetInvalidOffset::clear_worker() {
  if (worker_ != &_default_worker_) {
    worker_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& WorkerGetInvalidOffset::worker() const {
  return *worker_;
}
inline void WorkerGetInvalidOffset::set_worker(const ::std::string& value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerGetInvalidOffset::set_worker(const char* value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerGetInvalidOffset::set_worker(const void* value, size_t size) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerGetInvalidOffset::mutable_worker() {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  return worker_;
}

// -------------------------------------------------------------------

// WorkerBeginProcessGet

// optional bytes worker = 1;
inline bool WorkerBeginProcessGet::has_worker() const {
  return _has_bit(0);
}
inline void WorkerBeginProcessGet::clear_worker() {
  if (worker_ != &_default_worker_) {
    worker_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& WorkerBeginProcessGet::worker() const {
  return *worker_;
}
inline void WorkerBeginProcessGet::set_worker(const ::std::string& value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerBeginProcessGet::set_worker(const char* value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerBeginProcessGet::set_worker(const void* value, size_t size) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerBeginProcessGet::mutable_worker() {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  return worker_;
}

// -------------------------------------------------------------------

// WorkerEndProcessGet

// optional bytes worker = 1;
inline bool WorkerEndProcessGet::has_worker() const {
  return _has_bit(0);
}
inline void WorkerEndProcessGet::clear_worker() {
  if (worker_ != &_default_worker_) {
    worker_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& WorkerEndProcessGet::worker() const {
  return *worker_;
}
inline void WorkerEndProcessGet::set_worker(const ::std::string& value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerEndProcessGet::set_worker(const char* value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerEndProcessGet::set_worker(const void* value, size_t size) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerEndProcessGet::mutable_worker() {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  return worker_;
}

// -------------------------------------------------------------------

// WorkerSendErrorResponse

// optional bytes worker = 1;
inline bool WorkerSendErrorResponse::has_worker() const {
  return _has_bit(0);
}
inline void WorkerSendErrorResponse::clear_worker() {
  if (worker_ != &_default_worker_) {
    worker_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& WorkerSendErrorResponse::worker() const {
  return *worker_;
}
inline void WorkerSendErrorResponse::set_worker(const ::std::string& value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerSendErrorResponse::set_worker(const char* value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerSendErrorResponse::set_worker(const void* value, size_t size) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerSendErrorResponse::mutable_worker() {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  return worker_;
}

// optional string message = 2;
inline bool WorkerSendErrorResponse::has_message() const {
  return _has_bit(1);
}
inline void WorkerSendErrorResponse::clear_message() {
  if (message_ != &_default_message_) {
    message_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& WorkerSendErrorResponse::message() const {
  return *message_;
}
inline void WorkerSendErrorResponse::set_message(const ::std::string& value) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void WorkerSendErrorResponse::set_message(const char* value) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void WorkerSendErrorResponse::set_message(const char* value, size_t size) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerSendErrorResponse::mutable_message() {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  return message_;
}

// -------------------------------------------------------------------

// WorkerForwardSubscribeKeepalive

// optional bytes worker = 1;
inline bool WorkerForwardSubscribeKeepalive::has_worker() const {
  return _has_bit(0);
}
inline void WorkerForwardSubscribeKeepalive::clear_worker() {
  if (worker_ != &_default_worker_) {
    worker_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& WorkerForwardSubscribeKeepalive::worker() const {
  return *worker_;
}
inline void WorkerForwardSubscribeKeepalive::set_worker(const ::std::string& value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerForwardSubscribeKeepalive::set_worker(const char* value) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
}
inline void WorkerForwardSubscribeKeepalive::set_worker(const void* value, size_t size) {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  worker_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerForwardSubscribeKeepalive::mutable_worker() {
  _set_bit(0);
  if (worker_ == &_default_worker_) {
    worker_ = new ::std::string;
  }
  return worker_;
}

// optional bytes subscription = 2;
inline bool WorkerForwardSubscribeKeepalive::has_subscription() const {
  return _has_bit(1);
}
inline void WorkerForwardSubscribeKeepalive::clear_subscription() {
  if (subscription_ != &_default_subscription_) {
    subscription_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& WorkerForwardSubscribeKeepalive::subscription() const {
  return *subscription_;
}
inline void WorkerForwardSubscribeKeepalive::set_subscription(const ::std::string& value) {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void WorkerForwardSubscribeKeepalive::set_subscription(const char* value) {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void WorkerForwardSubscribeKeepalive::set_subscription(const void* value, size_t size) {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkerForwardSubscribeKeepalive::mutable_subscription() {
  _set_bit(1);
  if (subscription_ == &_default_subscription_) {
    subscription_ = new ::std::string;
  }
  return subscription_;
}

// -------------------------------------------------------------------

// StreamerStartup

// optional bytes streamer = 1;
inline bool StreamerStartup::has_streamer() const {
  return _has_bit(0);
}
inline void StreamerStartup::clear_streamer() {
  if (streamer_ != &_default_streamer_) {
    streamer_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& StreamerStartup::streamer() const {
  return *streamer_;
}
inline void StreamerStartup::set_streamer(const ::std::string& value) {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  streamer_->assign(value);
}
inline void StreamerStartup::set_streamer(const char* value) {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  streamer_->assign(value);
}
inline void StreamerStartup::set_streamer(const void* value, size_t size) {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  streamer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerStartup::mutable_streamer() {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  return streamer_;
}

// -------------------------------------------------------------------

// StreamerShutdown

// optional bytes streamer = 1;
inline bool StreamerShutdown::has_streamer() const {
  return _has_bit(0);
}
inline void StreamerShutdown::clear_streamer() {
  if (streamer_ != &_default_streamer_) {
    streamer_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& StreamerShutdown::streamer() const {
  return *streamer_;
}
inline void StreamerShutdown::set_streamer(const ::std::string& value) {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  streamer_->assign(value);
}
inline void StreamerShutdown::set_streamer(const char* value) {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  streamer_->assign(value);
}
inline void StreamerShutdown::set_streamer(const void* value, size_t size) {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  streamer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerShutdown::mutable_streamer() {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  return streamer_;
}

// -------------------------------------------------------------------

// StreamerSubscriptionExpired

// optional bytes streamer = 1;
inline bool StreamerSubscriptionExpired::has_streamer() const {
  return _has_bit(0);
}
inline void StreamerSubscriptionExpired::clear_streamer() {
  if (streamer_ != &_default_streamer_) {
    streamer_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& StreamerSubscriptionExpired::streamer() const {
  return *streamer_;
}
inline void StreamerSubscriptionExpired::set_streamer(const ::std::string& value) {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  streamer_->assign(value);
}
inline void StreamerSubscriptionExpired::set_streamer(const char* value) {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  streamer_->assign(value);
}
inline void StreamerSubscriptionExpired::set_streamer(const void* value, size_t size) {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  streamer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerSubscriptionExpired::mutable_streamer() {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  return streamer_;
}

// optional bytes id = 2;
inline bool StreamerSubscriptionExpired::has_id() const {
  return _has_bit(1);
}
inline void StreamerSubscriptionExpired::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& StreamerSubscriptionExpired::id() const {
  return *id_;
}
inline void StreamerSubscriptionExpired::set_id(const ::std::string& value) {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerSubscriptionExpired::set_id(const char* value) {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerSubscriptionExpired::set_id(const void* value, size_t size) {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerSubscriptionExpired::mutable_id() {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// StreamerReceiveKeepalive

// optional bytes streamer = 1;
inline bool StreamerReceiveKeepalive::has_streamer() const {
  return _has_bit(0);
}
inline void StreamerReceiveKeepalive::clear_streamer() {
  if (streamer_ != &_default_streamer_) {
    streamer_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& StreamerReceiveKeepalive::streamer() const {
  return *streamer_;
}
inline void StreamerReceiveKeepalive::set_streamer(const ::std::string& value) {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  streamer_->assign(value);
}
inline void StreamerReceiveKeepalive::set_streamer(const char* value) {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  streamer_->assign(value);
}
inline void StreamerReceiveKeepalive::set_streamer(const void* value, size_t size) {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  streamer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerReceiveKeepalive::mutable_streamer() {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  return streamer_;
}

// optional bytes id = 2;
inline bool StreamerReceiveKeepalive::has_id() const {
  return _has_bit(1);
}
inline void StreamerReceiveKeepalive::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& StreamerReceiveKeepalive::id() const {
  return *id_;
}
inline void StreamerReceiveKeepalive::set_id(const ::std::string& value) {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerReceiveKeepalive::set_id(const char* value) {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerReceiveKeepalive::set_id(const void* value, size_t size) {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerReceiveKeepalive::mutable_id() {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// StreamerSubscriptionRenewedFromKeepalive

// optional bytes streamer = 1;
inline bool StreamerSubscriptionRenewedFromKeepalive::has_streamer() const {
  return _has_bit(0);
}
inline void StreamerSubscriptionRenewedFromKeepalive::clear_streamer() {
  if (streamer_ != &_default_streamer_) {
    streamer_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& StreamerSubscriptionRenewedFromKeepalive::streamer() const {
  return *streamer_;
}
inline void StreamerSubscriptionRenewedFromKeepalive::set_streamer(const ::std::string& value) {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  streamer_->assign(value);
}
inline void StreamerSubscriptionRenewedFromKeepalive::set_streamer(const char* value) {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  streamer_->assign(value);
}
inline void StreamerSubscriptionRenewedFromKeepalive::set_streamer(const void* value, size_t size) {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  streamer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerSubscriptionRenewedFromKeepalive::mutable_streamer() {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  return streamer_;
}

// optional bytes id = 2;
inline bool StreamerSubscriptionRenewedFromKeepalive::has_id() const {
  return _has_bit(1);
}
inline void StreamerSubscriptionRenewedFromKeepalive::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& StreamerSubscriptionRenewedFromKeepalive::id() const {
  return *id_;
}
inline void StreamerSubscriptionRenewedFromKeepalive::set_id(const ::std::string& value) {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerSubscriptionRenewedFromKeepalive::set_id(const char* value) {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerSubscriptionRenewedFromKeepalive::set_id(const void* value, size_t size) {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerSubscriptionRenewedFromKeepalive::mutable_id() {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// StreamerRejectKeepaliveUnknownSubscription

// optional bytes streamer = 1;
inline bool StreamerRejectKeepaliveUnknownSubscription::has_streamer() const {
  return _has_bit(0);
}
inline void StreamerRejectKeepaliveUnknownSubscription::clear_streamer() {
  if (streamer_ != &_default_streamer_) {
    streamer_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& StreamerRejectKeepaliveUnknownSubscription::streamer() const {
  return *streamer_;
}
inline void StreamerRejectKeepaliveUnknownSubscription::set_streamer(const ::std::string& value) {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  streamer_->assign(value);
}
inline void StreamerRejectKeepaliveUnknownSubscription::set_streamer(const char* value) {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  streamer_->assign(value);
}
inline void StreamerRejectKeepaliveUnknownSubscription::set_streamer(const void* value, size_t size) {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  streamer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerRejectKeepaliveUnknownSubscription::mutable_streamer() {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  return streamer_;
}

// optional bytes id = 2;
inline bool StreamerRejectKeepaliveUnknownSubscription::has_id() const {
  return _has_bit(1);
}
inline void StreamerRejectKeepaliveUnknownSubscription::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& StreamerRejectKeepaliveUnknownSubscription::id() const {
  return *id_;
}
inline void StreamerRejectKeepaliveUnknownSubscription::set_id(const ::std::string& value) {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerRejectKeepaliveUnknownSubscription::set_id(const char* value) {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerRejectKeepaliveUnknownSubscription::set_id(const void* value, size_t size) {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerRejectKeepaliveUnknownSubscription::mutable_id() {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// -------------------------------------------------------------------

// StreamerErrorRenewingSubscription

// optional bytes streamer = 1;
inline bool StreamerErrorRenewingSubscription::has_streamer() const {
  return _has_bit(0);
}
inline void StreamerErrorRenewingSubscription::clear_streamer() {
  if (streamer_ != &_default_streamer_) {
    streamer_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& StreamerErrorRenewingSubscription::streamer() const {
  return *streamer_;
}
inline void StreamerErrorRenewingSubscription::set_streamer(const ::std::string& value) {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  streamer_->assign(value);
}
inline void StreamerErrorRenewingSubscription::set_streamer(const char* value) {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  streamer_->assign(value);
}
inline void StreamerErrorRenewingSubscription::set_streamer(const void* value, size_t size) {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  streamer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerErrorRenewingSubscription::mutable_streamer() {
  _set_bit(0);
  if (streamer_ == &_default_streamer_) {
    streamer_ = new ::std::string;
  }
  return streamer_;
}

// optional bytes id = 2;
inline bool StreamerErrorRenewingSubscription::has_id() const {
  return _has_bit(1);
}
inline void StreamerErrorRenewingSubscription::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& StreamerErrorRenewingSubscription::id() const {
  return *id_;
}
inline void StreamerErrorRenewingSubscription::set_id(const ::std::string& value) {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerErrorRenewingSubscription::set_id(const char* value) {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StreamerErrorRenewingSubscription::set_id(const void* value, size_t size) {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamerErrorRenewingSubscription::mutable_id() {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace zippylogd
}  // namespace zippylog

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zippylog_2fzippylogd_2eproto__INCLUDED
