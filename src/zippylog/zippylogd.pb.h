// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zippylog/zippylogd.proto

#ifndef PROTOBUF_zippylog_2fzippylogd_2eproto__INCLUDED
#define PROTOBUF_zippylog_2fzippylogd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <zippylog/envelope.hpp>
// @@protoc_insertion_point(includes)

namespace zippylog {
namespace zippylogd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();

class BrokerStartup;
class BrokerShutdown;
class BrokerReceiveClientMessage;
class BrokerFlushOutputStreams;
class StoreWatcherStartup;
class StoreWatcherShutdown;

// ===================================================================

class BrokerStartup : public ::google::protobuf::Message {
 public:
  BrokerStartup();
  virtual ~BrokerStartup();
  
  BrokerStartup(const BrokerStartup& from);
  
  inline BrokerStartup& operator=(const BrokerStartup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrokerStartup& default_instance();
  
  void Swap(BrokerStartup* other);
  
  // implements Message ----------------------------------------------
  
  BrokerStartup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BrokerStartup& from);
  void MergeFrom(const BrokerStartup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // optional string store_path = 2;
  inline bool has_store_path() const;
  inline void clear_store_path();
  static const int kStorePathFieldNumber = 2;
  inline const ::std::string& store_path() const;
  inline void set_store_path(const ::std::string& value);
  inline void set_store_path(const char* value);
  inline void set_store_path(const char* value, size_t size);
  inline ::std::string* mutable_store_path();
  inline ::std::string* release_store_path();
  
  // repeated string listen_endpoints = 3;
  inline int listen_endpoints_size() const;
  inline void clear_listen_endpoints();
  static const int kListenEndpointsFieldNumber = 3;
  inline const ::std::string& listen_endpoints(int index) const;
  inline ::std::string* mutable_listen_endpoints(int index);
  inline void set_listen_endpoints(int index, const ::std::string& value);
  inline void set_listen_endpoints(int index, const char* value);
  inline void set_listen_endpoints(int index, const char* value, size_t size);
  inline ::std::string* add_listen_endpoints();
  inline void add_listen_endpoints(const ::std::string& value);
  inline void add_listen_endpoints(const char* value);
  inline void add_listen_endpoints(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& listen_endpoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_listen_endpoints();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 43;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.BrokerStartup)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_store_path();
  inline void clear_has_store_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::std::string* store_path_;
  ::google::protobuf::RepeatedPtrField< ::std::string> listen_endpoints_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  void InitAsDefaultInstance();
  static BrokerStartup* default_instance_;
};
// -------------------------------------------------------------------

class BrokerShutdown : public ::google::protobuf::Message {
 public:
  BrokerShutdown();
  virtual ~BrokerShutdown();
  
  BrokerShutdown(const BrokerShutdown& from);
  
  inline BrokerShutdown& operator=(const BrokerShutdown& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrokerShutdown& default_instance();
  
  void Swap(BrokerShutdown* other);
  
  // implements Message ----------------------------------------------
  
  BrokerShutdown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BrokerShutdown& from);
  void MergeFrom(const BrokerShutdown& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 44;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.BrokerShutdown)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  void InitAsDefaultInstance();
  static BrokerShutdown* default_instance_;
};
// -------------------------------------------------------------------

class BrokerReceiveClientMessage : public ::google::protobuf::Message {
 public:
  BrokerReceiveClientMessage();
  virtual ~BrokerReceiveClientMessage();
  
  BrokerReceiveClientMessage(const BrokerReceiveClientMessage& from);
  
  inline BrokerReceiveClientMessage& operator=(const BrokerReceiveClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrokerReceiveClientMessage& default_instance();
  
  void Swap(BrokerReceiveClientMessage* other);
  
  // implements Message ----------------------------------------------
  
  BrokerReceiveClientMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BrokerReceiveClientMessage& from);
  void MergeFrom(const BrokerReceiveClientMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 45;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.BrokerReceiveClientMessage)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  void InitAsDefaultInstance();
  static BrokerReceiveClientMessage* default_instance_;
};
// -------------------------------------------------------------------

class BrokerFlushOutputStreams : public ::google::protobuf::Message {
 public:
  BrokerFlushOutputStreams();
  virtual ~BrokerFlushOutputStreams();
  
  BrokerFlushOutputStreams(const BrokerFlushOutputStreams& from);
  
  inline BrokerFlushOutputStreams& operator=(const BrokerFlushOutputStreams& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrokerFlushOutputStreams& default_instance();
  
  void Swap(BrokerFlushOutputStreams* other);
  
  // implements Message ----------------------------------------------
  
  BrokerFlushOutputStreams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BrokerFlushOutputStreams& from);
  void MergeFrom(const BrokerFlushOutputStreams& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 46;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.BrokerFlushOutputStreams)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  void InitAsDefaultInstance();
  static BrokerFlushOutputStreams* default_instance_;
};
// -------------------------------------------------------------------

class StoreWatcherStartup : public ::google::protobuf::Message {
 public:
  StoreWatcherStartup();
  virtual ~StoreWatcherStartup();
  
  StoreWatcherStartup(const StoreWatcherStartup& from);
  
  inline StoreWatcherStartup& operator=(const StoreWatcherStartup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreWatcherStartup& default_instance();
  
  void Swap(StoreWatcherStartup* other);
  
  // implements Message ----------------------------------------------
  
  StoreWatcherStartup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreWatcherStartup& from);
  void MergeFrom(const StoreWatcherStartup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 47;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.StoreWatcherStartup)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  void InitAsDefaultInstance();
  static StoreWatcherStartup* default_instance_;
};
// -------------------------------------------------------------------

class StoreWatcherShutdown : public ::google::protobuf::Message {
 public:
  StoreWatcherShutdown();
  virtual ~StoreWatcherShutdown();
  
  StoreWatcherShutdown(const StoreWatcherShutdown& from);
  
  inline StoreWatcherShutdown& operator=(const StoreWatcherShutdown& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreWatcherShutdown& default_instance();
  
  void Swap(StoreWatcherShutdown* other);
  
  // implements Message ----------------------------------------------
  
  StoreWatcherShutdown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreWatcherShutdown& from);
  void MergeFrom(const StoreWatcherShutdown& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  static const ::google::protobuf::uint32 zippylog_namespace = 1;
  static const ::google::protobuf::uint32 zippylog_enumeration = 48;
  
  bool add_to_envelope(::zippylog::Envelope *envelope);
  bool add_to_envelope(::zippylog::Envelope &envelope);
  // @@protoc_insertion_point(class_scope:zippylog.zippylogd.StoreWatcherShutdown)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto();
  friend void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto();
  
  void InitAsDefaultInstance();
  static StoreWatcherShutdown* default_instance_;
};
// ===================================================================


// ===================================================================

// BrokerStartup

// optional bytes id = 1;
inline bool BrokerStartup::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BrokerStartup::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BrokerStartup::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BrokerStartup::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BrokerStartup::id() const {
  return *id_;
}
inline void BrokerStartup::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BrokerStartup::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BrokerStartup::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BrokerStartup::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BrokerStartup::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string store_path = 2;
inline bool BrokerStartup::has_store_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BrokerStartup::set_has_store_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BrokerStartup::clear_has_store_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BrokerStartup::clear_store_path() {
  if (store_path_ != &::google::protobuf::internal::kEmptyString) {
    store_path_->clear();
  }
  clear_has_store_path();
}
inline const ::std::string& BrokerStartup::store_path() const {
  return *store_path_;
}
inline void BrokerStartup::set_store_path(const ::std::string& value) {
  set_has_store_path();
  if (store_path_ == &::google::protobuf::internal::kEmptyString) {
    store_path_ = new ::std::string;
  }
  store_path_->assign(value);
}
inline void BrokerStartup::set_store_path(const char* value) {
  set_has_store_path();
  if (store_path_ == &::google::protobuf::internal::kEmptyString) {
    store_path_ = new ::std::string;
  }
  store_path_->assign(value);
}
inline void BrokerStartup::set_store_path(const char* value, size_t size) {
  set_has_store_path();
  if (store_path_ == &::google::protobuf::internal::kEmptyString) {
    store_path_ = new ::std::string;
  }
  store_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BrokerStartup::mutable_store_path() {
  set_has_store_path();
  if (store_path_ == &::google::protobuf::internal::kEmptyString) {
    store_path_ = new ::std::string;
  }
  return store_path_;
}
inline ::std::string* BrokerStartup::release_store_path() {
  clear_has_store_path();
  if (store_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = store_path_;
    store_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string listen_endpoints = 3;
inline int BrokerStartup::listen_endpoints_size() const {
  return listen_endpoints_.size();
}
inline void BrokerStartup::clear_listen_endpoints() {
  listen_endpoints_.Clear();
}
inline const ::std::string& BrokerStartup::listen_endpoints(int index) const {
  return listen_endpoints_.Get(index);
}
inline ::std::string* BrokerStartup::mutable_listen_endpoints(int index) {
  return listen_endpoints_.Mutable(index);
}
inline void BrokerStartup::set_listen_endpoints(int index, const ::std::string& value) {
  listen_endpoints_.Mutable(index)->assign(value);
}
inline void BrokerStartup::set_listen_endpoints(int index, const char* value) {
  listen_endpoints_.Mutable(index)->assign(value);
}
inline void BrokerStartup::set_listen_endpoints(int index, const char* value, size_t size) {
  listen_endpoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BrokerStartup::add_listen_endpoints() {
  return listen_endpoints_.Add();
}
inline void BrokerStartup::add_listen_endpoints(const ::std::string& value) {
  listen_endpoints_.Add()->assign(value);
}
inline void BrokerStartup::add_listen_endpoints(const char* value) {
  listen_endpoints_.Add()->assign(value);
}
inline void BrokerStartup::add_listen_endpoints(const char* value, size_t size) {
  listen_endpoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BrokerStartup::listen_endpoints() const {
  return listen_endpoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BrokerStartup::mutable_listen_endpoints() {
  return &listen_endpoints_;
}

// -------------------------------------------------------------------

// BrokerShutdown

// optional bytes id = 1;
inline bool BrokerShutdown::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BrokerShutdown::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BrokerShutdown::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BrokerShutdown::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BrokerShutdown::id() const {
  return *id_;
}
inline void BrokerShutdown::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BrokerShutdown::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BrokerShutdown::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BrokerShutdown::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BrokerShutdown::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BrokerReceiveClientMessage

// -------------------------------------------------------------------

// BrokerFlushOutputStreams

// optional bytes id = 1;
inline bool BrokerFlushOutputStreams::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BrokerFlushOutputStreams::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BrokerFlushOutputStreams::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BrokerFlushOutputStreams::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BrokerFlushOutputStreams::id() const {
  return *id_;
}
inline void BrokerFlushOutputStreams::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BrokerFlushOutputStreams::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BrokerFlushOutputStreams::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BrokerFlushOutputStreams::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BrokerFlushOutputStreams::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// StoreWatcherStartup

// optional bytes id = 1;
inline bool StoreWatcherStartup::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreWatcherStartup::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreWatcherStartup::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreWatcherStartup::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& StoreWatcherStartup::id() const {
  return *id_;
}
inline void StoreWatcherStartup::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StoreWatcherStartup::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StoreWatcherStartup::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreWatcherStartup::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* StoreWatcherStartup::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// StoreWatcherShutdown

// optional bytes id = 1;
inline bool StoreWatcherShutdown::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreWatcherShutdown::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreWatcherShutdown::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreWatcherShutdown::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& StoreWatcherShutdown::id() const {
  return *id_;
}
inline void StoreWatcherShutdown::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StoreWatcherShutdown::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void StoreWatcherShutdown::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreWatcherShutdown::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* StoreWatcherShutdown::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace zippylogd
}  // namespace zippylog

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zippylog_2fzippylogd_2eproto__INCLUDED
