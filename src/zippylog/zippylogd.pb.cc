// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zippylog/zippylogd.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zippylog {
namespace zippylogd {

namespace {

const ::google::protobuf::Descriptor* BrokerStartup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrokerStartup_reflection_ = NULL;
const ::google::protobuf::Descriptor* BrokerShutdown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrokerShutdown_reflection_ = NULL;
const ::google::protobuf::Descriptor* BrokerReceiveClientMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrokerReceiveClientMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* BrokerFlushOutputStreams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrokerFlushOutputStreams_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamerStartup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamerStartup_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamerShutdown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamerShutdown_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamerSubscriptionExpired_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamerSubscriptionExpired_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamerReceiveKeepalive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamerReceiveKeepalive_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamerSubscriptionRenewedFromKeepalive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamerSubscriptionRenewedFromKeepalive_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamerRejectKeepaliveUnknownSubscription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamerRejectKeepaliveUnknownSubscription_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamerErrorRenewingSubscription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamerErrorRenewingSubscription_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreWatcherStartup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreWatcherStartup_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreWatcherShutdown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreWatcherShutdown_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto() {
  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zippylog/zippylogd.proto");
  GOOGLE_CHECK(file != NULL);
  BrokerStartup_descriptor_ = file->message_type(0);
  static const int BrokerStartup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerStartup, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerStartup, store_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerStartup, listen_endpoints_),
  };
  BrokerStartup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BrokerStartup_descriptor_,
      BrokerStartup::default_instance_,
      BrokerStartup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerStartup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerStartup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BrokerStartup));
  BrokerShutdown_descriptor_ = file->message_type(1);
  static const int BrokerShutdown_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerShutdown, id_),
  };
  BrokerShutdown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BrokerShutdown_descriptor_,
      BrokerShutdown::default_instance_,
      BrokerShutdown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerShutdown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerShutdown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BrokerShutdown));
  BrokerReceiveClientMessage_descriptor_ = file->message_type(2);
  static const int BrokerReceiveClientMessage_offsets_[1] = {
  };
  BrokerReceiveClientMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BrokerReceiveClientMessage_descriptor_,
      BrokerReceiveClientMessage::default_instance_,
      BrokerReceiveClientMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerReceiveClientMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerReceiveClientMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BrokerReceiveClientMessage));
  BrokerFlushOutputStreams_descriptor_ = file->message_type(3);
  static const int BrokerFlushOutputStreams_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerFlushOutputStreams, id_),
  };
  BrokerFlushOutputStreams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BrokerFlushOutputStreams_descriptor_,
      BrokerFlushOutputStreams::default_instance_,
      BrokerFlushOutputStreams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerFlushOutputStreams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerFlushOutputStreams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BrokerFlushOutputStreams));
  StreamerStartup_descriptor_ = file->message_type(4);
  static const int StreamerStartup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerStartup, id_),
  };
  StreamerStartup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamerStartup_descriptor_,
      StreamerStartup::default_instance_,
      StreamerStartup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerStartup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerStartup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamerStartup));
  StreamerShutdown_descriptor_ = file->message_type(5);
  static const int StreamerShutdown_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerShutdown, id_),
  };
  StreamerShutdown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamerShutdown_descriptor_,
      StreamerShutdown::default_instance_,
      StreamerShutdown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerShutdown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerShutdown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamerShutdown));
  StreamerSubscriptionExpired_descriptor_ = file->message_type(6);
  static const int StreamerSubscriptionExpired_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerSubscriptionExpired, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerSubscriptionExpired, subscription_),
  };
  StreamerSubscriptionExpired_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamerSubscriptionExpired_descriptor_,
      StreamerSubscriptionExpired::default_instance_,
      StreamerSubscriptionExpired_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerSubscriptionExpired, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerSubscriptionExpired, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamerSubscriptionExpired));
  StreamerReceiveKeepalive_descriptor_ = file->message_type(7);
  static const int StreamerReceiveKeepalive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerReceiveKeepalive, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerReceiveKeepalive, subscription_),
  };
  StreamerReceiveKeepalive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamerReceiveKeepalive_descriptor_,
      StreamerReceiveKeepalive::default_instance_,
      StreamerReceiveKeepalive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerReceiveKeepalive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerReceiveKeepalive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamerReceiveKeepalive));
  StreamerSubscriptionRenewedFromKeepalive_descriptor_ = file->message_type(8);
  static const int StreamerSubscriptionRenewedFromKeepalive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerSubscriptionRenewedFromKeepalive, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerSubscriptionRenewedFromKeepalive, subscription_),
  };
  StreamerSubscriptionRenewedFromKeepalive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamerSubscriptionRenewedFromKeepalive_descriptor_,
      StreamerSubscriptionRenewedFromKeepalive::default_instance_,
      StreamerSubscriptionRenewedFromKeepalive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerSubscriptionRenewedFromKeepalive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerSubscriptionRenewedFromKeepalive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamerSubscriptionRenewedFromKeepalive));
  StreamerRejectKeepaliveUnknownSubscription_descriptor_ = file->message_type(9);
  static const int StreamerRejectKeepaliveUnknownSubscription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerRejectKeepaliveUnknownSubscription, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerRejectKeepaliveUnknownSubscription, subscription_),
  };
  StreamerRejectKeepaliveUnknownSubscription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamerRejectKeepaliveUnknownSubscription_descriptor_,
      StreamerRejectKeepaliveUnknownSubscription::default_instance_,
      StreamerRejectKeepaliveUnknownSubscription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerRejectKeepaliveUnknownSubscription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerRejectKeepaliveUnknownSubscription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamerRejectKeepaliveUnknownSubscription));
  StreamerErrorRenewingSubscription_descriptor_ = file->message_type(10);
  static const int StreamerErrorRenewingSubscription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerErrorRenewingSubscription, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerErrorRenewingSubscription, subscription_),
  };
  StreamerErrorRenewingSubscription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamerErrorRenewingSubscription_descriptor_,
      StreamerErrorRenewingSubscription::default_instance_,
      StreamerErrorRenewingSubscription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerErrorRenewingSubscription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerErrorRenewingSubscription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamerErrorRenewingSubscription));
  StoreWatcherStartup_descriptor_ = file->message_type(11);
  static const int StoreWatcherStartup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreWatcherStartup, id_),
  };
  StoreWatcherStartup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreWatcherStartup_descriptor_,
      StoreWatcherStartup::default_instance_,
      StoreWatcherStartup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreWatcherStartup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreWatcherStartup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreWatcherStartup));
  StoreWatcherShutdown_descriptor_ = file->message_type(12);
  static const int StoreWatcherShutdown_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreWatcherShutdown, id_),
  };
  StoreWatcherShutdown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreWatcherShutdown_descriptor_,
      StoreWatcherShutdown::default_instance_,
      StoreWatcherShutdown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreWatcherShutdown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreWatcherShutdown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreWatcherShutdown));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zippylog_2fzippylogd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BrokerStartup_descriptor_, &BrokerStartup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BrokerShutdown_descriptor_, &BrokerShutdown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BrokerReceiveClientMessage_descriptor_, &BrokerReceiveClientMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BrokerFlushOutputStreams_descriptor_, &BrokerFlushOutputStreams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamerStartup_descriptor_, &StreamerStartup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamerShutdown_descriptor_, &StreamerShutdown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamerSubscriptionExpired_descriptor_, &StreamerSubscriptionExpired::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamerReceiveKeepalive_descriptor_, &StreamerReceiveKeepalive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamerSubscriptionRenewedFromKeepalive_descriptor_, &StreamerSubscriptionRenewedFromKeepalive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamerRejectKeepaliveUnknownSubscription_descriptor_, &StreamerRejectKeepaliveUnknownSubscription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamerErrorRenewingSubscription_descriptor_, &StreamerErrorRenewingSubscription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreWatcherStartup_descriptor_, &StoreWatcherStartup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreWatcherShutdown_descriptor_, &StoreWatcherShutdown::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto() {
  delete BrokerStartup::default_instance_;
  delete BrokerStartup_reflection_;
  delete BrokerShutdown::default_instance_;
  delete BrokerShutdown_reflection_;
  delete BrokerReceiveClientMessage::default_instance_;
  delete BrokerReceiveClientMessage_reflection_;
  delete BrokerFlushOutputStreams::default_instance_;
  delete BrokerFlushOutputStreams_reflection_;
  delete StreamerStartup::default_instance_;
  delete StreamerStartup_reflection_;
  delete StreamerShutdown::default_instance_;
  delete StreamerShutdown_reflection_;
  delete StreamerSubscriptionExpired::default_instance_;
  delete StreamerSubscriptionExpired_reflection_;
  delete StreamerReceiveKeepalive::default_instance_;
  delete StreamerReceiveKeepalive_reflection_;
  delete StreamerSubscriptionRenewedFromKeepalive::default_instance_;
  delete StreamerSubscriptionRenewedFromKeepalive_reflection_;
  delete StreamerRejectKeepaliveUnknownSubscription::default_instance_;
  delete StreamerRejectKeepaliveUnknownSubscription_reflection_;
  delete StreamerErrorRenewingSubscription::default_instance_;
  delete StreamerErrorRenewingSubscription_reflection_;
  delete StoreWatcherStartup::default_instance_;
  delete StoreWatcherStartup_reflection_;
  delete StoreWatcherShutdown::default_instance_;
  delete StoreWatcherShutdown_reflection_;
}

void protobuf_AddDesc_zippylog_2fzippylogd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030zippylog/zippylogd.proto\022\022zippylog.zip"
    "pylogd\"I\n\rBrokerStartup\022\n\n\002id\030\001 \001(\014\022\022\n\ns"
    "tore_path\030\002 \001(\t\022\030\n\020listen_endpoints\030\003 \003("
    "\t\"\034\n\016BrokerShutdown\022\n\n\002id\030\001 \001(\014\"\034\n\032Broke"
    "rReceiveClientMessage\"&\n\030BrokerFlushOutp"
    "utStreams\022\n\n\002id\030\001 \001(\014\"\035\n\017StreamerStartup"
    "\022\n\n\002id\030\001 \001(\014\"\036\n\020StreamerShutdown\022\n\n\002id\030\001"
    " \001(\014\"?\n\033StreamerSubscriptionExpired\022\n\n\002i"
    "d\030\001 \001(\014\022\024\n\014subscription\030\002 \001(\014\"<\n\030Streame"
    "rReceiveKeepalive\022\n\n\002id\030\001 \001(\014\022\024\n\014subscri"
    "ption\030\002 \001(\014\"L\n(StreamerSubscriptionRenew"
    "edFromKeepalive\022\n\n\002id\030\001 \001(\014\022\024\n\014subscript"
    "ion\030\002 \001(\014\"N\n*StreamerRejectKeepaliveUnkn"
    "ownSubscription\022\n\n\002id\030\001 \001(\014\022\024\n\014subscript"
    "ion\030\002 \001(\014\"E\n!StreamerErrorRenewingSubscr"
    "iption\022\n\n\002id\030\001 \001(\014\022\024\n\014subscription\030\002 \001(\014"
    "\"!\n\023StoreWatcherStartup\022\n\n\002id\030\001 \001(\014\"\"\n\024S"
    "toreWatcherShutdown\022\n\n\002id\030\001 \001(\014", 711);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zippylog/zippylogd.proto", &protobuf_RegisterTypes);
  BrokerStartup::default_instance_ = new BrokerStartup();
  BrokerShutdown::default_instance_ = new BrokerShutdown();
  BrokerReceiveClientMessage::default_instance_ = new BrokerReceiveClientMessage();
  BrokerFlushOutputStreams::default_instance_ = new BrokerFlushOutputStreams();
  StreamerStartup::default_instance_ = new StreamerStartup();
  StreamerShutdown::default_instance_ = new StreamerShutdown();
  StreamerSubscriptionExpired::default_instance_ = new StreamerSubscriptionExpired();
  StreamerReceiveKeepalive::default_instance_ = new StreamerReceiveKeepalive();
  StreamerSubscriptionRenewedFromKeepalive::default_instance_ = new StreamerSubscriptionRenewedFromKeepalive();
  StreamerRejectKeepaliveUnknownSubscription::default_instance_ = new StreamerRejectKeepaliveUnknownSubscription();
  StreamerErrorRenewingSubscription::default_instance_ = new StreamerErrorRenewingSubscription();
  StoreWatcherStartup::default_instance_ = new StoreWatcherStartup();
  StoreWatcherShutdown::default_instance_ = new StoreWatcherShutdown();
  BrokerStartup::default_instance_->InitAsDefaultInstance();
  BrokerShutdown::default_instance_->InitAsDefaultInstance();
  BrokerReceiveClientMessage::default_instance_->InitAsDefaultInstance();
  BrokerFlushOutputStreams::default_instance_->InitAsDefaultInstance();
  StreamerStartup::default_instance_->InitAsDefaultInstance();
  StreamerShutdown::default_instance_->InitAsDefaultInstance();
  StreamerSubscriptionExpired::default_instance_->InitAsDefaultInstance();
  StreamerReceiveKeepalive::default_instance_->InitAsDefaultInstance();
  StreamerSubscriptionRenewedFromKeepalive::default_instance_->InitAsDefaultInstance();
  StreamerRejectKeepaliveUnknownSubscription::default_instance_->InitAsDefaultInstance();
  StreamerErrorRenewingSubscription::default_instance_->InitAsDefaultInstance();
  StoreWatcherStartup::default_instance_->InitAsDefaultInstance();
  StoreWatcherShutdown::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zippylog_2fzippylogd_2eproto {
  StaticDescriptorInitializer_zippylog_2fzippylogd_2eproto() {
    protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  }
} static_descriptor_initializer_zippylog_2fzippylogd_2eproto_;


// ===================================================================

const ::std::string BrokerStartup::_default_id_;
const ::std::string BrokerStartup::_default_store_path_;
#ifndef _MSC_VER
const int BrokerStartup::kIdFieldNumber;
const int BrokerStartup::kStorePathFieldNumber;
const int BrokerStartup::kListenEndpointsFieldNumber;
#endif  // !_MSC_VER

BrokerStartup::BrokerStartup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BrokerStartup::InitAsDefaultInstance() {
}

BrokerStartup::BrokerStartup(const BrokerStartup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BrokerStartup::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  store_path_ = const_cast< ::std::string*>(&_default_store_path_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrokerStartup::~BrokerStartup() {
  SharedDtor();
}

void BrokerStartup::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (store_path_ != &_default_store_path_) {
    delete store_path_;
  }
  if (this != default_instance_) {
  }
}

void BrokerStartup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrokerStartup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrokerStartup_descriptor_;
}

const BrokerStartup& BrokerStartup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

BrokerStartup* BrokerStartup::default_instance_ = NULL;

BrokerStartup* BrokerStartup::New() const {
  return new BrokerStartup;
}

void BrokerStartup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (store_path_ != &_default_store_path_) {
        store_path_->clear();
      }
    }
  }
  listen_endpoints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BrokerStartup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_store_path;
        break;
      }
      
      // optional string store_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_store_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->store_path().data(), this->store_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_listen_endpoints;
        break;
      }
      
      // repeated string listen_endpoints = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_listen_endpoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_listen_endpoints()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->listen_endpoints(0).data(), this->listen_endpoints(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_listen_endpoints;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BrokerStartup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  // optional string store_path = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->store_path().data(), this->store_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->store_path(), output);
  }
  
  // repeated string listen_endpoints = 3;
  for (int i = 0; i < this->listen_endpoints_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->listen_endpoints(i).data(), this->listen_endpoints(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->listen_endpoints(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BrokerStartup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  // optional string store_path = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->store_path().data(), this->store_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->store_path(), target);
  }
  
  // repeated string listen_endpoints = 3;
  for (int i = 0; i < this->listen_endpoints_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->listen_endpoints(i).data(), this->listen_endpoints(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->listen_endpoints(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BrokerStartup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
    // optional string store_path = 2;
    if (has_store_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->store_path());
    }
    
  }
  // repeated string listen_endpoints = 3;
  total_size += 1 * this->listen_endpoints_size();
  for (int i = 0; i < this->listen_endpoints_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->listen_endpoints(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrokerStartup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BrokerStartup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BrokerStartup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BrokerStartup::MergeFrom(const BrokerStartup& from) {
  GOOGLE_CHECK_NE(&from, this);
  listen_endpoints_.MergeFrom(from.listen_endpoints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_store_path(from.store_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BrokerStartup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrokerStartup::CopyFrom(const BrokerStartup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerStartup::IsInitialized() const {
  
  return true;
}

void BrokerStartup::Swap(BrokerStartup* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(store_path_, other->store_path_);
    listen_endpoints_.Swap(&other->listen_endpoints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BrokerStartup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrokerStartup_descriptor_;
  metadata.reflection = BrokerStartup_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string BrokerShutdown::_default_id_;
#ifndef _MSC_VER
const int BrokerShutdown::kIdFieldNumber;
#endif  // !_MSC_VER

BrokerShutdown::BrokerShutdown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BrokerShutdown::InitAsDefaultInstance() {
}

BrokerShutdown::BrokerShutdown(const BrokerShutdown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BrokerShutdown::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrokerShutdown::~BrokerShutdown() {
  SharedDtor();
}

void BrokerShutdown::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void BrokerShutdown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrokerShutdown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrokerShutdown_descriptor_;
}

const BrokerShutdown& BrokerShutdown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

BrokerShutdown* BrokerShutdown::default_instance_ = NULL;

BrokerShutdown* BrokerShutdown::New() const {
  return new BrokerShutdown;
}

void BrokerShutdown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BrokerShutdown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BrokerShutdown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BrokerShutdown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BrokerShutdown::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrokerShutdown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BrokerShutdown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BrokerShutdown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BrokerShutdown::MergeFrom(const BrokerShutdown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BrokerShutdown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrokerShutdown::CopyFrom(const BrokerShutdown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerShutdown::IsInitialized() const {
  
  return true;
}

void BrokerShutdown::Swap(BrokerShutdown* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BrokerShutdown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrokerShutdown_descriptor_;
  metadata.reflection = BrokerShutdown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BrokerReceiveClientMessage::BrokerReceiveClientMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BrokerReceiveClientMessage::InitAsDefaultInstance() {
}

BrokerReceiveClientMessage::BrokerReceiveClientMessage(const BrokerReceiveClientMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BrokerReceiveClientMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrokerReceiveClientMessage::~BrokerReceiveClientMessage() {
  SharedDtor();
}

void BrokerReceiveClientMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BrokerReceiveClientMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrokerReceiveClientMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrokerReceiveClientMessage_descriptor_;
}

const BrokerReceiveClientMessage& BrokerReceiveClientMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

BrokerReceiveClientMessage* BrokerReceiveClientMessage::default_instance_ = NULL;

BrokerReceiveClientMessage* BrokerReceiveClientMessage::New() const {
  return new BrokerReceiveClientMessage;
}

void BrokerReceiveClientMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BrokerReceiveClientMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void BrokerReceiveClientMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BrokerReceiveClientMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BrokerReceiveClientMessage::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrokerReceiveClientMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BrokerReceiveClientMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BrokerReceiveClientMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BrokerReceiveClientMessage::MergeFrom(const BrokerReceiveClientMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BrokerReceiveClientMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrokerReceiveClientMessage::CopyFrom(const BrokerReceiveClientMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerReceiveClientMessage::IsInitialized() const {
  
  return true;
}

void BrokerReceiveClientMessage::Swap(BrokerReceiveClientMessage* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BrokerReceiveClientMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrokerReceiveClientMessage_descriptor_;
  metadata.reflection = BrokerReceiveClientMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string BrokerFlushOutputStreams::_default_id_;
#ifndef _MSC_VER
const int BrokerFlushOutputStreams::kIdFieldNumber;
#endif  // !_MSC_VER

BrokerFlushOutputStreams::BrokerFlushOutputStreams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BrokerFlushOutputStreams::InitAsDefaultInstance() {
}

BrokerFlushOutputStreams::BrokerFlushOutputStreams(const BrokerFlushOutputStreams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BrokerFlushOutputStreams::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrokerFlushOutputStreams::~BrokerFlushOutputStreams() {
  SharedDtor();
}

void BrokerFlushOutputStreams::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void BrokerFlushOutputStreams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrokerFlushOutputStreams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrokerFlushOutputStreams_descriptor_;
}

const BrokerFlushOutputStreams& BrokerFlushOutputStreams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

BrokerFlushOutputStreams* BrokerFlushOutputStreams::default_instance_ = NULL;

BrokerFlushOutputStreams* BrokerFlushOutputStreams::New() const {
  return new BrokerFlushOutputStreams;
}

void BrokerFlushOutputStreams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BrokerFlushOutputStreams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BrokerFlushOutputStreams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BrokerFlushOutputStreams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BrokerFlushOutputStreams::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrokerFlushOutputStreams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BrokerFlushOutputStreams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BrokerFlushOutputStreams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BrokerFlushOutputStreams::MergeFrom(const BrokerFlushOutputStreams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BrokerFlushOutputStreams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrokerFlushOutputStreams::CopyFrom(const BrokerFlushOutputStreams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerFlushOutputStreams::IsInitialized() const {
  
  return true;
}

void BrokerFlushOutputStreams::Swap(BrokerFlushOutputStreams* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BrokerFlushOutputStreams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrokerFlushOutputStreams_descriptor_;
  metadata.reflection = BrokerFlushOutputStreams_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string StreamerStartup::_default_id_;
#ifndef _MSC_VER
const int StreamerStartup::kIdFieldNumber;
#endif  // !_MSC_VER

StreamerStartup::StreamerStartup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamerStartup::InitAsDefaultInstance() {
}

StreamerStartup::StreamerStartup(const StreamerStartup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamerStartup::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamerStartup::~StreamerStartup() {
  SharedDtor();
}

void StreamerStartup::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void StreamerStartup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamerStartup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamerStartup_descriptor_;
}

const StreamerStartup& StreamerStartup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

StreamerStartup* StreamerStartup::default_instance_ = NULL;

StreamerStartup* StreamerStartup::New() const {
  return new StreamerStartup;
}

void StreamerStartup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamerStartup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamerStartup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamerStartup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamerStartup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamerStartup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamerStartup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamerStartup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamerStartup::MergeFrom(const StreamerStartup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamerStartup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamerStartup::CopyFrom(const StreamerStartup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamerStartup::IsInitialized() const {
  
  return true;
}

void StreamerStartup::Swap(StreamerStartup* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamerStartup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamerStartup_descriptor_;
  metadata.reflection = StreamerStartup_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string StreamerShutdown::_default_id_;
#ifndef _MSC_VER
const int StreamerShutdown::kIdFieldNumber;
#endif  // !_MSC_VER

StreamerShutdown::StreamerShutdown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamerShutdown::InitAsDefaultInstance() {
}

StreamerShutdown::StreamerShutdown(const StreamerShutdown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamerShutdown::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamerShutdown::~StreamerShutdown() {
  SharedDtor();
}

void StreamerShutdown::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void StreamerShutdown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamerShutdown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamerShutdown_descriptor_;
}

const StreamerShutdown& StreamerShutdown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

StreamerShutdown* StreamerShutdown::default_instance_ = NULL;

StreamerShutdown* StreamerShutdown::New() const {
  return new StreamerShutdown;
}

void StreamerShutdown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamerShutdown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamerShutdown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamerShutdown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamerShutdown::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamerShutdown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamerShutdown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamerShutdown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamerShutdown::MergeFrom(const StreamerShutdown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamerShutdown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamerShutdown::CopyFrom(const StreamerShutdown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamerShutdown::IsInitialized() const {
  
  return true;
}

void StreamerShutdown::Swap(StreamerShutdown* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamerShutdown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamerShutdown_descriptor_;
  metadata.reflection = StreamerShutdown_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string StreamerSubscriptionExpired::_default_id_;
const ::std::string StreamerSubscriptionExpired::_default_subscription_;
#ifndef _MSC_VER
const int StreamerSubscriptionExpired::kIdFieldNumber;
const int StreamerSubscriptionExpired::kSubscriptionFieldNumber;
#endif  // !_MSC_VER

StreamerSubscriptionExpired::StreamerSubscriptionExpired()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamerSubscriptionExpired::InitAsDefaultInstance() {
}

StreamerSubscriptionExpired::StreamerSubscriptionExpired(const StreamerSubscriptionExpired& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamerSubscriptionExpired::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  subscription_ = const_cast< ::std::string*>(&_default_subscription_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamerSubscriptionExpired::~StreamerSubscriptionExpired() {
  SharedDtor();
}

void StreamerSubscriptionExpired::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (subscription_ != &_default_subscription_) {
    delete subscription_;
  }
  if (this != default_instance_) {
  }
}

void StreamerSubscriptionExpired::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamerSubscriptionExpired::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamerSubscriptionExpired_descriptor_;
}

const StreamerSubscriptionExpired& StreamerSubscriptionExpired::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

StreamerSubscriptionExpired* StreamerSubscriptionExpired::default_instance_ = NULL;

StreamerSubscriptionExpired* StreamerSubscriptionExpired::New() const {
  return new StreamerSubscriptionExpired;
}

void StreamerSubscriptionExpired::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (subscription_ != &_default_subscription_) {
        subscription_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamerSubscriptionExpired::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscription;
        break;
      }
      
      // optional bytes subscription = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_subscription()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamerSubscriptionExpired::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  // optional bytes subscription = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->subscription(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamerSubscriptionExpired::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  // optional bytes subscription = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->subscription(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamerSubscriptionExpired::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
    // optional bytes subscription = 2;
    if (has_subscription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->subscription());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamerSubscriptionExpired::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamerSubscriptionExpired* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamerSubscriptionExpired*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamerSubscriptionExpired::MergeFrom(const StreamerSubscriptionExpired& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_subscription(from.subscription());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamerSubscriptionExpired::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamerSubscriptionExpired::CopyFrom(const StreamerSubscriptionExpired& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamerSubscriptionExpired::IsInitialized() const {
  
  return true;
}

void StreamerSubscriptionExpired::Swap(StreamerSubscriptionExpired* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(subscription_, other->subscription_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamerSubscriptionExpired::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamerSubscriptionExpired_descriptor_;
  metadata.reflection = StreamerSubscriptionExpired_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string StreamerReceiveKeepalive::_default_id_;
const ::std::string StreamerReceiveKeepalive::_default_subscription_;
#ifndef _MSC_VER
const int StreamerReceiveKeepalive::kIdFieldNumber;
const int StreamerReceiveKeepalive::kSubscriptionFieldNumber;
#endif  // !_MSC_VER

StreamerReceiveKeepalive::StreamerReceiveKeepalive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamerReceiveKeepalive::InitAsDefaultInstance() {
}

StreamerReceiveKeepalive::StreamerReceiveKeepalive(const StreamerReceiveKeepalive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamerReceiveKeepalive::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  subscription_ = const_cast< ::std::string*>(&_default_subscription_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamerReceiveKeepalive::~StreamerReceiveKeepalive() {
  SharedDtor();
}

void StreamerReceiveKeepalive::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (subscription_ != &_default_subscription_) {
    delete subscription_;
  }
  if (this != default_instance_) {
  }
}

void StreamerReceiveKeepalive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamerReceiveKeepalive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamerReceiveKeepalive_descriptor_;
}

const StreamerReceiveKeepalive& StreamerReceiveKeepalive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

StreamerReceiveKeepalive* StreamerReceiveKeepalive::default_instance_ = NULL;

StreamerReceiveKeepalive* StreamerReceiveKeepalive::New() const {
  return new StreamerReceiveKeepalive;
}

void StreamerReceiveKeepalive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (subscription_ != &_default_subscription_) {
        subscription_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamerReceiveKeepalive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscription;
        break;
      }
      
      // optional bytes subscription = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_subscription()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamerReceiveKeepalive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  // optional bytes subscription = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->subscription(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamerReceiveKeepalive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  // optional bytes subscription = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->subscription(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamerReceiveKeepalive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
    // optional bytes subscription = 2;
    if (has_subscription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->subscription());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamerReceiveKeepalive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamerReceiveKeepalive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamerReceiveKeepalive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamerReceiveKeepalive::MergeFrom(const StreamerReceiveKeepalive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_subscription(from.subscription());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamerReceiveKeepalive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamerReceiveKeepalive::CopyFrom(const StreamerReceiveKeepalive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamerReceiveKeepalive::IsInitialized() const {
  
  return true;
}

void StreamerReceiveKeepalive::Swap(StreamerReceiveKeepalive* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(subscription_, other->subscription_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamerReceiveKeepalive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamerReceiveKeepalive_descriptor_;
  metadata.reflection = StreamerReceiveKeepalive_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string StreamerSubscriptionRenewedFromKeepalive::_default_id_;
const ::std::string StreamerSubscriptionRenewedFromKeepalive::_default_subscription_;
#ifndef _MSC_VER
const int StreamerSubscriptionRenewedFromKeepalive::kIdFieldNumber;
const int StreamerSubscriptionRenewedFromKeepalive::kSubscriptionFieldNumber;
#endif  // !_MSC_VER

StreamerSubscriptionRenewedFromKeepalive::StreamerSubscriptionRenewedFromKeepalive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamerSubscriptionRenewedFromKeepalive::InitAsDefaultInstance() {
}

StreamerSubscriptionRenewedFromKeepalive::StreamerSubscriptionRenewedFromKeepalive(const StreamerSubscriptionRenewedFromKeepalive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamerSubscriptionRenewedFromKeepalive::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  subscription_ = const_cast< ::std::string*>(&_default_subscription_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamerSubscriptionRenewedFromKeepalive::~StreamerSubscriptionRenewedFromKeepalive() {
  SharedDtor();
}

void StreamerSubscriptionRenewedFromKeepalive::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (subscription_ != &_default_subscription_) {
    delete subscription_;
  }
  if (this != default_instance_) {
  }
}

void StreamerSubscriptionRenewedFromKeepalive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamerSubscriptionRenewedFromKeepalive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamerSubscriptionRenewedFromKeepalive_descriptor_;
}

const StreamerSubscriptionRenewedFromKeepalive& StreamerSubscriptionRenewedFromKeepalive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

StreamerSubscriptionRenewedFromKeepalive* StreamerSubscriptionRenewedFromKeepalive::default_instance_ = NULL;

StreamerSubscriptionRenewedFromKeepalive* StreamerSubscriptionRenewedFromKeepalive::New() const {
  return new StreamerSubscriptionRenewedFromKeepalive;
}

void StreamerSubscriptionRenewedFromKeepalive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (subscription_ != &_default_subscription_) {
        subscription_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamerSubscriptionRenewedFromKeepalive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscription;
        break;
      }
      
      // optional bytes subscription = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_subscription()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamerSubscriptionRenewedFromKeepalive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  // optional bytes subscription = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->subscription(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamerSubscriptionRenewedFromKeepalive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  // optional bytes subscription = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->subscription(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamerSubscriptionRenewedFromKeepalive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
    // optional bytes subscription = 2;
    if (has_subscription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->subscription());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamerSubscriptionRenewedFromKeepalive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamerSubscriptionRenewedFromKeepalive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamerSubscriptionRenewedFromKeepalive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamerSubscriptionRenewedFromKeepalive::MergeFrom(const StreamerSubscriptionRenewedFromKeepalive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_subscription(from.subscription());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamerSubscriptionRenewedFromKeepalive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamerSubscriptionRenewedFromKeepalive::CopyFrom(const StreamerSubscriptionRenewedFromKeepalive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamerSubscriptionRenewedFromKeepalive::IsInitialized() const {
  
  return true;
}

void StreamerSubscriptionRenewedFromKeepalive::Swap(StreamerSubscriptionRenewedFromKeepalive* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(subscription_, other->subscription_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamerSubscriptionRenewedFromKeepalive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamerSubscriptionRenewedFromKeepalive_descriptor_;
  metadata.reflection = StreamerSubscriptionRenewedFromKeepalive_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string StreamerRejectKeepaliveUnknownSubscription::_default_id_;
const ::std::string StreamerRejectKeepaliveUnknownSubscription::_default_subscription_;
#ifndef _MSC_VER
const int StreamerRejectKeepaliveUnknownSubscription::kIdFieldNumber;
const int StreamerRejectKeepaliveUnknownSubscription::kSubscriptionFieldNumber;
#endif  // !_MSC_VER

StreamerRejectKeepaliveUnknownSubscription::StreamerRejectKeepaliveUnknownSubscription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamerRejectKeepaliveUnknownSubscription::InitAsDefaultInstance() {
}

StreamerRejectKeepaliveUnknownSubscription::StreamerRejectKeepaliveUnknownSubscription(const StreamerRejectKeepaliveUnknownSubscription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamerRejectKeepaliveUnknownSubscription::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  subscription_ = const_cast< ::std::string*>(&_default_subscription_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamerRejectKeepaliveUnknownSubscription::~StreamerRejectKeepaliveUnknownSubscription() {
  SharedDtor();
}

void StreamerRejectKeepaliveUnknownSubscription::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (subscription_ != &_default_subscription_) {
    delete subscription_;
  }
  if (this != default_instance_) {
  }
}

void StreamerRejectKeepaliveUnknownSubscription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamerRejectKeepaliveUnknownSubscription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamerRejectKeepaliveUnknownSubscription_descriptor_;
}

const StreamerRejectKeepaliveUnknownSubscription& StreamerRejectKeepaliveUnknownSubscription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

StreamerRejectKeepaliveUnknownSubscription* StreamerRejectKeepaliveUnknownSubscription::default_instance_ = NULL;

StreamerRejectKeepaliveUnknownSubscription* StreamerRejectKeepaliveUnknownSubscription::New() const {
  return new StreamerRejectKeepaliveUnknownSubscription;
}

void StreamerRejectKeepaliveUnknownSubscription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (subscription_ != &_default_subscription_) {
        subscription_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamerRejectKeepaliveUnknownSubscription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscription;
        break;
      }
      
      // optional bytes subscription = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_subscription()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamerRejectKeepaliveUnknownSubscription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  // optional bytes subscription = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->subscription(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamerRejectKeepaliveUnknownSubscription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  // optional bytes subscription = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->subscription(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamerRejectKeepaliveUnknownSubscription::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
    // optional bytes subscription = 2;
    if (has_subscription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->subscription());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamerRejectKeepaliveUnknownSubscription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamerRejectKeepaliveUnknownSubscription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamerRejectKeepaliveUnknownSubscription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamerRejectKeepaliveUnknownSubscription::MergeFrom(const StreamerRejectKeepaliveUnknownSubscription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_subscription(from.subscription());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamerRejectKeepaliveUnknownSubscription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamerRejectKeepaliveUnknownSubscription::CopyFrom(const StreamerRejectKeepaliveUnknownSubscription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamerRejectKeepaliveUnknownSubscription::IsInitialized() const {
  
  return true;
}

void StreamerRejectKeepaliveUnknownSubscription::Swap(StreamerRejectKeepaliveUnknownSubscription* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(subscription_, other->subscription_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamerRejectKeepaliveUnknownSubscription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamerRejectKeepaliveUnknownSubscription_descriptor_;
  metadata.reflection = StreamerRejectKeepaliveUnknownSubscription_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string StreamerErrorRenewingSubscription::_default_id_;
const ::std::string StreamerErrorRenewingSubscription::_default_subscription_;
#ifndef _MSC_VER
const int StreamerErrorRenewingSubscription::kIdFieldNumber;
const int StreamerErrorRenewingSubscription::kSubscriptionFieldNumber;
#endif  // !_MSC_VER

StreamerErrorRenewingSubscription::StreamerErrorRenewingSubscription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamerErrorRenewingSubscription::InitAsDefaultInstance() {
}

StreamerErrorRenewingSubscription::StreamerErrorRenewingSubscription(const StreamerErrorRenewingSubscription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamerErrorRenewingSubscription::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  subscription_ = const_cast< ::std::string*>(&_default_subscription_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamerErrorRenewingSubscription::~StreamerErrorRenewingSubscription() {
  SharedDtor();
}

void StreamerErrorRenewingSubscription::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (subscription_ != &_default_subscription_) {
    delete subscription_;
  }
  if (this != default_instance_) {
  }
}

void StreamerErrorRenewingSubscription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamerErrorRenewingSubscription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamerErrorRenewingSubscription_descriptor_;
}

const StreamerErrorRenewingSubscription& StreamerErrorRenewingSubscription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

StreamerErrorRenewingSubscription* StreamerErrorRenewingSubscription::default_instance_ = NULL;

StreamerErrorRenewingSubscription* StreamerErrorRenewingSubscription::New() const {
  return new StreamerErrorRenewingSubscription;
}

void StreamerErrorRenewingSubscription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (subscription_ != &_default_subscription_) {
        subscription_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamerErrorRenewingSubscription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscription;
        break;
      }
      
      // optional bytes subscription = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_subscription()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamerErrorRenewingSubscription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  // optional bytes subscription = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->subscription(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamerErrorRenewingSubscription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  // optional bytes subscription = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->subscription(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamerErrorRenewingSubscription::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
    // optional bytes subscription = 2;
    if (has_subscription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->subscription());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamerErrorRenewingSubscription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamerErrorRenewingSubscription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamerErrorRenewingSubscription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamerErrorRenewingSubscription::MergeFrom(const StreamerErrorRenewingSubscription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_subscription(from.subscription());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamerErrorRenewingSubscription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamerErrorRenewingSubscription::CopyFrom(const StreamerErrorRenewingSubscription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamerErrorRenewingSubscription::IsInitialized() const {
  
  return true;
}

void StreamerErrorRenewingSubscription::Swap(StreamerErrorRenewingSubscription* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(subscription_, other->subscription_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamerErrorRenewingSubscription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamerErrorRenewingSubscription_descriptor_;
  metadata.reflection = StreamerErrorRenewingSubscription_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string StoreWatcherStartup::_default_id_;
#ifndef _MSC_VER
const int StoreWatcherStartup::kIdFieldNumber;
#endif  // !_MSC_VER

StoreWatcherStartup::StoreWatcherStartup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreWatcherStartup::InitAsDefaultInstance() {
}

StoreWatcherStartup::StoreWatcherStartup(const StoreWatcherStartup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreWatcherStartup::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreWatcherStartup::~StoreWatcherStartup() {
  SharedDtor();
}

void StoreWatcherStartup::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void StoreWatcherStartup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreWatcherStartup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreWatcherStartup_descriptor_;
}

const StoreWatcherStartup& StoreWatcherStartup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

StoreWatcherStartup* StoreWatcherStartup::default_instance_ = NULL;

StoreWatcherStartup* StoreWatcherStartup::New() const {
  return new StoreWatcherStartup;
}

void StoreWatcherStartup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreWatcherStartup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreWatcherStartup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreWatcherStartup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreWatcherStartup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreWatcherStartup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreWatcherStartup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreWatcherStartup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreWatcherStartup::MergeFrom(const StoreWatcherStartup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreWatcherStartup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreWatcherStartup::CopyFrom(const StoreWatcherStartup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreWatcherStartup::IsInitialized() const {
  
  return true;
}

void StoreWatcherStartup::Swap(StoreWatcherStartup* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreWatcherStartup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreWatcherStartup_descriptor_;
  metadata.reflection = StoreWatcherStartup_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string StoreWatcherShutdown::_default_id_;
#ifndef _MSC_VER
const int StoreWatcherShutdown::kIdFieldNumber;
#endif  // !_MSC_VER

StoreWatcherShutdown::StoreWatcherShutdown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreWatcherShutdown::InitAsDefaultInstance() {
}

StoreWatcherShutdown::StoreWatcherShutdown(const StoreWatcherShutdown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreWatcherShutdown::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreWatcherShutdown::~StoreWatcherShutdown() {
  SharedDtor();
}

void StoreWatcherShutdown::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void StoreWatcherShutdown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreWatcherShutdown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreWatcherShutdown_descriptor_;
}

const StoreWatcherShutdown& StoreWatcherShutdown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

StoreWatcherShutdown* StoreWatcherShutdown::default_instance_ = NULL;

StoreWatcherShutdown* StoreWatcherShutdown::New() const {
  return new StoreWatcherShutdown;
}

void StoreWatcherShutdown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreWatcherShutdown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreWatcherShutdown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreWatcherShutdown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreWatcherShutdown::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreWatcherShutdown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreWatcherShutdown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreWatcherShutdown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreWatcherShutdown::MergeFrom(const StoreWatcherShutdown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreWatcherShutdown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreWatcherShutdown::CopyFrom(const StoreWatcherShutdown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreWatcherShutdown::IsInitialized() const {
  
  return true;
}

void StoreWatcherShutdown::Swap(StoreWatcherShutdown* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreWatcherShutdown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreWatcherShutdown_descriptor_;
  metadata.reflection = StoreWatcherShutdown_reflection_;
  return metadata;
}



bool BrokerStartup::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool BrokerStartup::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool BrokerShutdown::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool BrokerShutdown::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool BrokerReceiveClientMessage::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool BrokerReceiveClientMessage::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool BrokerFlushOutputStreams::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool BrokerFlushOutputStreams::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StreamerStartup::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StreamerStartup::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StreamerShutdown::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StreamerShutdown::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StreamerSubscriptionExpired::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StreamerSubscriptionExpired::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StreamerReceiveKeepalive::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StreamerReceiveKeepalive::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StreamerSubscriptionRenewedFromKeepalive::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StreamerSubscriptionRenewedFromKeepalive::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StreamerRejectKeepaliveUnknownSubscription::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StreamerRejectKeepaliveUnknownSubscription::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StreamerErrorRenewingSubscription::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StreamerErrorRenewingSubscription::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StoreWatcherStartup::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StoreWatcherStartup::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StoreWatcherShutdown::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StoreWatcherShutdown::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}
// @@protoc_insertion_point(namespace_scope)

}  // namespace zippylogd
}  // namespace zippylog

// @@protoc_insertion_point(global_scope)
