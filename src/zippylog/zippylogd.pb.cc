// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zippylog/zippylogd.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zippylog {
namespace zippylogd {

namespace {

const ::google::protobuf::Descriptor* BrokerStartup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrokerStartup_reflection_ = NULL;
const ::google::protobuf::Descriptor* BrokerShutdown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrokerShutdown_reflection_ = NULL;
const ::google::protobuf::Descriptor* BrokerReceiveClientMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrokerReceiveClientMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerFailReceiveMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerFailReceiveMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerReceiveEmptyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerReceiveEmptyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerRequestParseFailure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerRequestParseFailure_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerRequestEmptyEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerRequestEmptyEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerInvalidMessageEnumeration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerInvalidMessageEnumeration_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerBeginProcessStoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerBeginProcessStoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerEndProcessStoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerEndProcessStoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerReceiveInvalidGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerReceiveInvalidGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerGetInvalidStream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerGetInvalidStream_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerGetInvalidOffset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerGetInvalidOffset_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerBeginProcessGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerBeginProcessGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerEndProcessGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerEndProcessGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerSendErrorResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerSendErrorResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamerSubscriptionExpired_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamerSubscriptionExpired_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamerReceiveKeepalive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamerReceiveKeepalive_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamerSubscriptionRenewedFromKeepalive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamerSubscriptionRenewedFromKeepalive_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamerRejectKeepaliveUnknownSubscription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamerRejectKeepaliveUnknownSubscription_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamerErrorRenewingSubscription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamerErrorRenewingSubscription_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto() {
  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zippylog/zippylogd.proto");
  GOOGLE_CHECK(file != NULL);
  BrokerStartup_descriptor_ = file->message_type(0);
  static const int BrokerStartup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerStartup, store_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerStartup, listen_endpoints_),
  };
  BrokerStartup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BrokerStartup_descriptor_,
      BrokerStartup::default_instance_,
      BrokerStartup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerStartup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerStartup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BrokerStartup));
  BrokerShutdown_descriptor_ = file->message_type(1);
  static const int BrokerShutdown_offsets_[1] = {
  };
  BrokerShutdown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BrokerShutdown_descriptor_,
      BrokerShutdown::default_instance_,
      BrokerShutdown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerShutdown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerShutdown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BrokerShutdown));
  BrokerReceiveClientMessage_descriptor_ = file->message_type(2);
  static const int BrokerReceiveClientMessage_offsets_[1] = {
  };
  BrokerReceiveClientMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BrokerReceiveClientMessage_descriptor_,
      BrokerReceiveClientMessage::default_instance_,
      BrokerReceiveClientMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerReceiveClientMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerReceiveClientMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BrokerReceiveClientMessage));
  WorkerFailReceiveMessage_descriptor_ = file->message_type(3);
  static const int WorkerFailReceiveMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerFailReceiveMessage, worker_),
  };
  WorkerFailReceiveMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerFailReceiveMessage_descriptor_,
      WorkerFailReceiveMessage::default_instance_,
      WorkerFailReceiveMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerFailReceiveMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerFailReceiveMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerFailReceiveMessage));
  WorkerReceiveEmptyMessage_descriptor_ = file->message_type(4);
  static const int WorkerReceiveEmptyMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReceiveEmptyMessage, worker_),
  };
  WorkerReceiveEmptyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerReceiveEmptyMessage_descriptor_,
      WorkerReceiveEmptyMessage::default_instance_,
      WorkerReceiveEmptyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReceiveEmptyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReceiveEmptyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerReceiveEmptyMessage));
  WorkerRequestParseFailure_descriptor_ = file->message_type(5);
  static const int WorkerRequestParseFailure_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerRequestParseFailure, worker_),
  };
  WorkerRequestParseFailure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerRequestParseFailure_descriptor_,
      WorkerRequestParseFailure::default_instance_,
      WorkerRequestParseFailure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerRequestParseFailure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerRequestParseFailure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerRequestParseFailure));
  WorkerRequestEmptyEnvelope_descriptor_ = file->message_type(6);
  static const int WorkerRequestEmptyEnvelope_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerRequestEmptyEnvelope, worker_),
  };
  WorkerRequestEmptyEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerRequestEmptyEnvelope_descriptor_,
      WorkerRequestEmptyEnvelope::default_instance_,
      WorkerRequestEmptyEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerRequestEmptyEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerRequestEmptyEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerRequestEmptyEnvelope));
  WorkerInvalidMessageEnumeration_descriptor_ = file->message_type(7);
  static const int WorkerInvalidMessageEnumeration_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerInvalidMessageEnumeration, worker_),
  };
  WorkerInvalidMessageEnumeration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerInvalidMessageEnumeration_descriptor_,
      WorkerInvalidMessageEnumeration::default_instance_,
      WorkerInvalidMessageEnumeration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerInvalidMessageEnumeration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerInvalidMessageEnumeration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerInvalidMessageEnumeration));
  WorkerBeginProcessStoreInfo_descriptor_ = file->message_type(8);
  static const int WorkerBeginProcessStoreInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerBeginProcessStoreInfo, worker_),
  };
  WorkerBeginProcessStoreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerBeginProcessStoreInfo_descriptor_,
      WorkerBeginProcessStoreInfo::default_instance_,
      WorkerBeginProcessStoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerBeginProcessStoreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerBeginProcessStoreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerBeginProcessStoreInfo));
  WorkerEndProcessStoreInfo_descriptor_ = file->message_type(9);
  static const int WorkerEndProcessStoreInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerEndProcessStoreInfo, worker_),
  };
  WorkerEndProcessStoreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerEndProcessStoreInfo_descriptor_,
      WorkerEndProcessStoreInfo::default_instance_,
      WorkerEndProcessStoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerEndProcessStoreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerEndProcessStoreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerEndProcessStoreInfo));
  WorkerReceiveInvalidGet_descriptor_ = file->message_type(10);
  static const int WorkerReceiveInvalidGet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReceiveInvalidGet, worker_),
  };
  WorkerReceiveInvalidGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerReceiveInvalidGet_descriptor_,
      WorkerReceiveInvalidGet::default_instance_,
      WorkerReceiveInvalidGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReceiveInvalidGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerReceiveInvalidGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerReceiveInvalidGet));
  WorkerGetInvalidStream_descriptor_ = file->message_type(11);
  static const int WorkerGetInvalidStream_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerGetInvalidStream, worker_),
  };
  WorkerGetInvalidStream_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerGetInvalidStream_descriptor_,
      WorkerGetInvalidStream::default_instance_,
      WorkerGetInvalidStream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerGetInvalidStream, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerGetInvalidStream, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerGetInvalidStream));
  WorkerGetInvalidOffset_descriptor_ = file->message_type(12);
  static const int WorkerGetInvalidOffset_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerGetInvalidOffset, worker_),
  };
  WorkerGetInvalidOffset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerGetInvalidOffset_descriptor_,
      WorkerGetInvalidOffset::default_instance_,
      WorkerGetInvalidOffset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerGetInvalidOffset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerGetInvalidOffset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerGetInvalidOffset));
  WorkerBeginProcessGet_descriptor_ = file->message_type(13);
  static const int WorkerBeginProcessGet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerBeginProcessGet, worker_),
  };
  WorkerBeginProcessGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerBeginProcessGet_descriptor_,
      WorkerBeginProcessGet::default_instance_,
      WorkerBeginProcessGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerBeginProcessGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerBeginProcessGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerBeginProcessGet));
  WorkerEndProcessGet_descriptor_ = file->message_type(14);
  static const int WorkerEndProcessGet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerEndProcessGet, worker_),
  };
  WorkerEndProcessGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerEndProcessGet_descriptor_,
      WorkerEndProcessGet::default_instance_,
      WorkerEndProcessGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerEndProcessGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerEndProcessGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerEndProcessGet));
  WorkerSendErrorResponse_descriptor_ = file->message_type(15);
  static const int WorkerSendErrorResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerSendErrorResponse, worker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerSendErrorResponse, message_),
  };
  WorkerSendErrorResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerSendErrorResponse_descriptor_,
      WorkerSendErrorResponse::default_instance_,
      WorkerSendErrorResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerSendErrorResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerSendErrorResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerSendErrorResponse));
  StreamerSubscriptionExpired_descriptor_ = file->message_type(16);
  static const int StreamerSubscriptionExpired_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerSubscriptionExpired, streamer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerSubscriptionExpired, id_),
  };
  StreamerSubscriptionExpired_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamerSubscriptionExpired_descriptor_,
      StreamerSubscriptionExpired::default_instance_,
      StreamerSubscriptionExpired_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerSubscriptionExpired, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerSubscriptionExpired, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamerSubscriptionExpired));
  StreamerReceiveKeepalive_descriptor_ = file->message_type(17);
  static const int StreamerReceiveKeepalive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerReceiveKeepalive, streamer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerReceiveKeepalive, id_),
  };
  StreamerReceiveKeepalive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamerReceiveKeepalive_descriptor_,
      StreamerReceiveKeepalive::default_instance_,
      StreamerReceiveKeepalive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerReceiveKeepalive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerReceiveKeepalive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamerReceiveKeepalive));
  StreamerSubscriptionRenewedFromKeepalive_descriptor_ = file->message_type(18);
  static const int StreamerSubscriptionRenewedFromKeepalive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerSubscriptionRenewedFromKeepalive, streamer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerSubscriptionRenewedFromKeepalive, id_),
  };
  StreamerSubscriptionRenewedFromKeepalive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamerSubscriptionRenewedFromKeepalive_descriptor_,
      StreamerSubscriptionRenewedFromKeepalive::default_instance_,
      StreamerSubscriptionRenewedFromKeepalive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerSubscriptionRenewedFromKeepalive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerSubscriptionRenewedFromKeepalive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamerSubscriptionRenewedFromKeepalive));
  StreamerRejectKeepaliveUnknownSubscription_descriptor_ = file->message_type(19);
  static const int StreamerRejectKeepaliveUnknownSubscription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerRejectKeepaliveUnknownSubscription, streamer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerRejectKeepaliveUnknownSubscription, id_),
  };
  StreamerRejectKeepaliveUnknownSubscription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamerRejectKeepaliveUnknownSubscription_descriptor_,
      StreamerRejectKeepaliveUnknownSubscription::default_instance_,
      StreamerRejectKeepaliveUnknownSubscription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerRejectKeepaliveUnknownSubscription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerRejectKeepaliveUnknownSubscription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamerRejectKeepaliveUnknownSubscription));
  StreamerErrorRenewingSubscription_descriptor_ = file->message_type(20);
  static const int StreamerErrorRenewingSubscription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerErrorRenewingSubscription, streamer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerErrorRenewingSubscription, id_),
  };
  StreamerErrorRenewingSubscription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamerErrorRenewingSubscription_descriptor_,
      StreamerErrorRenewingSubscription::default_instance_,
      StreamerErrorRenewingSubscription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerErrorRenewingSubscription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamerErrorRenewingSubscription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamerErrorRenewingSubscription));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zippylog_2fzippylogd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BrokerStartup_descriptor_, &BrokerStartup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BrokerShutdown_descriptor_, &BrokerShutdown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BrokerReceiveClientMessage_descriptor_, &BrokerReceiveClientMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerFailReceiveMessage_descriptor_, &WorkerFailReceiveMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerReceiveEmptyMessage_descriptor_, &WorkerReceiveEmptyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerRequestParseFailure_descriptor_, &WorkerRequestParseFailure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerRequestEmptyEnvelope_descriptor_, &WorkerRequestEmptyEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerInvalidMessageEnumeration_descriptor_, &WorkerInvalidMessageEnumeration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerBeginProcessStoreInfo_descriptor_, &WorkerBeginProcessStoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerEndProcessStoreInfo_descriptor_, &WorkerEndProcessStoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerReceiveInvalidGet_descriptor_, &WorkerReceiveInvalidGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerGetInvalidStream_descriptor_, &WorkerGetInvalidStream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerGetInvalidOffset_descriptor_, &WorkerGetInvalidOffset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerBeginProcessGet_descriptor_, &WorkerBeginProcessGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerEndProcessGet_descriptor_, &WorkerEndProcessGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerSendErrorResponse_descriptor_, &WorkerSendErrorResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamerSubscriptionExpired_descriptor_, &StreamerSubscriptionExpired::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamerReceiveKeepalive_descriptor_, &StreamerReceiveKeepalive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamerSubscriptionRenewedFromKeepalive_descriptor_, &StreamerSubscriptionRenewedFromKeepalive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamerRejectKeepaliveUnknownSubscription_descriptor_, &StreamerRejectKeepaliveUnknownSubscription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamerErrorRenewingSubscription_descriptor_, &StreamerErrorRenewingSubscription::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto() {
  delete BrokerStartup::default_instance_;
  delete BrokerStartup_reflection_;
  delete BrokerShutdown::default_instance_;
  delete BrokerShutdown_reflection_;
  delete BrokerReceiveClientMessage::default_instance_;
  delete BrokerReceiveClientMessage_reflection_;
  delete WorkerFailReceiveMessage::default_instance_;
  delete WorkerFailReceiveMessage_reflection_;
  delete WorkerReceiveEmptyMessage::default_instance_;
  delete WorkerReceiveEmptyMessage_reflection_;
  delete WorkerRequestParseFailure::default_instance_;
  delete WorkerRequestParseFailure_reflection_;
  delete WorkerRequestEmptyEnvelope::default_instance_;
  delete WorkerRequestEmptyEnvelope_reflection_;
  delete WorkerInvalidMessageEnumeration::default_instance_;
  delete WorkerInvalidMessageEnumeration_reflection_;
  delete WorkerBeginProcessStoreInfo::default_instance_;
  delete WorkerBeginProcessStoreInfo_reflection_;
  delete WorkerEndProcessStoreInfo::default_instance_;
  delete WorkerEndProcessStoreInfo_reflection_;
  delete WorkerReceiveInvalidGet::default_instance_;
  delete WorkerReceiveInvalidGet_reflection_;
  delete WorkerGetInvalidStream::default_instance_;
  delete WorkerGetInvalidStream_reflection_;
  delete WorkerGetInvalidOffset::default_instance_;
  delete WorkerGetInvalidOffset_reflection_;
  delete WorkerBeginProcessGet::default_instance_;
  delete WorkerBeginProcessGet_reflection_;
  delete WorkerEndProcessGet::default_instance_;
  delete WorkerEndProcessGet_reflection_;
  delete WorkerSendErrorResponse::default_instance_;
  delete WorkerSendErrorResponse_reflection_;
  delete StreamerSubscriptionExpired::default_instance_;
  delete StreamerSubscriptionExpired_reflection_;
  delete StreamerReceiveKeepalive::default_instance_;
  delete StreamerReceiveKeepalive_reflection_;
  delete StreamerSubscriptionRenewedFromKeepalive::default_instance_;
  delete StreamerSubscriptionRenewedFromKeepalive_reflection_;
  delete StreamerRejectKeepaliveUnknownSubscription::default_instance_;
  delete StreamerRejectKeepaliveUnknownSubscription_reflection_;
  delete StreamerErrorRenewingSubscription::default_instance_;
  delete StreamerErrorRenewingSubscription_reflection_;
}

void protobuf_AddDesc_zippylog_2fzippylogd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030zippylog/zippylogd.proto\022\022zippylog.zip"
    "pylogd\"=\n\rBrokerStartup\022\022\n\nstore_path\030\001 "
    "\001(\t\022\030\n\020listen_endpoints\030\002 \003(\t\"\020\n\016BrokerS"
    "hutdown\"\034\n\032BrokerReceiveClientMessage\"*\n"
    "\030WorkerFailReceiveMessage\022\016\n\006worker\030\001 \001("
    "\014\"+\n\031WorkerReceiveEmptyMessage\022\016\n\006worker"
    "\030\001 \001(\014\"+\n\031WorkerRequestParseFailure\022\016\n\006w"
    "orker\030\001 \001(\014\",\n\032WorkerRequestEmptyEnvelop"
    "e\022\016\n\006worker\030\001 \001(\014\"1\n\037WorkerInvalidMessag"
    "eEnumeration\022\016\n\006worker\030\001 \001(\014\"-\n\033WorkerBe"
    "ginProcessStoreInfo\022\016\n\006worker\030\001 \001(\014\"+\n\031W"
    "orkerEndProcessStoreInfo\022\016\n\006worker\030\001 \001(\014"
    "\")\n\027WorkerReceiveInvalidGet\022\016\n\006worker\030\001 "
    "\001(\014\"(\n\026WorkerGetInvalidStream\022\016\n\006worker\030"
    "\001 \001(\014\"(\n\026WorkerGetInvalidOffset\022\016\n\006worke"
    "r\030\001 \001(\014\"\'\n\025WorkerBeginProcessGet\022\016\n\006work"
    "er\030\001 \001(\014\"%\n\023WorkerEndProcessGet\022\016\n\006worke"
    "r\030\001 \001(\014\":\n\027WorkerSendErrorResponse\022\016\n\006wo"
    "rker\030\001 \001(\014\022\017\n\007message\030\002 \001(\t\";\n\033StreamerS"
    "ubscriptionExpired\022\020\n\010streamer\030\001 \001(\014\022\n\n\002"
    "id\030\002 \001(\014\"8\n\030StreamerReceiveKeepalive\022\020\n\010"
    "streamer\030\001 \001(\014\022\n\n\002id\030\002 \001(\014\"H\n(StreamerSu"
    "bscriptionRenewedFromKeepalive\022\020\n\010stream"
    "er\030\001 \001(\014\022\n\n\002id\030\002 \001(\014\"J\n*StreamerRejectKe"
    "epaliveUnknownSubscription\022\020\n\010streamer\030\001"
    " \001(\014\022\n\n\002id\030\002 \001(\014\"A\n!StreamerErrorRenewin"
    "gSubscription\022\020\n\010streamer\030\001 \001(\014\022\n\n\002id\030\002 "
    "\001(\014", 1083);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zippylog/zippylogd.proto", &protobuf_RegisterTypes);
  BrokerStartup::default_instance_ = new BrokerStartup();
  BrokerShutdown::default_instance_ = new BrokerShutdown();
  BrokerReceiveClientMessage::default_instance_ = new BrokerReceiveClientMessage();
  WorkerFailReceiveMessage::default_instance_ = new WorkerFailReceiveMessage();
  WorkerReceiveEmptyMessage::default_instance_ = new WorkerReceiveEmptyMessage();
  WorkerRequestParseFailure::default_instance_ = new WorkerRequestParseFailure();
  WorkerRequestEmptyEnvelope::default_instance_ = new WorkerRequestEmptyEnvelope();
  WorkerInvalidMessageEnumeration::default_instance_ = new WorkerInvalidMessageEnumeration();
  WorkerBeginProcessStoreInfo::default_instance_ = new WorkerBeginProcessStoreInfo();
  WorkerEndProcessStoreInfo::default_instance_ = new WorkerEndProcessStoreInfo();
  WorkerReceiveInvalidGet::default_instance_ = new WorkerReceiveInvalidGet();
  WorkerGetInvalidStream::default_instance_ = new WorkerGetInvalidStream();
  WorkerGetInvalidOffset::default_instance_ = new WorkerGetInvalidOffset();
  WorkerBeginProcessGet::default_instance_ = new WorkerBeginProcessGet();
  WorkerEndProcessGet::default_instance_ = new WorkerEndProcessGet();
  WorkerSendErrorResponse::default_instance_ = new WorkerSendErrorResponse();
  StreamerSubscriptionExpired::default_instance_ = new StreamerSubscriptionExpired();
  StreamerReceiveKeepalive::default_instance_ = new StreamerReceiveKeepalive();
  StreamerSubscriptionRenewedFromKeepalive::default_instance_ = new StreamerSubscriptionRenewedFromKeepalive();
  StreamerRejectKeepaliveUnknownSubscription::default_instance_ = new StreamerRejectKeepaliveUnknownSubscription();
  StreamerErrorRenewingSubscription::default_instance_ = new StreamerErrorRenewingSubscription();
  BrokerStartup::default_instance_->InitAsDefaultInstance();
  BrokerShutdown::default_instance_->InitAsDefaultInstance();
  BrokerReceiveClientMessage::default_instance_->InitAsDefaultInstance();
  WorkerFailReceiveMessage::default_instance_->InitAsDefaultInstance();
  WorkerReceiveEmptyMessage::default_instance_->InitAsDefaultInstance();
  WorkerRequestParseFailure::default_instance_->InitAsDefaultInstance();
  WorkerRequestEmptyEnvelope::default_instance_->InitAsDefaultInstance();
  WorkerInvalidMessageEnumeration::default_instance_->InitAsDefaultInstance();
  WorkerBeginProcessStoreInfo::default_instance_->InitAsDefaultInstance();
  WorkerEndProcessStoreInfo::default_instance_->InitAsDefaultInstance();
  WorkerReceiveInvalidGet::default_instance_->InitAsDefaultInstance();
  WorkerGetInvalidStream::default_instance_->InitAsDefaultInstance();
  WorkerGetInvalidOffset::default_instance_->InitAsDefaultInstance();
  WorkerBeginProcessGet::default_instance_->InitAsDefaultInstance();
  WorkerEndProcessGet::default_instance_->InitAsDefaultInstance();
  WorkerSendErrorResponse::default_instance_->InitAsDefaultInstance();
  StreamerSubscriptionExpired::default_instance_->InitAsDefaultInstance();
  StreamerReceiveKeepalive::default_instance_->InitAsDefaultInstance();
  StreamerSubscriptionRenewedFromKeepalive::default_instance_->InitAsDefaultInstance();
  StreamerRejectKeepaliveUnknownSubscription::default_instance_->InitAsDefaultInstance();
  StreamerErrorRenewingSubscription::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zippylog_2fzippylogd_2eproto {
  StaticDescriptorInitializer_zippylog_2fzippylogd_2eproto() {
    protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  }
} static_descriptor_initializer_zippylog_2fzippylogd_2eproto_;


// ===================================================================

const ::std::string BrokerStartup::_default_store_path_;
#ifndef _MSC_VER
const int BrokerStartup::kStorePathFieldNumber;
const int BrokerStartup::kListenEndpointsFieldNumber;
#endif  // !_MSC_VER

BrokerStartup::BrokerStartup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BrokerStartup::InitAsDefaultInstance() {
}

BrokerStartup::BrokerStartup(const BrokerStartup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BrokerStartup::SharedCtor() {
  _cached_size_ = 0;
  store_path_ = const_cast< ::std::string*>(&_default_store_path_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrokerStartup::~BrokerStartup() {
  SharedDtor();
}

void BrokerStartup::SharedDtor() {
  if (store_path_ != &_default_store_path_) {
    delete store_path_;
  }
  if (this != default_instance_) {
  }
}

void BrokerStartup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrokerStartup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrokerStartup_descriptor_;
}

const BrokerStartup& BrokerStartup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

BrokerStartup* BrokerStartup::default_instance_ = NULL;

BrokerStartup* BrokerStartup::New() const {
  return new BrokerStartup;
}

void BrokerStartup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (store_path_ != &_default_store_path_) {
        store_path_->clear();
      }
    }
  }
  listen_endpoints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BrokerStartup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string store_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_store_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->store_path().data(), this->store_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_listen_endpoints;
        break;
      }
      
      // repeated string listen_endpoints = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_listen_endpoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_listen_endpoints()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->listen_endpoints(0).data(), this->listen_endpoints(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_listen_endpoints;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BrokerStartup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string store_path = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->store_path().data(), this->store_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->store_path(), output);
  }
  
  // repeated string listen_endpoints = 2;
  for (int i = 0; i < this->listen_endpoints_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->listen_endpoints(i).data(), this->listen_endpoints(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->listen_endpoints(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BrokerStartup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string store_path = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->store_path().data(), this->store_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->store_path(), target);
  }
  
  // repeated string listen_endpoints = 2;
  for (int i = 0; i < this->listen_endpoints_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->listen_endpoints(i).data(), this->listen_endpoints(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->listen_endpoints(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BrokerStartup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string store_path = 1;
    if (has_store_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->store_path());
    }
    
  }
  // repeated string listen_endpoints = 2;
  total_size += 1 * this->listen_endpoints_size();
  for (int i = 0; i < this->listen_endpoints_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->listen_endpoints(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrokerStartup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BrokerStartup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BrokerStartup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BrokerStartup::MergeFrom(const BrokerStartup& from) {
  GOOGLE_CHECK_NE(&from, this);
  listen_endpoints_.MergeFrom(from.listen_endpoints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_store_path(from.store_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BrokerStartup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrokerStartup::CopyFrom(const BrokerStartup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerStartup::IsInitialized() const {
  
  return true;
}

void BrokerStartup::Swap(BrokerStartup* other) {
  if (other != this) {
    std::swap(store_path_, other->store_path_);
    listen_endpoints_.Swap(&other->listen_endpoints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BrokerStartup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrokerStartup_descriptor_;
  metadata.reflection = BrokerStartup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BrokerShutdown::BrokerShutdown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BrokerShutdown::InitAsDefaultInstance() {
}

BrokerShutdown::BrokerShutdown(const BrokerShutdown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BrokerShutdown::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrokerShutdown::~BrokerShutdown() {
  SharedDtor();
}

void BrokerShutdown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BrokerShutdown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrokerShutdown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrokerShutdown_descriptor_;
}

const BrokerShutdown& BrokerShutdown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

BrokerShutdown* BrokerShutdown::default_instance_ = NULL;

BrokerShutdown* BrokerShutdown::New() const {
  return new BrokerShutdown;
}

void BrokerShutdown::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BrokerShutdown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void BrokerShutdown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BrokerShutdown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BrokerShutdown::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrokerShutdown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BrokerShutdown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BrokerShutdown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BrokerShutdown::MergeFrom(const BrokerShutdown& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BrokerShutdown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrokerShutdown::CopyFrom(const BrokerShutdown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerShutdown::IsInitialized() const {
  
  return true;
}

void BrokerShutdown::Swap(BrokerShutdown* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BrokerShutdown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrokerShutdown_descriptor_;
  metadata.reflection = BrokerShutdown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BrokerReceiveClientMessage::BrokerReceiveClientMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BrokerReceiveClientMessage::InitAsDefaultInstance() {
}

BrokerReceiveClientMessage::BrokerReceiveClientMessage(const BrokerReceiveClientMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BrokerReceiveClientMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrokerReceiveClientMessage::~BrokerReceiveClientMessage() {
  SharedDtor();
}

void BrokerReceiveClientMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BrokerReceiveClientMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrokerReceiveClientMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrokerReceiveClientMessage_descriptor_;
}

const BrokerReceiveClientMessage& BrokerReceiveClientMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

BrokerReceiveClientMessage* BrokerReceiveClientMessage::default_instance_ = NULL;

BrokerReceiveClientMessage* BrokerReceiveClientMessage::New() const {
  return new BrokerReceiveClientMessage;
}

void BrokerReceiveClientMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BrokerReceiveClientMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void BrokerReceiveClientMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BrokerReceiveClientMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BrokerReceiveClientMessage::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrokerReceiveClientMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BrokerReceiveClientMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BrokerReceiveClientMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BrokerReceiveClientMessage::MergeFrom(const BrokerReceiveClientMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BrokerReceiveClientMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrokerReceiveClientMessage::CopyFrom(const BrokerReceiveClientMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerReceiveClientMessage::IsInitialized() const {
  
  return true;
}

void BrokerReceiveClientMessage::Swap(BrokerReceiveClientMessage* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BrokerReceiveClientMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrokerReceiveClientMessage_descriptor_;
  metadata.reflection = BrokerReceiveClientMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string WorkerFailReceiveMessage::_default_worker_;
#ifndef _MSC_VER
const int WorkerFailReceiveMessage::kWorkerFieldNumber;
#endif  // !_MSC_VER

WorkerFailReceiveMessage::WorkerFailReceiveMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerFailReceiveMessage::InitAsDefaultInstance() {
}

WorkerFailReceiveMessage::WorkerFailReceiveMessage(const WorkerFailReceiveMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerFailReceiveMessage::SharedCtor() {
  _cached_size_ = 0;
  worker_ = const_cast< ::std::string*>(&_default_worker_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerFailReceiveMessage::~WorkerFailReceiveMessage() {
  SharedDtor();
}

void WorkerFailReceiveMessage::SharedDtor() {
  if (worker_ != &_default_worker_) {
    delete worker_;
  }
  if (this != default_instance_) {
  }
}

void WorkerFailReceiveMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerFailReceiveMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerFailReceiveMessage_descriptor_;
}

const WorkerFailReceiveMessage& WorkerFailReceiveMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

WorkerFailReceiveMessage* WorkerFailReceiveMessage::default_instance_ = NULL;

WorkerFailReceiveMessage* WorkerFailReceiveMessage::New() const {
  return new WorkerFailReceiveMessage;
}

void WorkerFailReceiveMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (worker_ != &_default_worker_) {
        worker_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerFailReceiveMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes worker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_worker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerFailReceiveMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->worker(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerFailReceiveMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->worker(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerFailReceiveMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes worker = 1;
    if (has_worker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->worker());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerFailReceiveMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerFailReceiveMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerFailReceiveMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerFailReceiveMessage::MergeFrom(const WorkerFailReceiveMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worker(from.worker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerFailReceiveMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerFailReceiveMessage::CopyFrom(const WorkerFailReceiveMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerFailReceiveMessage::IsInitialized() const {
  
  return true;
}

void WorkerFailReceiveMessage::Swap(WorkerFailReceiveMessage* other) {
  if (other != this) {
    std::swap(worker_, other->worker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerFailReceiveMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerFailReceiveMessage_descriptor_;
  metadata.reflection = WorkerFailReceiveMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string WorkerReceiveEmptyMessage::_default_worker_;
#ifndef _MSC_VER
const int WorkerReceiveEmptyMessage::kWorkerFieldNumber;
#endif  // !_MSC_VER

WorkerReceiveEmptyMessage::WorkerReceiveEmptyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerReceiveEmptyMessage::InitAsDefaultInstance() {
}

WorkerReceiveEmptyMessage::WorkerReceiveEmptyMessage(const WorkerReceiveEmptyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerReceiveEmptyMessage::SharedCtor() {
  _cached_size_ = 0;
  worker_ = const_cast< ::std::string*>(&_default_worker_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerReceiveEmptyMessage::~WorkerReceiveEmptyMessage() {
  SharedDtor();
}

void WorkerReceiveEmptyMessage::SharedDtor() {
  if (worker_ != &_default_worker_) {
    delete worker_;
  }
  if (this != default_instance_) {
  }
}

void WorkerReceiveEmptyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerReceiveEmptyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerReceiveEmptyMessage_descriptor_;
}

const WorkerReceiveEmptyMessage& WorkerReceiveEmptyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

WorkerReceiveEmptyMessage* WorkerReceiveEmptyMessage::default_instance_ = NULL;

WorkerReceiveEmptyMessage* WorkerReceiveEmptyMessage::New() const {
  return new WorkerReceiveEmptyMessage;
}

void WorkerReceiveEmptyMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (worker_ != &_default_worker_) {
        worker_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerReceiveEmptyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes worker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_worker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerReceiveEmptyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->worker(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerReceiveEmptyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->worker(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerReceiveEmptyMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes worker = 1;
    if (has_worker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->worker());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerReceiveEmptyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerReceiveEmptyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerReceiveEmptyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerReceiveEmptyMessage::MergeFrom(const WorkerReceiveEmptyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worker(from.worker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerReceiveEmptyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerReceiveEmptyMessage::CopyFrom(const WorkerReceiveEmptyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerReceiveEmptyMessage::IsInitialized() const {
  
  return true;
}

void WorkerReceiveEmptyMessage::Swap(WorkerReceiveEmptyMessage* other) {
  if (other != this) {
    std::swap(worker_, other->worker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerReceiveEmptyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerReceiveEmptyMessage_descriptor_;
  metadata.reflection = WorkerReceiveEmptyMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string WorkerRequestParseFailure::_default_worker_;
#ifndef _MSC_VER
const int WorkerRequestParseFailure::kWorkerFieldNumber;
#endif  // !_MSC_VER

WorkerRequestParseFailure::WorkerRequestParseFailure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerRequestParseFailure::InitAsDefaultInstance() {
}

WorkerRequestParseFailure::WorkerRequestParseFailure(const WorkerRequestParseFailure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerRequestParseFailure::SharedCtor() {
  _cached_size_ = 0;
  worker_ = const_cast< ::std::string*>(&_default_worker_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerRequestParseFailure::~WorkerRequestParseFailure() {
  SharedDtor();
}

void WorkerRequestParseFailure::SharedDtor() {
  if (worker_ != &_default_worker_) {
    delete worker_;
  }
  if (this != default_instance_) {
  }
}

void WorkerRequestParseFailure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerRequestParseFailure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerRequestParseFailure_descriptor_;
}

const WorkerRequestParseFailure& WorkerRequestParseFailure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

WorkerRequestParseFailure* WorkerRequestParseFailure::default_instance_ = NULL;

WorkerRequestParseFailure* WorkerRequestParseFailure::New() const {
  return new WorkerRequestParseFailure;
}

void WorkerRequestParseFailure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (worker_ != &_default_worker_) {
        worker_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerRequestParseFailure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes worker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_worker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerRequestParseFailure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->worker(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerRequestParseFailure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->worker(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerRequestParseFailure::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes worker = 1;
    if (has_worker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->worker());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerRequestParseFailure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerRequestParseFailure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerRequestParseFailure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerRequestParseFailure::MergeFrom(const WorkerRequestParseFailure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worker(from.worker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerRequestParseFailure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerRequestParseFailure::CopyFrom(const WorkerRequestParseFailure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerRequestParseFailure::IsInitialized() const {
  
  return true;
}

void WorkerRequestParseFailure::Swap(WorkerRequestParseFailure* other) {
  if (other != this) {
    std::swap(worker_, other->worker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerRequestParseFailure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerRequestParseFailure_descriptor_;
  metadata.reflection = WorkerRequestParseFailure_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string WorkerRequestEmptyEnvelope::_default_worker_;
#ifndef _MSC_VER
const int WorkerRequestEmptyEnvelope::kWorkerFieldNumber;
#endif  // !_MSC_VER

WorkerRequestEmptyEnvelope::WorkerRequestEmptyEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerRequestEmptyEnvelope::InitAsDefaultInstance() {
}

WorkerRequestEmptyEnvelope::WorkerRequestEmptyEnvelope(const WorkerRequestEmptyEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerRequestEmptyEnvelope::SharedCtor() {
  _cached_size_ = 0;
  worker_ = const_cast< ::std::string*>(&_default_worker_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerRequestEmptyEnvelope::~WorkerRequestEmptyEnvelope() {
  SharedDtor();
}

void WorkerRequestEmptyEnvelope::SharedDtor() {
  if (worker_ != &_default_worker_) {
    delete worker_;
  }
  if (this != default_instance_) {
  }
}

void WorkerRequestEmptyEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerRequestEmptyEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerRequestEmptyEnvelope_descriptor_;
}

const WorkerRequestEmptyEnvelope& WorkerRequestEmptyEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

WorkerRequestEmptyEnvelope* WorkerRequestEmptyEnvelope::default_instance_ = NULL;

WorkerRequestEmptyEnvelope* WorkerRequestEmptyEnvelope::New() const {
  return new WorkerRequestEmptyEnvelope;
}

void WorkerRequestEmptyEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (worker_ != &_default_worker_) {
        worker_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerRequestEmptyEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes worker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_worker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerRequestEmptyEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->worker(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerRequestEmptyEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->worker(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerRequestEmptyEnvelope::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes worker = 1;
    if (has_worker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->worker());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerRequestEmptyEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerRequestEmptyEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerRequestEmptyEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerRequestEmptyEnvelope::MergeFrom(const WorkerRequestEmptyEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worker(from.worker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerRequestEmptyEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerRequestEmptyEnvelope::CopyFrom(const WorkerRequestEmptyEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerRequestEmptyEnvelope::IsInitialized() const {
  
  return true;
}

void WorkerRequestEmptyEnvelope::Swap(WorkerRequestEmptyEnvelope* other) {
  if (other != this) {
    std::swap(worker_, other->worker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerRequestEmptyEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerRequestEmptyEnvelope_descriptor_;
  metadata.reflection = WorkerRequestEmptyEnvelope_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string WorkerInvalidMessageEnumeration::_default_worker_;
#ifndef _MSC_VER
const int WorkerInvalidMessageEnumeration::kWorkerFieldNumber;
#endif  // !_MSC_VER

WorkerInvalidMessageEnumeration::WorkerInvalidMessageEnumeration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerInvalidMessageEnumeration::InitAsDefaultInstance() {
}

WorkerInvalidMessageEnumeration::WorkerInvalidMessageEnumeration(const WorkerInvalidMessageEnumeration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerInvalidMessageEnumeration::SharedCtor() {
  _cached_size_ = 0;
  worker_ = const_cast< ::std::string*>(&_default_worker_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerInvalidMessageEnumeration::~WorkerInvalidMessageEnumeration() {
  SharedDtor();
}

void WorkerInvalidMessageEnumeration::SharedDtor() {
  if (worker_ != &_default_worker_) {
    delete worker_;
  }
  if (this != default_instance_) {
  }
}

void WorkerInvalidMessageEnumeration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerInvalidMessageEnumeration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerInvalidMessageEnumeration_descriptor_;
}

const WorkerInvalidMessageEnumeration& WorkerInvalidMessageEnumeration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

WorkerInvalidMessageEnumeration* WorkerInvalidMessageEnumeration::default_instance_ = NULL;

WorkerInvalidMessageEnumeration* WorkerInvalidMessageEnumeration::New() const {
  return new WorkerInvalidMessageEnumeration;
}

void WorkerInvalidMessageEnumeration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (worker_ != &_default_worker_) {
        worker_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerInvalidMessageEnumeration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes worker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_worker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerInvalidMessageEnumeration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->worker(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerInvalidMessageEnumeration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->worker(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerInvalidMessageEnumeration::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes worker = 1;
    if (has_worker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->worker());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerInvalidMessageEnumeration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerInvalidMessageEnumeration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerInvalidMessageEnumeration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerInvalidMessageEnumeration::MergeFrom(const WorkerInvalidMessageEnumeration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worker(from.worker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerInvalidMessageEnumeration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerInvalidMessageEnumeration::CopyFrom(const WorkerInvalidMessageEnumeration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerInvalidMessageEnumeration::IsInitialized() const {
  
  return true;
}

void WorkerInvalidMessageEnumeration::Swap(WorkerInvalidMessageEnumeration* other) {
  if (other != this) {
    std::swap(worker_, other->worker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerInvalidMessageEnumeration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerInvalidMessageEnumeration_descriptor_;
  metadata.reflection = WorkerInvalidMessageEnumeration_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string WorkerBeginProcessStoreInfo::_default_worker_;
#ifndef _MSC_VER
const int WorkerBeginProcessStoreInfo::kWorkerFieldNumber;
#endif  // !_MSC_VER

WorkerBeginProcessStoreInfo::WorkerBeginProcessStoreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerBeginProcessStoreInfo::InitAsDefaultInstance() {
}

WorkerBeginProcessStoreInfo::WorkerBeginProcessStoreInfo(const WorkerBeginProcessStoreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerBeginProcessStoreInfo::SharedCtor() {
  _cached_size_ = 0;
  worker_ = const_cast< ::std::string*>(&_default_worker_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerBeginProcessStoreInfo::~WorkerBeginProcessStoreInfo() {
  SharedDtor();
}

void WorkerBeginProcessStoreInfo::SharedDtor() {
  if (worker_ != &_default_worker_) {
    delete worker_;
  }
  if (this != default_instance_) {
  }
}

void WorkerBeginProcessStoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerBeginProcessStoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerBeginProcessStoreInfo_descriptor_;
}

const WorkerBeginProcessStoreInfo& WorkerBeginProcessStoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

WorkerBeginProcessStoreInfo* WorkerBeginProcessStoreInfo::default_instance_ = NULL;

WorkerBeginProcessStoreInfo* WorkerBeginProcessStoreInfo::New() const {
  return new WorkerBeginProcessStoreInfo;
}

void WorkerBeginProcessStoreInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (worker_ != &_default_worker_) {
        worker_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerBeginProcessStoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes worker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_worker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerBeginProcessStoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->worker(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerBeginProcessStoreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->worker(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerBeginProcessStoreInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes worker = 1;
    if (has_worker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->worker());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerBeginProcessStoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerBeginProcessStoreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerBeginProcessStoreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerBeginProcessStoreInfo::MergeFrom(const WorkerBeginProcessStoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worker(from.worker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerBeginProcessStoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerBeginProcessStoreInfo::CopyFrom(const WorkerBeginProcessStoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerBeginProcessStoreInfo::IsInitialized() const {
  
  return true;
}

void WorkerBeginProcessStoreInfo::Swap(WorkerBeginProcessStoreInfo* other) {
  if (other != this) {
    std::swap(worker_, other->worker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerBeginProcessStoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerBeginProcessStoreInfo_descriptor_;
  metadata.reflection = WorkerBeginProcessStoreInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string WorkerEndProcessStoreInfo::_default_worker_;
#ifndef _MSC_VER
const int WorkerEndProcessStoreInfo::kWorkerFieldNumber;
#endif  // !_MSC_VER

WorkerEndProcessStoreInfo::WorkerEndProcessStoreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerEndProcessStoreInfo::InitAsDefaultInstance() {
}

WorkerEndProcessStoreInfo::WorkerEndProcessStoreInfo(const WorkerEndProcessStoreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerEndProcessStoreInfo::SharedCtor() {
  _cached_size_ = 0;
  worker_ = const_cast< ::std::string*>(&_default_worker_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerEndProcessStoreInfo::~WorkerEndProcessStoreInfo() {
  SharedDtor();
}

void WorkerEndProcessStoreInfo::SharedDtor() {
  if (worker_ != &_default_worker_) {
    delete worker_;
  }
  if (this != default_instance_) {
  }
}

void WorkerEndProcessStoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerEndProcessStoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerEndProcessStoreInfo_descriptor_;
}

const WorkerEndProcessStoreInfo& WorkerEndProcessStoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

WorkerEndProcessStoreInfo* WorkerEndProcessStoreInfo::default_instance_ = NULL;

WorkerEndProcessStoreInfo* WorkerEndProcessStoreInfo::New() const {
  return new WorkerEndProcessStoreInfo;
}

void WorkerEndProcessStoreInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (worker_ != &_default_worker_) {
        worker_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerEndProcessStoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes worker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_worker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerEndProcessStoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->worker(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerEndProcessStoreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->worker(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerEndProcessStoreInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes worker = 1;
    if (has_worker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->worker());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerEndProcessStoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerEndProcessStoreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerEndProcessStoreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerEndProcessStoreInfo::MergeFrom(const WorkerEndProcessStoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worker(from.worker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerEndProcessStoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerEndProcessStoreInfo::CopyFrom(const WorkerEndProcessStoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerEndProcessStoreInfo::IsInitialized() const {
  
  return true;
}

void WorkerEndProcessStoreInfo::Swap(WorkerEndProcessStoreInfo* other) {
  if (other != this) {
    std::swap(worker_, other->worker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerEndProcessStoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerEndProcessStoreInfo_descriptor_;
  metadata.reflection = WorkerEndProcessStoreInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string WorkerReceiveInvalidGet::_default_worker_;
#ifndef _MSC_VER
const int WorkerReceiveInvalidGet::kWorkerFieldNumber;
#endif  // !_MSC_VER

WorkerReceiveInvalidGet::WorkerReceiveInvalidGet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerReceiveInvalidGet::InitAsDefaultInstance() {
}

WorkerReceiveInvalidGet::WorkerReceiveInvalidGet(const WorkerReceiveInvalidGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerReceiveInvalidGet::SharedCtor() {
  _cached_size_ = 0;
  worker_ = const_cast< ::std::string*>(&_default_worker_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerReceiveInvalidGet::~WorkerReceiveInvalidGet() {
  SharedDtor();
}

void WorkerReceiveInvalidGet::SharedDtor() {
  if (worker_ != &_default_worker_) {
    delete worker_;
  }
  if (this != default_instance_) {
  }
}

void WorkerReceiveInvalidGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerReceiveInvalidGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerReceiveInvalidGet_descriptor_;
}

const WorkerReceiveInvalidGet& WorkerReceiveInvalidGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

WorkerReceiveInvalidGet* WorkerReceiveInvalidGet::default_instance_ = NULL;

WorkerReceiveInvalidGet* WorkerReceiveInvalidGet::New() const {
  return new WorkerReceiveInvalidGet;
}

void WorkerReceiveInvalidGet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (worker_ != &_default_worker_) {
        worker_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerReceiveInvalidGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes worker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_worker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerReceiveInvalidGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->worker(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerReceiveInvalidGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->worker(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerReceiveInvalidGet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes worker = 1;
    if (has_worker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->worker());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerReceiveInvalidGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerReceiveInvalidGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerReceiveInvalidGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerReceiveInvalidGet::MergeFrom(const WorkerReceiveInvalidGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worker(from.worker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerReceiveInvalidGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerReceiveInvalidGet::CopyFrom(const WorkerReceiveInvalidGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerReceiveInvalidGet::IsInitialized() const {
  
  return true;
}

void WorkerReceiveInvalidGet::Swap(WorkerReceiveInvalidGet* other) {
  if (other != this) {
    std::swap(worker_, other->worker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerReceiveInvalidGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerReceiveInvalidGet_descriptor_;
  metadata.reflection = WorkerReceiveInvalidGet_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string WorkerGetInvalidStream::_default_worker_;
#ifndef _MSC_VER
const int WorkerGetInvalidStream::kWorkerFieldNumber;
#endif  // !_MSC_VER

WorkerGetInvalidStream::WorkerGetInvalidStream()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerGetInvalidStream::InitAsDefaultInstance() {
}

WorkerGetInvalidStream::WorkerGetInvalidStream(const WorkerGetInvalidStream& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerGetInvalidStream::SharedCtor() {
  _cached_size_ = 0;
  worker_ = const_cast< ::std::string*>(&_default_worker_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerGetInvalidStream::~WorkerGetInvalidStream() {
  SharedDtor();
}

void WorkerGetInvalidStream::SharedDtor() {
  if (worker_ != &_default_worker_) {
    delete worker_;
  }
  if (this != default_instance_) {
  }
}

void WorkerGetInvalidStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerGetInvalidStream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerGetInvalidStream_descriptor_;
}

const WorkerGetInvalidStream& WorkerGetInvalidStream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

WorkerGetInvalidStream* WorkerGetInvalidStream::default_instance_ = NULL;

WorkerGetInvalidStream* WorkerGetInvalidStream::New() const {
  return new WorkerGetInvalidStream;
}

void WorkerGetInvalidStream::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (worker_ != &_default_worker_) {
        worker_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerGetInvalidStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes worker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_worker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerGetInvalidStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->worker(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerGetInvalidStream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->worker(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerGetInvalidStream::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes worker = 1;
    if (has_worker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->worker());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerGetInvalidStream::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerGetInvalidStream* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerGetInvalidStream*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerGetInvalidStream::MergeFrom(const WorkerGetInvalidStream& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worker(from.worker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerGetInvalidStream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerGetInvalidStream::CopyFrom(const WorkerGetInvalidStream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerGetInvalidStream::IsInitialized() const {
  
  return true;
}

void WorkerGetInvalidStream::Swap(WorkerGetInvalidStream* other) {
  if (other != this) {
    std::swap(worker_, other->worker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerGetInvalidStream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerGetInvalidStream_descriptor_;
  metadata.reflection = WorkerGetInvalidStream_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string WorkerGetInvalidOffset::_default_worker_;
#ifndef _MSC_VER
const int WorkerGetInvalidOffset::kWorkerFieldNumber;
#endif  // !_MSC_VER

WorkerGetInvalidOffset::WorkerGetInvalidOffset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerGetInvalidOffset::InitAsDefaultInstance() {
}

WorkerGetInvalidOffset::WorkerGetInvalidOffset(const WorkerGetInvalidOffset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerGetInvalidOffset::SharedCtor() {
  _cached_size_ = 0;
  worker_ = const_cast< ::std::string*>(&_default_worker_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerGetInvalidOffset::~WorkerGetInvalidOffset() {
  SharedDtor();
}

void WorkerGetInvalidOffset::SharedDtor() {
  if (worker_ != &_default_worker_) {
    delete worker_;
  }
  if (this != default_instance_) {
  }
}

void WorkerGetInvalidOffset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerGetInvalidOffset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerGetInvalidOffset_descriptor_;
}

const WorkerGetInvalidOffset& WorkerGetInvalidOffset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

WorkerGetInvalidOffset* WorkerGetInvalidOffset::default_instance_ = NULL;

WorkerGetInvalidOffset* WorkerGetInvalidOffset::New() const {
  return new WorkerGetInvalidOffset;
}

void WorkerGetInvalidOffset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (worker_ != &_default_worker_) {
        worker_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerGetInvalidOffset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes worker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_worker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerGetInvalidOffset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->worker(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerGetInvalidOffset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->worker(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerGetInvalidOffset::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes worker = 1;
    if (has_worker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->worker());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerGetInvalidOffset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerGetInvalidOffset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerGetInvalidOffset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerGetInvalidOffset::MergeFrom(const WorkerGetInvalidOffset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worker(from.worker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerGetInvalidOffset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerGetInvalidOffset::CopyFrom(const WorkerGetInvalidOffset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerGetInvalidOffset::IsInitialized() const {
  
  return true;
}

void WorkerGetInvalidOffset::Swap(WorkerGetInvalidOffset* other) {
  if (other != this) {
    std::swap(worker_, other->worker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerGetInvalidOffset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerGetInvalidOffset_descriptor_;
  metadata.reflection = WorkerGetInvalidOffset_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string WorkerBeginProcessGet::_default_worker_;
#ifndef _MSC_VER
const int WorkerBeginProcessGet::kWorkerFieldNumber;
#endif  // !_MSC_VER

WorkerBeginProcessGet::WorkerBeginProcessGet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerBeginProcessGet::InitAsDefaultInstance() {
}

WorkerBeginProcessGet::WorkerBeginProcessGet(const WorkerBeginProcessGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerBeginProcessGet::SharedCtor() {
  _cached_size_ = 0;
  worker_ = const_cast< ::std::string*>(&_default_worker_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerBeginProcessGet::~WorkerBeginProcessGet() {
  SharedDtor();
}

void WorkerBeginProcessGet::SharedDtor() {
  if (worker_ != &_default_worker_) {
    delete worker_;
  }
  if (this != default_instance_) {
  }
}

void WorkerBeginProcessGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerBeginProcessGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerBeginProcessGet_descriptor_;
}

const WorkerBeginProcessGet& WorkerBeginProcessGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

WorkerBeginProcessGet* WorkerBeginProcessGet::default_instance_ = NULL;

WorkerBeginProcessGet* WorkerBeginProcessGet::New() const {
  return new WorkerBeginProcessGet;
}

void WorkerBeginProcessGet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (worker_ != &_default_worker_) {
        worker_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerBeginProcessGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes worker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_worker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerBeginProcessGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->worker(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerBeginProcessGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->worker(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerBeginProcessGet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes worker = 1;
    if (has_worker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->worker());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerBeginProcessGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerBeginProcessGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerBeginProcessGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerBeginProcessGet::MergeFrom(const WorkerBeginProcessGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worker(from.worker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerBeginProcessGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerBeginProcessGet::CopyFrom(const WorkerBeginProcessGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerBeginProcessGet::IsInitialized() const {
  
  return true;
}

void WorkerBeginProcessGet::Swap(WorkerBeginProcessGet* other) {
  if (other != this) {
    std::swap(worker_, other->worker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerBeginProcessGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerBeginProcessGet_descriptor_;
  metadata.reflection = WorkerBeginProcessGet_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string WorkerEndProcessGet::_default_worker_;
#ifndef _MSC_VER
const int WorkerEndProcessGet::kWorkerFieldNumber;
#endif  // !_MSC_VER

WorkerEndProcessGet::WorkerEndProcessGet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerEndProcessGet::InitAsDefaultInstance() {
}

WorkerEndProcessGet::WorkerEndProcessGet(const WorkerEndProcessGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerEndProcessGet::SharedCtor() {
  _cached_size_ = 0;
  worker_ = const_cast< ::std::string*>(&_default_worker_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerEndProcessGet::~WorkerEndProcessGet() {
  SharedDtor();
}

void WorkerEndProcessGet::SharedDtor() {
  if (worker_ != &_default_worker_) {
    delete worker_;
  }
  if (this != default_instance_) {
  }
}

void WorkerEndProcessGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerEndProcessGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerEndProcessGet_descriptor_;
}

const WorkerEndProcessGet& WorkerEndProcessGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

WorkerEndProcessGet* WorkerEndProcessGet::default_instance_ = NULL;

WorkerEndProcessGet* WorkerEndProcessGet::New() const {
  return new WorkerEndProcessGet;
}

void WorkerEndProcessGet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (worker_ != &_default_worker_) {
        worker_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerEndProcessGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes worker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_worker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerEndProcessGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->worker(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerEndProcessGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->worker(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerEndProcessGet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes worker = 1;
    if (has_worker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->worker());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerEndProcessGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerEndProcessGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerEndProcessGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerEndProcessGet::MergeFrom(const WorkerEndProcessGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worker(from.worker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerEndProcessGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerEndProcessGet::CopyFrom(const WorkerEndProcessGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerEndProcessGet::IsInitialized() const {
  
  return true;
}

void WorkerEndProcessGet::Swap(WorkerEndProcessGet* other) {
  if (other != this) {
    std::swap(worker_, other->worker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerEndProcessGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerEndProcessGet_descriptor_;
  metadata.reflection = WorkerEndProcessGet_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string WorkerSendErrorResponse::_default_worker_;
const ::std::string WorkerSendErrorResponse::_default_message_;
#ifndef _MSC_VER
const int WorkerSendErrorResponse::kWorkerFieldNumber;
const int WorkerSendErrorResponse::kMessageFieldNumber;
#endif  // !_MSC_VER

WorkerSendErrorResponse::WorkerSendErrorResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkerSendErrorResponse::InitAsDefaultInstance() {
}

WorkerSendErrorResponse::WorkerSendErrorResponse(const WorkerSendErrorResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkerSendErrorResponse::SharedCtor() {
  _cached_size_ = 0;
  worker_ = const_cast< ::std::string*>(&_default_worker_);
  message_ = const_cast< ::std::string*>(&_default_message_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerSendErrorResponse::~WorkerSendErrorResponse() {
  SharedDtor();
}

void WorkerSendErrorResponse::SharedDtor() {
  if (worker_ != &_default_worker_) {
    delete worker_;
  }
  if (message_ != &_default_message_) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void WorkerSendErrorResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerSendErrorResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerSendErrorResponse_descriptor_;
}

const WorkerSendErrorResponse& WorkerSendErrorResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

WorkerSendErrorResponse* WorkerSendErrorResponse::default_instance_ = NULL;

WorkerSendErrorResponse* WorkerSendErrorResponse::New() const {
  return new WorkerSendErrorResponse;
}

void WorkerSendErrorResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (worker_ != &_default_worker_) {
        worker_->clear();
      }
    }
    if (_has_bit(1)) {
      if (message_ != &_default_message_) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerSendErrorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes worker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_worker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkerSendErrorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->worker(), output);
  }
  
  // optional string message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkerSendErrorResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes worker = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->worker(), target);
  }
  
  // optional string message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkerSendErrorResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes worker = 1;
    if (has_worker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->worker());
    }
    
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerSendErrorResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerSendErrorResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerSendErrorResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerSendErrorResponse::MergeFrom(const WorkerSendErrorResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worker(from.worker());
    }
    if (from._has_bit(1)) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerSendErrorResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerSendErrorResponse::CopyFrom(const WorkerSendErrorResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerSendErrorResponse::IsInitialized() const {
  
  return true;
}

void WorkerSendErrorResponse::Swap(WorkerSendErrorResponse* other) {
  if (other != this) {
    std::swap(worker_, other->worker_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerSendErrorResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerSendErrorResponse_descriptor_;
  metadata.reflection = WorkerSendErrorResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string StreamerSubscriptionExpired::_default_streamer_;
const ::std::string StreamerSubscriptionExpired::_default_id_;
#ifndef _MSC_VER
const int StreamerSubscriptionExpired::kStreamerFieldNumber;
const int StreamerSubscriptionExpired::kIdFieldNumber;
#endif  // !_MSC_VER

StreamerSubscriptionExpired::StreamerSubscriptionExpired()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamerSubscriptionExpired::InitAsDefaultInstance() {
}

StreamerSubscriptionExpired::StreamerSubscriptionExpired(const StreamerSubscriptionExpired& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamerSubscriptionExpired::SharedCtor() {
  _cached_size_ = 0;
  streamer_ = const_cast< ::std::string*>(&_default_streamer_);
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamerSubscriptionExpired::~StreamerSubscriptionExpired() {
  SharedDtor();
}

void StreamerSubscriptionExpired::SharedDtor() {
  if (streamer_ != &_default_streamer_) {
    delete streamer_;
  }
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void StreamerSubscriptionExpired::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamerSubscriptionExpired::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamerSubscriptionExpired_descriptor_;
}

const StreamerSubscriptionExpired& StreamerSubscriptionExpired::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

StreamerSubscriptionExpired* StreamerSubscriptionExpired::default_instance_ = NULL;

StreamerSubscriptionExpired* StreamerSubscriptionExpired::New() const {
  return new StreamerSubscriptionExpired;
}

void StreamerSubscriptionExpired::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (streamer_ != &_default_streamer_) {
        streamer_->clear();
      }
    }
    if (_has_bit(1)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamerSubscriptionExpired::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes streamer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_streamer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }
      
      // optional bytes id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamerSubscriptionExpired::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes streamer = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->streamer(), output);
  }
  
  // optional bytes id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamerSubscriptionExpired::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes streamer = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->streamer(), target);
  }
  
  // optional bytes id = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamerSubscriptionExpired::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes streamer = 1;
    if (has_streamer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->streamer());
    }
    
    // optional bytes id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamerSubscriptionExpired::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamerSubscriptionExpired* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamerSubscriptionExpired*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamerSubscriptionExpired::MergeFrom(const StreamerSubscriptionExpired& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_streamer(from.streamer());
    }
    if (from._has_bit(1)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamerSubscriptionExpired::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamerSubscriptionExpired::CopyFrom(const StreamerSubscriptionExpired& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamerSubscriptionExpired::IsInitialized() const {
  
  return true;
}

void StreamerSubscriptionExpired::Swap(StreamerSubscriptionExpired* other) {
  if (other != this) {
    std::swap(streamer_, other->streamer_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamerSubscriptionExpired::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamerSubscriptionExpired_descriptor_;
  metadata.reflection = StreamerSubscriptionExpired_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string StreamerReceiveKeepalive::_default_streamer_;
const ::std::string StreamerReceiveKeepalive::_default_id_;
#ifndef _MSC_VER
const int StreamerReceiveKeepalive::kStreamerFieldNumber;
const int StreamerReceiveKeepalive::kIdFieldNumber;
#endif  // !_MSC_VER

StreamerReceiveKeepalive::StreamerReceiveKeepalive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamerReceiveKeepalive::InitAsDefaultInstance() {
}

StreamerReceiveKeepalive::StreamerReceiveKeepalive(const StreamerReceiveKeepalive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamerReceiveKeepalive::SharedCtor() {
  _cached_size_ = 0;
  streamer_ = const_cast< ::std::string*>(&_default_streamer_);
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamerReceiveKeepalive::~StreamerReceiveKeepalive() {
  SharedDtor();
}

void StreamerReceiveKeepalive::SharedDtor() {
  if (streamer_ != &_default_streamer_) {
    delete streamer_;
  }
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void StreamerReceiveKeepalive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamerReceiveKeepalive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamerReceiveKeepalive_descriptor_;
}

const StreamerReceiveKeepalive& StreamerReceiveKeepalive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

StreamerReceiveKeepalive* StreamerReceiveKeepalive::default_instance_ = NULL;

StreamerReceiveKeepalive* StreamerReceiveKeepalive::New() const {
  return new StreamerReceiveKeepalive;
}

void StreamerReceiveKeepalive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (streamer_ != &_default_streamer_) {
        streamer_->clear();
      }
    }
    if (_has_bit(1)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamerReceiveKeepalive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes streamer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_streamer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }
      
      // optional bytes id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamerReceiveKeepalive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes streamer = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->streamer(), output);
  }
  
  // optional bytes id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamerReceiveKeepalive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes streamer = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->streamer(), target);
  }
  
  // optional bytes id = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamerReceiveKeepalive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes streamer = 1;
    if (has_streamer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->streamer());
    }
    
    // optional bytes id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamerReceiveKeepalive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamerReceiveKeepalive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamerReceiveKeepalive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamerReceiveKeepalive::MergeFrom(const StreamerReceiveKeepalive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_streamer(from.streamer());
    }
    if (from._has_bit(1)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamerReceiveKeepalive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamerReceiveKeepalive::CopyFrom(const StreamerReceiveKeepalive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamerReceiveKeepalive::IsInitialized() const {
  
  return true;
}

void StreamerReceiveKeepalive::Swap(StreamerReceiveKeepalive* other) {
  if (other != this) {
    std::swap(streamer_, other->streamer_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamerReceiveKeepalive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamerReceiveKeepalive_descriptor_;
  metadata.reflection = StreamerReceiveKeepalive_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string StreamerSubscriptionRenewedFromKeepalive::_default_streamer_;
const ::std::string StreamerSubscriptionRenewedFromKeepalive::_default_id_;
#ifndef _MSC_VER
const int StreamerSubscriptionRenewedFromKeepalive::kStreamerFieldNumber;
const int StreamerSubscriptionRenewedFromKeepalive::kIdFieldNumber;
#endif  // !_MSC_VER

StreamerSubscriptionRenewedFromKeepalive::StreamerSubscriptionRenewedFromKeepalive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamerSubscriptionRenewedFromKeepalive::InitAsDefaultInstance() {
}

StreamerSubscriptionRenewedFromKeepalive::StreamerSubscriptionRenewedFromKeepalive(const StreamerSubscriptionRenewedFromKeepalive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamerSubscriptionRenewedFromKeepalive::SharedCtor() {
  _cached_size_ = 0;
  streamer_ = const_cast< ::std::string*>(&_default_streamer_);
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamerSubscriptionRenewedFromKeepalive::~StreamerSubscriptionRenewedFromKeepalive() {
  SharedDtor();
}

void StreamerSubscriptionRenewedFromKeepalive::SharedDtor() {
  if (streamer_ != &_default_streamer_) {
    delete streamer_;
  }
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void StreamerSubscriptionRenewedFromKeepalive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamerSubscriptionRenewedFromKeepalive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamerSubscriptionRenewedFromKeepalive_descriptor_;
}

const StreamerSubscriptionRenewedFromKeepalive& StreamerSubscriptionRenewedFromKeepalive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

StreamerSubscriptionRenewedFromKeepalive* StreamerSubscriptionRenewedFromKeepalive::default_instance_ = NULL;

StreamerSubscriptionRenewedFromKeepalive* StreamerSubscriptionRenewedFromKeepalive::New() const {
  return new StreamerSubscriptionRenewedFromKeepalive;
}

void StreamerSubscriptionRenewedFromKeepalive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (streamer_ != &_default_streamer_) {
        streamer_->clear();
      }
    }
    if (_has_bit(1)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamerSubscriptionRenewedFromKeepalive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes streamer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_streamer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }
      
      // optional bytes id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamerSubscriptionRenewedFromKeepalive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes streamer = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->streamer(), output);
  }
  
  // optional bytes id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamerSubscriptionRenewedFromKeepalive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes streamer = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->streamer(), target);
  }
  
  // optional bytes id = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamerSubscriptionRenewedFromKeepalive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes streamer = 1;
    if (has_streamer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->streamer());
    }
    
    // optional bytes id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamerSubscriptionRenewedFromKeepalive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamerSubscriptionRenewedFromKeepalive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamerSubscriptionRenewedFromKeepalive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamerSubscriptionRenewedFromKeepalive::MergeFrom(const StreamerSubscriptionRenewedFromKeepalive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_streamer(from.streamer());
    }
    if (from._has_bit(1)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamerSubscriptionRenewedFromKeepalive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamerSubscriptionRenewedFromKeepalive::CopyFrom(const StreamerSubscriptionRenewedFromKeepalive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamerSubscriptionRenewedFromKeepalive::IsInitialized() const {
  
  return true;
}

void StreamerSubscriptionRenewedFromKeepalive::Swap(StreamerSubscriptionRenewedFromKeepalive* other) {
  if (other != this) {
    std::swap(streamer_, other->streamer_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamerSubscriptionRenewedFromKeepalive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamerSubscriptionRenewedFromKeepalive_descriptor_;
  metadata.reflection = StreamerSubscriptionRenewedFromKeepalive_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string StreamerRejectKeepaliveUnknownSubscription::_default_streamer_;
const ::std::string StreamerRejectKeepaliveUnknownSubscription::_default_id_;
#ifndef _MSC_VER
const int StreamerRejectKeepaliveUnknownSubscription::kStreamerFieldNumber;
const int StreamerRejectKeepaliveUnknownSubscription::kIdFieldNumber;
#endif  // !_MSC_VER

StreamerRejectKeepaliveUnknownSubscription::StreamerRejectKeepaliveUnknownSubscription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamerRejectKeepaliveUnknownSubscription::InitAsDefaultInstance() {
}

StreamerRejectKeepaliveUnknownSubscription::StreamerRejectKeepaliveUnknownSubscription(const StreamerRejectKeepaliveUnknownSubscription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamerRejectKeepaliveUnknownSubscription::SharedCtor() {
  _cached_size_ = 0;
  streamer_ = const_cast< ::std::string*>(&_default_streamer_);
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamerRejectKeepaliveUnknownSubscription::~StreamerRejectKeepaliveUnknownSubscription() {
  SharedDtor();
}

void StreamerRejectKeepaliveUnknownSubscription::SharedDtor() {
  if (streamer_ != &_default_streamer_) {
    delete streamer_;
  }
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void StreamerRejectKeepaliveUnknownSubscription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamerRejectKeepaliveUnknownSubscription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamerRejectKeepaliveUnknownSubscription_descriptor_;
}

const StreamerRejectKeepaliveUnknownSubscription& StreamerRejectKeepaliveUnknownSubscription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

StreamerRejectKeepaliveUnknownSubscription* StreamerRejectKeepaliveUnknownSubscription::default_instance_ = NULL;

StreamerRejectKeepaliveUnknownSubscription* StreamerRejectKeepaliveUnknownSubscription::New() const {
  return new StreamerRejectKeepaliveUnknownSubscription;
}

void StreamerRejectKeepaliveUnknownSubscription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (streamer_ != &_default_streamer_) {
        streamer_->clear();
      }
    }
    if (_has_bit(1)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamerRejectKeepaliveUnknownSubscription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes streamer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_streamer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }
      
      // optional bytes id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamerRejectKeepaliveUnknownSubscription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes streamer = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->streamer(), output);
  }
  
  // optional bytes id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamerRejectKeepaliveUnknownSubscription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes streamer = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->streamer(), target);
  }
  
  // optional bytes id = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamerRejectKeepaliveUnknownSubscription::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes streamer = 1;
    if (has_streamer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->streamer());
    }
    
    // optional bytes id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamerRejectKeepaliveUnknownSubscription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamerRejectKeepaliveUnknownSubscription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamerRejectKeepaliveUnknownSubscription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamerRejectKeepaliveUnknownSubscription::MergeFrom(const StreamerRejectKeepaliveUnknownSubscription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_streamer(from.streamer());
    }
    if (from._has_bit(1)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamerRejectKeepaliveUnknownSubscription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamerRejectKeepaliveUnknownSubscription::CopyFrom(const StreamerRejectKeepaliveUnknownSubscription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamerRejectKeepaliveUnknownSubscription::IsInitialized() const {
  
  return true;
}

void StreamerRejectKeepaliveUnknownSubscription::Swap(StreamerRejectKeepaliveUnknownSubscription* other) {
  if (other != this) {
    std::swap(streamer_, other->streamer_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamerRejectKeepaliveUnknownSubscription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamerRejectKeepaliveUnknownSubscription_descriptor_;
  metadata.reflection = StreamerRejectKeepaliveUnknownSubscription_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string StreamerErrorRenewingSubscription::_default_streamer_;
const ::std::string StreamerErrorRenewingSubscription::_default_id_;
#ifndef _MSC_VER
const int StreamerErrorRenewingSubscription::kStreamerFieldNumber;
const int StreamerErrorRenewingSubscription::kIdFieldNumber;
#endif  // !_MSC_VER

StreamerErrorRenewingSubscription::StreamerErrorRenewingSubscription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamerErrorRenewingSubscription::InitAsDefaultInstance() {
}

StreamerErrorRenewingSubscription::StreamerErrorRenewingSubscription(const StreamerErrorRenewingSubscription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamerErrorRenewingSubscription::SharedCtor() {
  _cached_size_ = 0;
  streamer_ = const_cast< ::std::string*>(&_default_streamer_);
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamerErrorRenewingSubscription::~StreamerErrorRenewingSubscription() {
  SharedDtor();
}

void StreamerErrorRenewingSubscription::SharedDtor() {
  if (streamer_ != &_default_streamer_) {
    delete streamer_;
  }
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void StreamerErrorRenewingSubscription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamerErrorRenewingSubscription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamerErrorRenewingSubscription_descriptor_;
}

const StreamerErrorRenewingSubscription& StreamerErrorRenewingSubscription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

StreamerErrorRenewingSubscription* StreamerErrorRenewingSubscription::default_instance_ = NULL;

StreamerErrorRenewingSubscription* StreamerErrorRenewingSubscription::New() const {
  return new StreamerErrorRenewingSubscription;
}

void StreamerErrorRenewingSubscription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (streamer_ != &_default_streamer_) {
        streamer_->clear();
      }
    }
    if (_has_bit(1)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamerErrorRenewingSubscription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes streamer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_streamer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }
      
      // optional bytes id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamerErrorRenewingSubscription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes streamer = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->streamer(), output);
  }
  
  // optional bytes id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamerErrorRenewingSubscription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes streamer = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->streamer(), target);
  }
  
  // optional bytes id = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamerErrorRenewingSubscription::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes streamer = 1;
    if (has_streamer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->streamer());
    }
    
    // optional bytes id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamerErrorRenewingSubscription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamerErrorRenewingSubscription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamerErrorRenewingSubscription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamerErrorRenewingSubscription::MergeFrom(const StreamerErrorRenewingSubscription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_streamer(from.streamer());
    }
    if (from._has_bit(1)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamerErrorRenewingSubscription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamerErrorRenewingSubscription::CopyFrom(const StreamerErrorRenewingSubscription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamerErrorRenewingSubscription::IsInitialized() const {
  
  return true;
}

void StreamerErrorRenewingSubscription::Swap(StreamerErrorRenewingSubscription* other) {
  if (other != this) {
    std::swap(streamer_, other->streamer_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamerErrorRenewingSubscription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamerErrorRenewingSubscription_descriptor_;
  metadata.reflection = StreamerErrorRenewingSubscription_reflection_;
  return metadata;
}



bool BrokerStartup::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool BrokerShutdown::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool BrokerReceiveClientMessage::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool WorkerFailReceiveMessage::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool WorkerReceiveEmptyMessage::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool WorkerRequestParseFailure::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool WorkerRequestEmptyEnvelope::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool WorkerInvalidMessageEnumeration::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool WorkerBeginProcessStoreInfo::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool WorkerEndProcessStoreInfo::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool WorkerReceiveInvalidGet::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool WorkerGetInvalidStream::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool WorkerGetInvalidOffset::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool WorkerBeginProcessGet::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool WorkerEndProcessGet::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool WorkerSendErrorResponse::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StreamerSubscriptionExpired::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StreamerReceiveKeepalive::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StreamerSubscriptionRenewedFromKeepalive::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StreamerRejectKeepaliveUnknownSubscription::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StreamerErrorRenewingSubscription::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}
// @@protoc_insertion_point(namespace_scope)

}  // namespace zippylogd
}  // namespace zippylog

// @@protoc_insertion_point(global_scope)
