// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zippylog/zippylogd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zippylog {
namespace zippylogd {

namespace {

const ::google::protobuf::Descriptor* BrokerReceiveClientMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrokerReceiveClientMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* BrokerFlushOutputStreams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrokerFlushOutputStreams_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreWatcherStartup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreWatcherStartup_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreWatcherShutdown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreWatcherShutdown_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_zippylog_2fzippylogd_2eproto() {
  protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zippylog/zippylogd.proto");
  GOOGLE_CHECK(file != NULL);
  BrokerReceiveClientMessage_descriptor_ = file->message_type(0);
  static const int BrokerReceiveClientMessage_offsets_[1] = {
  };
  BrokerReceiveClientMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BrokerReceiveClientMessage_descriptor_,
      BrokerReceiveClientMessage::default_instance_,
      BrokerReceiveClientMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerReceiveClientMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerReceiveClientMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BrokerReceiveClientMessage));
  BrokerFlushOutputStreams_descriptor_ = file->message_type(1);
  static const int BrokerFlushOutputStreams_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerFlushOutputStreams, id_),
  };
  BrokerFlushOutputStreams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BrokerFlushOutputStreams_descriptor_,
      BrokerFlushOutputStreams::default_instance_,
      BrokerFlushOutputStreams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerFlushOutputStreams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerFlushOutputStreams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BrokerFlushOutputStreams));
  StoreWatcherStartup_descriptor_ = file->message_type(2);
  static const int StoreWatcherStartup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreWatcherStartup, id_),
  };
  StoreWatcherStartup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreWatcherStartup_descriptor_,
      StoreWatcherStartup::default_instance_,
      StoreWatcherStartup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreWatcherStartup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreWatcherStartup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreWatcherStartup));
  StoreWatcherShutdown_descriptor_ = file->message_type(3);
  static const int StoreWatcherShutdown_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreWatcherShutdown, id_),
  };
  StoreWatcherShutdown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreWatcherShutdown_descriptor_,
      StoreWatcherShutdown::default_instance_,
      StoreWatcherShutdown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreWatcherShutdown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreWatcherShutdown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreWatcherShutdown));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zippylog_2fzippylogd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BrokerReceiveClientMessage_descriptor_, &BrokerReceiveClientMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BrokerFlushOutputStreams_descriptor_, &BrokerFlushOutputStreams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreWatcherStartup_descriptor_, &StoreWatcherStartup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreWatcherShutdown_descriptor_, &StoreWatcherShutdown::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto() {
  delete BrokerReceiveClientMessage::default_instance_;
  delete BrokerReceiveClientMessage_reflection_;
  delete BrokerFlushOutputStreams::default_instance_;
  delete BrokerFlushOutputStreams_reflection_;
  delete StoreWatcherStartup::default_instance_;
  delete StoreWatcherStartup_reflection_;
  delete StoreWatcherShutdown::default_instance_;
  delete StoreWatcherShutdown_reflection_;
}

void protobuf_AddDesc_zippylog_2fzippylogd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030zippylog/zippylogd.proto\022\022zippylog.zip"
    "pylogd\"\034\n\032BrokerReceiveClientMessage\"&\n\030"
    "BrokerFlushOutputStreams\022\n\n\002id\030\001 \001(\014\"!\n\023"
    "StoreWatcherStartup\022\n\n\002id\030\001 \001(\014\"\"\n\024Store"
    "WatcherShutdown\022\n\n\002id\030\001 \001(\014", 187);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zippylog/zippylogd.proto", &protobuf_RegisterTypes);
  BrokerReceiveClientMessage::default_instance_ = new BrokerReceiveClientMessage();
  BrokerFlushOutputStreams::default_instance_ = new BrokerFlushOutputStreams();
  StoreWatcherStartup::default_instance_ = new StoreWatcherStartup();
  StoreWatcherShutdown::default_instance_ = new StoreWatcherShutdown();
  BrokerReceiveClientMessage::default_instance_->InitAsDefaultInstance();
  BrokerFlushOutputStreams::default_instance_->InitAsDefaultInstance();
  StoreWatcherStartup::default_instance_->InitAsDefaultInstance();
  StoreWatcherShutdown::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zippylog_2fzippylogd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zippylog_2fzippylogd_2eproto {
  StaticDescriptorInitializer_zippylog_2fzippylogd_2eproto() {
    protobuf_AddDesc_zippylog_2fzippylogd_2eproto();
  }
} static_descriptor_initializer_zippylog_2fzippylogd_2eproto_;


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BrokerReceiveClientMessage::BrokerReceiveClientMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BrokerReceiveClientMessage::InitAsDefaultInstance() {
}

BrokerReceiveClientMessage::BrokerReceiveClientMessage(const BrokerReceiveClientMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BrokerReceiveClientMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrokerReceiveClientMessage::~BrokerReceiveClientMessage() {
  SharedDtor();
}

void BrokerReceiveClientMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BrokerReceiveClientMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrokerReceiveClientMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrokerReceiveClientMessage_descriptor_;
}

const BrokerReceiveClientMessage& BrokerReceiveClientMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

BrokerReceiveClientMessage* BrokerReceiveClientMessage::default_instance_ = NULL;

BrokerReceiveClientMessage* BrokerReceiveClientMessage::New() const {
  return new BrokerReceiveClientMessage;
}

void BrokerReceiveClientMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BrokerReceiveClientMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void BrokerReceiveClientMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BrokerReceiveClientMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BrokerReceiveClientMessage::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrokerReceiveClientMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BrokerReceiveClientMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BrokerReceiveClientMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BrokerReceiveClientMessage::MergeFrom(const BrokerReceiveClientMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BrokerReceiveClientMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrokerReceiveClientMessage::CopyFrom(const BrokerReceiveClientMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerReceiveClientMessage::IsInitialized() const {
  
  return true;
}

void BrokerReceiveClientMessage::Swap(BrokerReceiveClientMessage* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BrokerReceiveClientMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrokerReceiveClientMessage_descriptor_;
  metadata.reflection = BrokerReceiveClientMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BrokerFlushOutputStreams::kIdFieldNumber;
#endif  // !_MSC_VER

BrokerFlushOutputStreams::BrokerFlushOutputStreams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BrokerFlushOutputStreams::InitAsDefaultInstance() {
}

BrokerFlushOutputStreams::BrokerFlushOutputStreams(const BrokerFlushOutputStreams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BrokerFlushOutputStreams::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrokerFlushOutputStreams::~BrokerFlushOutputStreams() {
  SharedDtor();
}

void BrokerFlushOutputStreams::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void BrokerFlushOutputStreams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrokerFlushOutputStreams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrokerFlushOutputStreams_descriptor_;
}

const BrokerFlushOutputStreams& BrokerFlushOutputStreams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

BrokerFlushOutputStreams* BrokerFlushOutputStreams::default_instance_ = NULL;

BrokerFlushOutputStreams* BrokerFlushOutputStreams::New() const {
  return new BrokerFlushOutputStreams;
}

void BrokerFlushOutputStreams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BrokerFlushOutputStreams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BrokerFlushOutputStreams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BrokerFlushOutputStreams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BrokerFlushOutputStreams::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrokerFlushOutputStreams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BrokerFlushOutputStreams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BrokerFlushOutputStreams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BrokerFlushOutputStreams::MergeFrom(const BrokerFlushOutputStreams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BrokerFlushOutputStreams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrokerFlushOutputStreams::CopyFrom(const BrokerFlushOutputStreams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerFlushOutputStreams::IsInitialized() const {
  
  return true;
}

void BrokerFlushOutputStreams::Swap(BrokerFlushOutputStreams* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BrokerFlushOutputStreams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrokerFlushOutputStreams_descriptor_;
  metadata.reflection = BrokerFlushOutputStreams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreWatcherStartup::kIdFieldNumber;
#endif  // !_MSC_VER

StoreWatcherStartup::StoreWatcherStartup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreWatcherStartup::InitAsDefaultInstance() {
}

StoreWatcherStartup::StoreWatcherStartup(const StoreWatcherStartup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreWatcherStartup::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreWatcherStartup::~StoreWatcherStartup() {
  SharedDtor();
}

void StoreWatcherStartup::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void StoreWatcherStartup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreWatcherStartup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreWatcherStartup_descriptor_;
}

const StoreWatcherStartup& StoreWatcherStartup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

StoreWatcherStartup* StoreWatcherStartup::default_instance_ = NULL;

StoreWatcherStartup* StoreWatcherStartup::New() const {
  return new StoreWatcherStartup;
}

void StoreWatcherStartup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreWatcherStartup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreWatcherStartup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreWatcherStartup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreWatcherStartup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreWatcherStartup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreWatcherStartup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreWatcherStartup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreWatcherStartup::MergeFrom(const StoreWatcherStartup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreWatcherStartup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreWatcherStartup::CopyFrom(const StoreWatcherStartup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreWatcherStartup::IsInitialized() const {
  
  return true;
}

void StoreWatcherStartup::Swap(StoreWatcherStartup* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreWatcherStartup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreWatcherStartup_descriptor_;
  metadata.reflection = StoreWatcherStartup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreWatcherShutdown::kIdFieldNumber;
#endif  // !_MSC_VER

StoreWatcherShutdown::StoreWatcherShutdown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreWatcherShutdown::InitAsDefaultInstance() {
}

StoreWatcherShutdown::StoreWatcherShutdown(const StoreWatcherShutdown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreWatcherShutdown::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreWatcherShutdown::~StoreWatcherShutdown() {
  SharedDtor();
}

void StoreWatcherShutdown::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void StoreWatcherShutdown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreWatcherShutdown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreWatcherShutdown_descriptor_;
}

const StoreWatcherShutdown& StoreWatcherShutdown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zippylog_2fzippylogd_2eproto();  return *default_instance_;
}

StoreWatcherShutdown* StoreWatcherShutdown::default_instance_ = NULL;

StoreWatcherShutdown* StoreWatcherShutdown::New() const {
  return new StoreWatcherShutdown;
}

void StoreWatcherShutdown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreWatcherShutdown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreWatcherShutdown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreWatcherShutdown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreWatcherShutdown::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreWatcherShutdown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreWatcherShutdown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreWatcherShutdown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreWatcherShutdown::MergeFrom(const StoreWatcherShutdown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreWatcherShutdown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreWatcherShutdown::CopyFrom(const StoreWatcherShutdown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreWatcherShutdown::IsInitialized() const {
  
  return true;
}

void StoreWatcherShutdown::Swap(StoreWatcherShutdown* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreWatcherShutdown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreWatcherShutdown_descriptor_;
  metadata.reflection = StoreWatcherShutdown_reflection_;
  return metadata;
}



bool BrokerReceiveClientMessage::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool BrokerReceiveClientMessage::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool BrokerFlushOutputStreams::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool BrokerFlushOutputStreams::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StoreWatcherStartup::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StoreWatcherStartup::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StoreWatcherShutdown::add_to_envelope(::zippylog::Envelope *envelope) {
    return envelope->AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}

bool StoreWatcherShutdown::add_to_envelope(::zippylog::Envelope &envelope) {
    return envelope.AddMessage(*this, zippylog_namespace, zippylog_enumeration);
}
// @@protoc_insertion_point(namespace_scope)

}  // namespace zippylogd
}  // namespace zippylog

// @@protoc_insertion_point(global_scope)
