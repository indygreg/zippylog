// zippylog message types shared between protocol ends

package zippylog.protocol;

// describes an individual stream
message StreamInfoV1 {
    required string path = 1;
    optional uint64 length = 2;
}

// describes an individual stream set
message StreamSetInfoV1 {
    // path to this stream set
    required string path = 1;

    // describes streams within this set
    repeated StreamInfoV1 stream = 2;
}

// describes an individual bucket
message BucketInfoV1 {
    // path to this bucket
    required string path = 1;

    // describes stream sets within this bucket
    repeated StreamSetInfoV1 stream_set = 2;
}

// describes a stream store
message StoreInfoV1 {
    // describes buckets within the store
    repeated BucketInfoV1 bucket = 1;
}

// TODO why do we have separate fields for paths and string above?

// a stream was added to the store
message StoreChangeStreamAddedV1 {
    required string bucket = 1;
    required string stream_set = 2;
    required string stream = 3;
    optional uint64 length = 4;
}

// a stream was deleted from the store
message StoreChangeStreamDeletedV1 {
    required string bucket = 1;
    required string stream_set = 2;
    required string stream = 3;
    optional uint64 length = 4;
}

// a stream in the store was appended to
message StoreChangeStreamAppendedV1 {
    required string bucket = 1;
    required string stream_set = 2;
    required string stream = 3;
    optional uint64 length = 4;
}

message StoreChangeBucketAddedV1 {
    required string bucket = 1;
}

message StoreChangeBucketDeletedV1 {
    required string bucket = 2;
}

message StoreChangeStreamSetAddedV1 {
    required string bucket = 1;
    required string stream_set = 2;
}

message StoreChangeStreamSetDeletedV1 {
    required string bucket = 1;
    required string stream_set = 2;
}

// Describes running state of a plugin
enum PluginRunState {
	// Plugin is running without any issues
	PLUGIN_RUNNING = 1;

	// Plugin has entered an error state and is no longer running
	PLUGIN_ERROR = 2;
}

enum PluginErrorReason {
	// Plugin has exceeded its Lua memory ceiling allowance
	LUA_MEMORY_CEILING = 1;

	// Plugin has exceeded its Lua instruction ceiling
	LUA_INSTRUCTION_CEILING = 2;

	// Lua has encountered an error when executing
	LUA_EXECUTION_ERROR = 3;
}

// Describes the state of a single plugin
message PluginStateV1 {
	// Registered name of plugin being described
	required string name = 1;

	// Defines what state the plugin is in
	required PluginRunState state = 2;

	// Why the plugin is in an error state
	//
	// Only defined if state is ERROR
	optional PluginErrorReason error_code = 3;

	// String describing why the plugin is in an error state
	//
	// Only defined if state is ERROR
	optional string error_message = 4;

	// Current memory used by Lua interpreter, in bytes
	required uint32 lua_current_memory = 5;

	// Maximum memory used by Lua interpreter, in bytes
	required uint32 lua_max_memory = 6;
}