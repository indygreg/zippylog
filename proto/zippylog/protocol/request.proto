// this file describes protocol buffer messages sent by the client when
// communicating with a remote server agent
//
// Messages should have names of actions/verbs which describe the operation
// being performed.
//
// Messages are versioned. Typically, a new version of a message is created if
// fields are added or the semantics of the operation change.

package zippylog.protocol.request;

// pings the server to see if it is responding
message PingV1 {}

// requests the server to return a message that describes features (versions,
// operations, capabilities, etc) it supports
message GetFeaturesV1 {}

// Obtains information about the store to which the server is bound.
//
// Currently, servers can only be bound to one store, so we have no
// parameters.
message GetStoreInfoV1 {}

// Obtain information about a specific bucket
message GetBucketInfoV1 {
    // path to bucket whose info to obtain
    required string path = 1;
}

// Obtain information about a specific stream set
message GetStreamSetInfoV1 {
    required string path = 1;
}

// Obtain information about a specific stream
message GetStreamInfoV1 {
    required string path = 1;
}

// request to download part of a stream
//
// The server likely imposes limits of how much of a stream can be downloaded
// in one request. These limits will override whatever is specified by the
// client. Therefore, the limits in the request are merely a theoretical
// maximum.
message GetStreamSegmentV1 {
    // path of stream to retrieve
    required string path = 1;

    // offset from start of stream from which to start sending data
    // you should never "guess" the offset because the offset likely isn't
    // valid and the server may reject your request. instead, use the last
    // offset from a previous fetch. The initial offset of a stream is 0.
    required uint64 start_offset = 2;

    // maximum number of bytes to send in response
    optional uint32 max_response_bytes = 3;

    // maximum number of envelopes to receive
    optional uint32 max_response_envelopes = 4;
}

// writes 1 or more already serialized envelopes to a path in the store
//
// Envelopes are defined inline in the message as serialized values. Each
// serialized envelope may or may not be deserialized on the server. Servers
// may deserialize the envelope as part of verification as well as to append
// writer information.
message WriteEnvelopeV1 {
    // store path to write to. must be stream set or stream
    required string path = 1;

    // list of serialized envelopes to write
    repeated bytes envelope = 2;

    // Whether to acknowledge the write
    //
    // If true, the server will send a WriteAck response. The default is true,
    // but it can be disabled for potential performance increases.
    //
    // Even if acknowledgement is disabled, the server will still send an
    // error response if there was something wrong with the request or if the
    // request could not be fulfilled.
    optional bool acknowledge = 3 [default=true];

    // Request synchronous writes
    //
    // Oftentimes, a server will deliver envelopes to a queue for writing and
    // ack the write as soon as the message has been delivered. If this flag
    // is set and the server supports the feature, the server won't send an
    // ack until the envelope has actually been processed on the other side of
    // the queue.
    //
    // A true value implies acknowledge=true.
    optional bool synchronous = 4 [default=false];
}

// writes an envelope from messages
message WriteEnvelopeFromMessagesV1 {
    // store path to write to. must be stream set or stream
    required string path = 1;

    // list of serialized protocol buffer messages to write to a single
    // envelope
    repeated bytes message = 2;

    // enumerations for protocol buffer messages
    repeated uint32 message_namespace = 3 [packed=true];
    repeated uint32 message_type = 4 [packed=true];
}

// subscribes the client to store changes
// store changes describe changes to the store. this covers creating, deletion,
// and modification of buckets, stream sets, and streams. it does not include
// actual envelopes in streams
message SubscribeStoreChangesV1 {
    // list of store paths to subscribe to
    // if you want to subscribe to the entire store, add the value "/"
    repeated string path = 1;
}

// Subscribes to newly-written envelopes
message SubscribeEnvelopesV1 {
    // List of store paths to subscribe to
    // this can be individual streams, stream sets, buckets, or the entire
    // store ("/"). If no path is defined, the entire store ("/") is assumed.
    repeated string path = 1;

	// Upload Lua code that defines a custom subscription. The following
	// Lua functionality may be used:
	//
	//   zippylog_subscription_filter_envelope() - Filters envelopes. This
	//     function will be called for every envelope in the subscribed
	//     path(s).
	//
	//   zippylog_subscription_timer_signaled() - Function called whenever
	//     the timer has signaled/expired.
	//
	//   zippylog_subscription_timer_interval - Defines how often, in
	//     milliseconds, a timer should fire.
	//
	// The timer variables must either be both undefined or defined. If only
	// one is defined, the server should reject the request.
	//
	// The server makes no guarantee to the semantics of the timer. The timer
	// may fire approximately every interval or every interval after execution
	// of the timer callback, for example. There is also no guarantee as to when
	// the timer callback is executed after the timer signals. It could be a
	// microsecond. It could be a hundred milliseconds.
	//
	// The server does guarantee that only a single callback will execute at a
	// time.
    optional string lua_code = 5;

	// By default, envelope subscriptions subscribe to all envelopes in the
	// requested path(s). We can filter envelopes using Lua or via the
	// mechanisms listed below. Multiple filter types may be registered
	// simultaneously. If multiple filters are defined, they are combined with
	// an OR. In other words, only one filter needs to match for the envelope
	// to pass the filter. Complex filtering (matching AND with OR or looking
	// at additional envelope properties will require Lua-based filtering).

	// Limit subscribed envelopes to those containing messages in these
	// namespaces. Only one message in the envelope needs to match for a hit.
    repeated uint32 filter_namespace = 2 [packed=true];

	// Limit subscribed envelopes to those containing messages in the message
	// enumerations defined here. As with the above field, only 1 message in
	// the envelope needs to contain the enumeration. Both fields must have
	// the same length
	repeated uint32 filter_enumeration_namespace = 3 [packed=true];
	repeated uint32 filter_enumeration_type = 4 [packed=true];
}

// clients need to send keepalive messages every N seconds or the server drops
// the subscription. this is that keepalive message
message SubscribeKeepaliveV1 {
    // the subscription identifier to send the keepalive for
    // this identifier is issued by the server when it accepts the
    // subscription
    required bytes id = 1;
}

// cancels a subscription
message SubscribeCancelV1 {
    // subscription identifier to cancel
    required bytes id = 1;
}
