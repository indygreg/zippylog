// this file describes protocol buffer messages sent by the client when
// communicating with a remote server agent
//
// Messages should have names of actions/verbs which describe the operation
// being performed.

package zippylog.protocol.request;

// requests the server to return a message that describes features (versions,
// operations, capabilities, etc) it supports
message GetFeatures {}

// Obtains information about the store to which the server is bound.
//
// Currently, servers can only be bound to one store, so we have no
// parameters.
message GetStoreInfo {
    optional uint32 version = 1 [default=1];
}

message GetBucketInfo {
    optional uint32 version = 1 [default=1];
    
    // bucket whose information to obtain
    optional string bucket = 2;
}

message GetStreamSetInfo {
    optional uint32 version = 1 [default=1];
    
    optional string path = 2;
}

message GetStreamInfo {
    optional uint32 version = 1 [default=1];
    
    optional string path = 2;
}

// request to download part of a stream
message Get {
    // path of stream to retrieve
    optional string path = 1;

    // offset from start of stream from which to start sending data
    // this value has different meaning depending on the backing store of the
    // remote store. for filesystem stores, it likely corresponds to a byte
    // offset within a remote file
    optional uint64 start_offset = 2;

    // maximum number of bytes to send in response
    optional uint32 max_response_bytes = 3;

    // TODO support max events
}

// writes 1 or more already serialized envelopes to the store
message WriteEnvelope {
    // the version of this message the client is sending
    optional uint32 version = 1 [default=1];

    // store path to write to. must be stream set or stream
    optional string path = 2;

    // list of serialized envelopes to write
    repeated bytes envelope = 3;
}

// writes an envelope from messages
message WriteEnvelopeWithMessages {
    // store path to write to. must be stream set or stream
    optional string path = 1;

    // list of serialized protocol buffer messages to write to a single
    // envelope
    repeated bytes message = 2;

    // enumerations for protocol buffer messages
    repeated uint32 message_namespace = 3 [packed=true];
    repeated uint32 message_type = 4 [packed=true];
}

// subscribes the client to store changes
// store changes describe changes to the store. this covers creating, deletion,
// and modification of buckets, stream sets, and streams. it does not include
// actual envelopes in streams
message SubscribeStoreChanges {

    // list of store paths to subscribe to
    // if you want to subscribe to the entire store, add the value "/"
    repeated string path = 1;
}

// subscribes to newly-written envelopes
message SubscribeEnvelopes {
    // list of store paths to subscribe to
    // this can be individual streams, stream sets, buckets, or the entire
    // store ("/")
    repeated string path = 1;

    // TODO add filtering

    // Lua code that defines functionality to be executed on the server
    optional string lua_code = 2;
}

// clients need to send keepalive messages every N seconds or the server drops
// the subscription. this is that keepalive message
message SubscribeKeepalive {
    // the subscription identifier to send the keepalive for
    // this identifier is issued by the server when it accepts the
    // subscription
    optional bytes id = 1;
}

// cancels a subscription
message SubscribeCancel {
    // subscription identifier to cancel
    optional bytes id = 1;
}