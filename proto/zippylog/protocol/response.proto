// this file describes protocol buffer messages sent by the server to clients

package zippylog.protocol.response;

// response to a ping
message PongV1 {}

// describes features a server supports
message FeatureSpecificationV1 {
    // list of message formats the server can speak
    repeated uint32 supported_message_formats = 1;

	// list of request message types (in zippylog namespace) that server can
	// process
	repeated uint32 supported_request_types = 2;

	// same as above, but string representation of request message names
	repeated string supported_request_names = 3;

	// maximum number of bytes server will send in a stream segment
	optional uint32 max_stream_segment_bytes = 4;

	// maximum number of envelopes server will send in a stream segment
	optional uint32 max_stream_segment_envelopes = 5;
}

// when a stream segment is downloaded, this will be the first message
// sent by the server. it tells the client what it is receiving
message StreamSegmentStartV1 {
    required string path = 1;
    required uint64 offset = 2;
}

// this terminates a stream segment sent by the server
// the client should use the seen offsets to record which part of the stream(s)
// it has received and repeat requests, if necessary
message StreamSegmentEndV1 {
    // offset at which next event begins
    required uint64 offset = 1;

    // total bytes sent in the segment
    required uint32 bytes_sent = 2;

    // total envelopes from stream sent
    required uint32 envelopes_sent = 3;

    // TODO record offset ranges that were skipped, possibly why
}

// acknowledges a subscription request
message SubscribeAckV1 {
    // unique identifier for this subscription
    // client needs to record this identifier to send in SubscribeKeepalive
    // messages to keep the subscription active
    required bytes id = 1;

    // number of milliseconds (roughly) client has to renew subscription via a
    // SubscribeKeepalive message before the server drops the subscription
    // the timer starts on the server before the client receives this message
    // so, clients should probably send an ack a few seconds before this TTL is
    // expired (5s would be reasonable)
    required uint32 ttl = 2;
}

// first message in sequence of a subscription response
message SubscriptionStartV1 {
    required bytes id = 1;
}

message WriteAckV1 {
    // number of envelopes written
    required uint32 envelopes_written = 1;
}

message Error {
    optional ErrorCode code = 1;
    optional string msg = 2;
}

enum ErrorCode {
    // server could not parse received envelope
    ENVELOPE_PARSE_FAILURE = 1;

    // received message not from the zippylog namespace
    INVALID_MESSAGE_NAMESPACE = 2;

    // server does not know how to handle requested message type
    UNKNOWN_REQUEST_TYPE = 3;

    // server received an envelope but it had no messages telling it what to do
    EMPTY_ENVELOPE = 4;

    // server received a message but its enumerations were not defined, so it
    // does not know how to handle it
    MISSING_ENUMERATIONS = 5;

    // server understood the request type, but does not know how to fulfill it
    REQUEST_NOT_IMPLEMENTED = 6;

    // required field in request envelope is empty
    EMPTY_FIELD = 7;

    // a set of related fields which are required to have the same number of
    // elements don't
    FIELD_LENGTHS_DIFFERENT = 8;

    // a specified stream offset is not valid
    INVALID_STREAM_OFFSET = 9;

    // offset is invalid
    INVALID_OFFSET = 10;

    // requested path does not exist in the store
    PATH_NOT_FOUND = 11;

    // some type of limit of exceeded
    LIMIT_EXCEEDED = 12;

    // the protocol version number in the 0MQ message (the first byte) is
    // not known to the server
    UNKNOWN_MESSAGE_FORMAT_VERSION = 13;

    // the path specified is not valid
    INVALID_PATH = 14;

    // the version of the operation message is unsupported by the server
    UNSUPPORTED_OPERATION_MESSAGE_VERSION = 15;

    // received an empty message
    EMPTY_MESSAGE = 16;

    // no envelope seen in the 0MQ message
    PROTOCOL_NO_ENVELOPE = 17;

    // a general failure occurred when processing the request
    // this is likely an exception or similar condition
    GENERAL_ERROR_PROCESSING = 18;

	// Lua code threw an error
	LUA_ERROR = 19;
}