#!/usr/bin/python

#  Copyright 2010 Gregory Szorc
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import json
import subprocess
from optparse import OptionParser
import os
from os.path import dirname, exists, join
import re
import StringIO

parser = OptionParser(
    description='Generates Protocol Buffer extensions for all defined messages',
    usage='%prog [options] /path/to/messages /output/path'
)

parser.add_option('-p', '--protoc', default='/usr/bin/protoc', help='Path to protoc binary')
parser.add_option('--cpp-namespace', help='C++ namespace for generated message registry file')

(options, args) = parser.parse_args()

if len(args) != 2:
    print 'program requires exactly two arguments. run with --help'
    exit(1)

if not os.access(options.protoc, os.X_OK):
    print '%s is not executable. consider specifying path explicitly' % options.protoc
    exit(1)

messages_dir = args[0]

if not exists(messages_dir):
    print 'message directory %s does not exist' % messages_dir
    exit(1)

out_dir = args[1]

state_file = join(out_dir, 'pblog-state.json')

message_files = []
for root, dirs, files in os.walk(messages_dir):
    for f in filter(lambda x: x[-6:] == '.proto', files):
        message_files.append(join(root, f))

protoc_args = [ options.protoc, '-I%s' % out_dir, '-I%s' % messages_dir ]

py_out = join(out_dir, 'py')
cpp_out = join(out_dir, 'cpp')
java_out = join(out_dir, 'java')

if not exists(py_out):
    os.makedirs(py_out)
if not exists(cpp_out):
    os.makedirs(cpp_out)
if not exists(java_out):
    os.makedirs(java_out)

# the standard generators
protoc_args.append('--python_out=%s' % py_out)
protoc_args.append('--cpp_out=%s' % cpp_out)
protoc_args.append('--java_out=%s' % java_out)

# our custom generators
protoc_args.append('--python_pb_out=%s' % py_out)
protoc_args.append('--cpp_pb_out=%s' % cpp_out)

protoc_args.extend(message_files)

env = os.environ
env['PBLOG_STATE_FILE'] = state_file
env['PATH'] = ':'.join([dirname(__file__), env['PATH']])

if options.cpp_namespace:
    env['PBLOG_CPP_MESSAGES_NAMESPACE'] = options.cpp_namespace

print 'executing protoc: %s' % ' '.join(protoc_args)
p = subprocess.Popen(protoc_args, env=env)
p.wait()

# touch __init__.py files for Python directories
for root, dirs, files in os.walk(py_out):
    init = join(root, '__init__.py')
    if not exists(init):
        with open(init, 'w') as fh:
            pass
